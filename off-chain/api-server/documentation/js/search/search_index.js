var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AddLeaderboardDto.html",[0,0.281,1,0.442]],["body/classes/AddLeaderboardDto.html",[0,0.584,1,0.548,2,0.299,3,0.132,4,0.132,5,0.116,6,0.43,7,0.099,8,0.263,9,0.722,10,0.694,11,0.647,12,0.519,13,0.248,14,0.018,15,0.323,16,0.913,17,0.913,18,0.742,19,0.562,20,1.014,21,0.435,22,3.272,23,0.613,24,0.715,25,3.272,26,0.429,27,0.485,28,3.272,29,0.647,30,0.755,31,0.647,32,3.272,33,0.259,34,1.11,35,0.43,36,0.881,37,0.781,38,0.362,39,0.455,40,0.87,41,0.453,42,0.441,43,0.384,44,0.399,45,0.857,46,0.857,47,0.755,48,0.647,49,0.647,50,0.755,51,0.613,52,0.455,53,0.384,54,0.755,55,0.453,56,0.647,57,0.823,58,0.755,59,0.384,60,0.647,61,0.384,62,0.613,63,0.58,64,0.384,65,0.384,66,0.384,67,0.881,68,0.858,69,0.905,70,0.406,71,0.647,72,0.406,73,0.384,74,0.384,75,0.647,76,0.58,77,0.58,78,0.384,79,0.869,80,0.43,81,0.78,82,0.58,83,0.384,84,0.43,85,0.384,86,0.905,87,0.453,88,0.453,89,0.612,90,0.384,91,0.715,92,0.857,93,0.47,94,0.647,95,0.647,96,0.823,97,0.656,98,0.613,99,0.362,100,0.384,101,0.58,102,0.485,103,0.43,104,0.453,105,0.455,106,0.435,107,0.67,108,0.784,109,0.58,110,0.676,111,0.453,112,0.384,113,0.43,114,0.319,115,0.384,116,0.384,117,0.202,118,0.384,119,0.299,120,0.384,121,0.516,122,0.362,123,0.485,124,0.362,125,0.362,126,0.362,127,0.384,128,0.362,129,0.384,130,0.531,131,0.319,132,0.43,133,0.384,134,0.773,135,0.699,136,0.548,137,0.516,138,0.676,139,0.647,140,0.696,141,0.455,142,0.647,143,0.613,144,0.384,145,0.362,146,0.384,147,0.453,148,0.516,149,0.516,150,0.647,151,0.406,152,0.384,153,0.647,154,0.406,155,0.384,156,0.43,157,0.613,158,0.453,159,0.516,160,0.453,161,0.453,162,0.384,163,0.406,164,0.406,165,0.384,166,0.453,167,0.453,168,0.647,169,0.647,170,0.453,171,0.453,172,0.406,173,0.406,174,0.406,175,0.01,176,0.01]],["title/classes/AddLeaderboardResponseDto.html",[0,0.281,115,0.442]],["body/classes/AddLeaderboardResponseDto.html",[0,0.584,1,0.388,2,0.302,3,0.134,4,0.134,5,0.117,6,0.434,7,0.101,8,0.265,9,0.66,10,0.606,11,0.649,12,0.516,13,0.232,14,0.018,15,0.323,16,0.724,17,0.724,18,0.741,19,0.561,20,0.997,21,0.345,23,0.598,24,0.618,26,0.43,27,0.344,29,0.459,30,0.652,31,0.459,33,0.262,34,1.11,35,0.434,36,0.902,37,0.781,38,0.52,39,0.615,40,0.908,41,0.652,42,0.441,43,0.388,44,0.401,45,0.86,46,0.86,47,0.759,48,0.652,49,0.652,50,0.759,51,0.618,52,0.459,53,0.388,54,0.759,55,0.459,56,0.652,57,0.827,58,0.759,59,0.388,60,0.652,61,0.388,62,0.618,63,0.585,64,0.388,65,0.388,66,0.388,67,0.894,68,0.859,69,0.908,70,0.411,71,0.652,72,0.411,73,0.388,74,0.388,75,0.652,76,0.585,77,0.585,78,0.388,79,0.871,80,0.434,81,0.784,82,0.585,83,0.388,84,0.434,85,0.388,86,0.908,87,0.459,88,0.459,89,0.615,90,0.388,91,0.719,92,0.86,93,0.472,94,0.652,95,0.652,96,0.827,97,0.66,98,0.618,99,0.366,100,0.388,101,0.585,102,0.489,103,0.434,104,0.459,105,0.459,106,0.437,107,0.672,108,0.786,109,0.585,110,0.741,111,0.459,112,0.388,113,0.434,114,0.323,115,0.552,116,0.388,117,0.205,118,0.388,119,0.302,120,0.388,121,0.52,122,0.366,123,0.489,124,0.366,125,0.366,126,0.366,127,0.388,128,0.366,129,0.388,130,0.534,131,0.323,132,0.434,133,0.388,134,0.775,135,0.701,136,0.552,137,0.52,138,0.68,139,0.652,140,0.7,141,0.459,142,0.652,143,0.618,144,0.388,145,0.366,146,0.388,147,0.459,148,0.52,149,0.52,150,0.652,151,0.411,152,0.388,153,0.652,154,0.411,155,0.388,156,0.434,157,0.618,158,0.459,159,0.52,160,0.459,161,0.459,162,0.388,163,0.411,164,0.411,165,0.388,166,0.459,167,0.459,168,0.652,169,0.652,170,0.459,171,0.459,172,0.411,173,0.411,174,0.411,175,0.01,176,0.01,177,3.309,178,1.49,179,1.661]],["title/injectables/AppLogger.html",[180,2.446,181,2.906]],["body/injectables/AppLogger.html",[0,0.364,3,0.27,4,0.198,5,0.247,7,0.148,8,0.344,13,0.26,14,0.018,15,0.322,21,0.556,33,0.483,37,0.476,42,0.275,44,0.537,52,0.476,67,0.758,89,0.749,106,0.537,117,0.302,123,0.507,175,0.014,176,0.014,180,3.965,181,4.71,182,3.765,183,4.208,184,6.106,185,6.106,186,6.106,187,6.106,188,6.106,189,6.106,190,6.664,191,4.688,192,6.664,193,2.612,194,6.982,195,6.982,196,6.106,197,6.106,198,3.69,199,4.71,200,6.106,201,2.95,202,6.106,203,6.106,204,3.482,205,7.684,206,4.881,207,2.885,208,5.656,209,4.881,210,6.106,211,4.881,212,4.881,213,6.106,214,4.881,215,5.745,216,6.106,217,7.189,218,4.881,219,6.106,220,4.881,221,6.106,222,4.881,223,3.544,224,2.198,225,2.45,226,3.434,227,4.296,228,4.881,229,7.189,230,4.881,231,4.881,232,4.881,233,4.881,234,4.881,235,4.881,236,4.881,237,4.881,238,4.881,239,4.881,240,4.881,241,4.881,242,4.881,243,4.881,244,4.881,245,4.881,246,4.881,247,3.544,248,6.106,249,4.881,250,4.881,251,4.881,252,4.881,253,3.434,254,4.881,255,4.881,256,4.881,257,4.881,258,1.893,259,4.881,260,4.881,261,4.881,262,4.881]],["title/modules/AppModule.html",[263,2.906,264,2.65]],["body/modules/AppModule.html",[0,0.435,3,0.236,4,0.236,5,0.206,14,0.018,33,0.597,42,0.328,175,0.015,176,0.015,226,4.098,263,5.549,264,5.462,265,4.493,266,4.098,267,5.022,268,5.022,269,4.098,270,6.202,271,5.022,272,5.022,273,5.022,274,4.963,275,5.895,276,5.858,277,5.022,278,4.493,279,5.825,280,6.795,281,6.202,282,5.825,283,5.022,284,5.825,285,5.825,286,5.825,287,5.825,288,5.825]],["title/injectables/AppService.html",[180,2.446,274,2.446]],["body/injectables/AppService.html",[0,0.451,3,0.245,4,0.245,5,0.214,7,0.184,14,0.017,15,0.281,21,0.442,33,0.478,42,0.34,117,0.374,175,0.015,176,0.015,180,4.506,182,4.659,193,2.968,207,2.342,226,4.249,274,4.506,289,5.207,290,7.496,291,6.04,292,6.04,293,6.04]],["title/classes/AuthVerifyDto.html",[0,0.281,155,0.442]],["body/classes/AuthVerifyDto.html",[0,0.583,1,0.375,2,0.292,3,0.13,4,0.13,5,0.113,6,0.42,7,0.097,8,0.259,9,0.65,10,0.594,11,0.609,12,0.518,13,0.256,14,0.018,15,0.323,16,1.027,17,1.027,18,0.74,19,0.565,20,0.99,21,0.489,23,0.591,24,0.603,26,0.427,27,0.332,29,0.443,30,0.745,31,0.443,33,0.253,34,1.109,35,0.42,36,0.877,37,0.78,38,0.354,39,0.448,40,0.863,41,0.443,42,0.44,43,0.375,44,0.394,45,0.851,46,0.851,47,0.745,48,0.637,49,0.637,50,0.745,51,0.603,52,0.448,53,0.375,54,0.745,55,0.443,56,0.637,57,0.814,58,0.745,59,0.375,60,0.637,61,0.375,62,0.603,63,0.571,64,0.375,65,0.375,66,0.375,67,0.877,68,0.876,69,0.898,70,0.397,71,0.637,72,0.397,73,0.375,74,0.375,75,0.637,76,0.571,77,0.571,78,0.375,79,0.888,80,0.42,81,0.772,82,0.571,83,0.375,84,0.42,85,0.375,86,0.947,87,0.443,88,0.443,89,0.651,90,0.375,91,0.706,92,0.851,93,0.465,94,0.637,95,0.637,96,0.814,97,0.716,98,0.603,99,0.354,100,0.375,101,0.571,102,0.478,103,0.42,104,0.443,105,0.448,106,0.43,107,0.678,108,0.78,109,0.571,110,0.668,111,0.443,112,0.375,113,0.42,114,0.312,115,0.375,116,0.375,117,0.198,118,0.375,119,0.292,120,0.375,121,0.508,122,0.354,123,0.478,124,0.354,125,0.354,126,0.354,127,0.375,128,0.354,129,0.375,130,0.524,131,0.312,132,0.42,133,0.375,134,0.79,135,0.723,136,0.539,137,0.508,138,0.73,139,0.637,140,0.689,141,0.448,142,0.637,143,0.603,144,0.375,145,0.354,146,0.375,147,0.443,148,0.594,149,0.65,150,0.745,151,0.397,152,0.375,153,0.814,154,0.397,155,0.539,156,0.706,157,0.817,158,0.637,159,0.65,160,0.637,161,0.637,162,0.375,163,0.397,164,0.397,165,0.375,166,0.443,167,0.443,168,0.637,169,0.637,170,0.443,171,0.443,172,0.397,173,0.397,174,0.397,175,0.01,176,0.01,294,3.199,295,3.199,296,3.199,297,3.199,298,3.199,299,3.199,300,3.199]],["title/classes/AuthVerifyResponseDto.html",[0,0.281,162,0.442]],["body/classes/AuthVerifyResponseDto.html",[0,0.584,1,0.381,2,0.297,3,0.132,4,0.132,5,0.115,6,0.427,7,0.099,8,0.262,9,0.654,10,0.6,11,0.612,12,0.519,13,0.247,14,0.018,15,0.323,16,0.963,17,0.963,18,0.744,19,0.566,20,0.994,21,0.459,23,0.594,24,0.61,26,0.427,27,0.338,29,0.451,30,0.644,31,0.451,33,0.257,34,1.11,35,0.427,36,0.88,37,0.781,38,0.359,39,0.453,40,0.868,41,0.451,42,0.441,43,0.381,44,0.397,45,0.855,46,0.855,47,0.752,48,0.644,49,0.644,50,0.752,51,0.61,52,0.453,53,0.381,54,0.752,55,0.451,56,0.644,57,0.821,58,0.752,59,0.381,60,0.644,61,0.381,62,0.61,63,0.577,64,0.381,65,0.381,66,0.381,67,0.88,68,0.863,69,0.93,70,0.404,71,0.644,72,0.404,73,0.381,74,0.381,75,0.644,76,0.577,77,0.577,78,0.381,79,0.867,80,0.427,81,0.777,82,0.577,83,0.381,84,0.427,85,0.381,86,0.93,87,0.451,88,0.451,89,0.611,90,0.381,91,0.777,92,0.93,93,0.496,94,0.752,95,0.752,96,0.868,97,0.692,98,0.777,99,0.359,100,0.381,101,0.577,102,0.483,103,0.427,104,0.451,105,0.453,106,0.434,107,0.669,108,0.783,109,0.577,110,0.674,111,0.451,112,0.381,113,0.427,114,0.317,115,0.381,116,0.381,117,0.201,118,0.381,119,0.297,120,0.381,121,0.514,122,0.359,123,0.483,124,0.359,125,0.359,126,0.359,127,0.381,128,0.359,129,0.381,130,0.529,131,0.317,132,0.427,133,0.381,134,0.772,135,0.713,136,0.545,137,0.654,138,0.674,139,0.644,140,0.694,141,0.453,142,0.644,143,0.61,144,0.381,145,0.359,146,0.381,147,0.451,148,0.514,149,0.514,150,0.644,151,0.404,152,0.381,153,0.644,154,0.404,155,0.381,156,0.427,157,0.61,158,0.451,159,0.514,160,0.451,161,0.451,162,0.545,163,0.404,164,0.404,165,0.381,166,0.451,167,0.451,168,0.644,169,0.644,170,0.451,171,0.451,172,0.404,173,0.404,174,0.404,175,0.01,176,0.01,301,3.251,302,3.251,303,3.251,304,3.251,305,3.251]],["title/classes/BeatmapsNftDto.html",[0,0.281,77,0.468]],["body/classes/BeatmapsNftDto.html",[0,0.584,1,0.389,2,0.302,3,0.134,4,0.134,5,0.117,6,0.435,7,0.101,8,0.266,9,0.66,10,0.606,11,0.615,12,0.519,13,0.244,14,0.018,15,0.323,18,0.741,19,0.561,20,0.986,21,0.437,23,0.598,24,0.619,26,0.428,27,0.344,29,0.459,30,0.653,31,0.459,33,0.262,34,1.111,35,0.435,36,0.883,37,0.781,38,0.366,39,0.46,40,0.874,41,0.459,42,0.441,43,0.389,44,0.402,45,0.861,46,0.861,47,0.76,48,0.653,49,0.653,50,0.76,51,0.619,52,0.46,53,0.389,54,0.76,55,0.459,56,0.653,57,0.909,58,0.874,59,0.389,60,0.828,61,0.389,62,0.619,63,0.585,64,0.389,65,0.389,66,0.389,67,0.883,68,0.86,69,0.909,70,0.412,71,0.653,72,0.412,73,0.389,74,0.389,75,0.653,76,0.585,77,0.681,78,0.389,79,0.871,80,0.435,81,0.784,82,0.585,83,0.389,84,0.435,85,0.389,86,0.909,87,0.459,88,0.459,89,0.615,90,0.389,91,0.72,92,0.861,93,0.472,94,0.653,95,0.653,96,0.828,97,0.66,98,0.619,99,0.366,100,0.389,101,0.585,102,0.49,103,0.435,104,0.459,105,0.46,106,0.437,107,0.672,108,0.786,109,0.585,110,0.681,111,0.459,112,0.389,113,0.435,114,0.323,115,0.389,116,0.389,117,0.205,118,0.389,119,0.302,120,0.389,121,0.521,122,0.366,123,0.49,124,0.366,125,0.366,126,0.366,127,0.389,128,0.366,129,0.389,130,0.535,131,0.323,132,0.435,133,0.389,134,0.775,135,0.701,136,0.553,137,0.521,138,0.681,139,0.653,140,0.7,141,0.46,142,0.653,143,0.619,144,0.389,145,0.366,146,0.389,147,0.459,148,0.521,149,0.521,150,0.653,151,0.412,152,0.389,153,0.653,154,0.412,155,0.389,156,0.435,157,0.619,158,0.459,159,0.521,160,0.459,161,0.459,162,0.389,163,0.412,164,0.412,165,0.389,166,0.459,167,0.459,168,0.653,169,0.653,170,0.459,171,0.459,172,0.412,173,0.412,174,0.412,175,0.01,176,0.01,306,3.314,307,3.314,308,3.314,309,3.314]],["title/classes/BeatsNftDto.html",[0,0.281,76,0.468]],["body/classes/BeatsNftDto.html",[0,0.585,1,0.391,2,0.304,3,0.135,4,0.135,5,0.118,6,0.438,7,0.101,8,0.267,9,0.662,10,0.608,11,0.617,12,0.516,13,0.233,14,0.018,15,0.323,18,0.742,19,0.562,20,0.987,21,0.347,23,0.6,24,0.622,26,0.429,27,0.347,29,0.462,30,0.656,31,0.462,33,0.264,34,1.111,35,0.438,36,0.885,37,0.781,38,0.369,39,0.462,40,0.877,41,0.462,42,0.441,43,0.391,44,0.463,45,0.863,46,0.863,47,0.877,48,0.656,49,0.656,50,0.763,51,0.622,52,0.462,53,0.391,54,0.763,55,0.462,56,0.656,57,0.83,58,0.763,59,0.391,60,0.656,61,0.391,62,0.622,63,0.588,64,0.391,65,0.391,66,0.391,67,0.885,68,0.861,69,0.911,70,0.414,71,0.656,72,0.414,73,0.391,74,0.391,75,0.656,76,0.684,77,0.588,78,0.391,79,0.873,80,0.438,81,0.787,82,0.588,83,0.391,84,0.438,85,0.391,86,0.911,87,0.462,88,0.462,89,0.617,90,0.391,91,0.723,92,0.863,93,0.474,94,0.656,95,0.656,96,0.83,97,0.662,98,0.622,99,0.369,100,0.391,101,0.588,102,0.492,103,0.438,104,0.462,105,0.462,106,0.439,107,0.674,108,0.787,109,0.588,110,0.684,111,0.462,112,0.391,113,0.438,114,0.325,115,0.391,116,0.391,117,0.206,118,0.391,119,0.304,120,0.391,121,0.523,122,0.369,123,0.492,124,0.369,125,0.369,126,0.369,127,0.391,128,0.369,129,0.391,130,0.537,131,0.325,132,0.438,133,0.391,134,0.777,135,0.703,136,0.555,137,0.523,138,0.684,139,0.656,140,0.703,141,0.462,142,0.656,143,0.622,144,0.391,145,0.369,146,0.391,147,0.462,148,0.523,149,0.523,150,0.656,151,0.414,152,0.391,153,0.656,154,0.414,155,0.391,156,0.438,157,0.622,158,0.462,159,0.523,160,0.462,161,0.462,162,0.391,163,0.414,164,0.414,165,0.391,166,0.462,167,0.462,168,0.656,169,0.656,170,0.462,171,0.462,172,0.414,173,0.414,174,0.414,175,0.011,176,0.011,310,3.337,311,3.337]],["title/classes/CheckUsernameDto.html",[0,0.281,127,0.442]],["body/classes/CheckUsernameDto.html",[0,0.585,1,0.392,2,0.305,3,0.135,4,0.135,5,0.118,6,0.439,7,0.102,8,0.267,9,0.662,10,0.609,11,0.617,12,0.52,13,0.224,14,0.018,15,0.323,16,0.514,17,0.514,18,0.742,19,0.562,20,0.988,21,0.245,23,0.6,24,0.622,26,0.429,27,0.347,29,0.463,30,0.657,31,0.463,33,0.264,34,1.111,35,0.439,36,0.885,37,0.781,38,0.369,39,0.462,40,0.877,41,0.463,42,0.441,43,0.392,44,0.403,45,0.863,46,0.863,47,0.763,48,0.657,49,0.657,50,0.763,51,0.622,52,0.462,53,0.392,54,0.763,55,0.463,56,0.657,57,0.831,58,0.763,59,0.392,60,0.657,61,0.392,62,0.622,63,0.589,64,0.392,65,0.392,66,0.392,67,0.885,68,0.861,69,0.911,70,0.415,71,0.657,72,0.415,73,0.392,74,0.392,75,0.657,76,0.589,77,0.589,78,0.392,79,0.873,80,0.439,81,0.787,82,0.589,83,0.392,84,0.439,85,0.392,86,0.911,87,0.463,88,0.463,89,0.617,90,0.392,91,0.723,92,0.863,93,0.474,94,0.657,95,0.657,96,0.831,97,0.662,98,0.622,99,0.369,100,0.392,101,0.589,102,0.493,103,0.439,104,0.463,105,0.462,106,0.439,107,0.674,108,0.788,109,0.589,110,0.684,111,0.463,112,0.392,113,0.439,114,0.326,115,0.392,116,0.392,117,0.207,118,0.392,119,0.305,120,0.392,121,0.524,122,0.369,123,0.493,124,0.369,125,0.369,126,0.369,127,0.556,128,0.524,129,0.392,130,0.537,131,0.326,132,0.439,133,0.392,134,0.777,135,0.703,136,0.556,137,0.524,138,0.684,139,0.657,140,0.703,141,0.462,142,0.657,143,0.622,144,0.392,145,0.369,146,0.392,147,0.463,148,0.524,149,0.524,150,0.657,151,0.415,152,0.392,153,0.657,154,0.415,155,0.392,156,0.439,157,0.622,158,0.463,159,0.524,160,0.463,161,0.463,162,0.392,163,0.415,164,0.415,165,0.392,166,0.463,167,0.463,168,0.657,169,0.657,170,0.463,171,0.463,172,0.415,173,0.415,174,0.415,175,0.011,176,0.011,312,3.34]],["title/classes/CheckUsernameResponseDto.html",[0,0.281,129,0.442]],["body/classes/CheckUsernameResponseDto.html",[0,0.585,1,0.392,2,0.305,3,0.135,4,0.135,5,0.118,6,0.439,7,0.102,8,0.267,9,0.662,10,0.609,11,0.617,12,0.518,13,0.224,14,0.018,15,0.323,16,0.514,17,0.514,18,0.742,19,0.562,20,0.988,21,0.245,23,0.6,24,0.622,26,0.429,27,0.347,29,0.463,30,0.657,31,0.463,33,0.264,34,1.111,35,0.439,36,0.885,37,0.781,38,0.369,39,0.462,40,0.877,41,0.463,42,0.441,43,0.392,44,0.403,45,0.863,46,0.863,47,0.763,48,0.657,49,0.657,50,0.763,51,0.622,52,0.462,53,0.392,54,0.763,55,0.463,56,0.657,57,0.831,58,0.763,59,0.392,60,0.657,61,0.392,62,0.622,63,0.589,64,0.392,65,0.392,66,0.392,67,0.885,68,0.861,69,0.911,70,0.415,71,0.657,72,0.415,73,0.392,74,0.392,75,0.657,76,0.589,77,0.589,78,0.392,79,0.873,80,0.439,81,0.787,82,0.589,83,0.392,84,0.439,85,0.392,86,0.911,87,0.463,88,0.463,89,0.617,90,0.392,91,0.723,92,0.863,93,0.501,94,0.657,95,0.657,96,0.831,97,0.662,98,0.622,99,0.369,100,0.392,101,0.589,102,0.493,103,0.439,104,0.463,105,0.462,106,0.439,107,0.674,108,0.788,109,0.589,110,0.684,111,0.463,112,0.392,113,0.439,114,0.326,115,0.392,116,0.392,117,0.207,118,0.392,119,0.305,120,0.392,121,0.524,122,0.369,123,0.493,124,0.369,125,0.369,126,0.369,127,0.392,128,0.369,129,0.556,130,0.641,131,0.326,132,0.439,133,0.392,134,0.777,135,0.703,136,0.556,137,0.524,138,0.684,139,0.657,140,0.703,141,0.462,142,0.657,143,0.622,144,0.392,145,0.369,146,0.392,147,0.463,148,0.524,149,0.524,150,0.657,151,0.415,152,0.392,153,0.657,154,0.415,155,0.392,156,0.439,157,0.622,158,0.463,159,0.524,160,0.463,161,0.463,162,0.392,163,0.415,164,0.415,165,0.392,166,0.463,167,0.463,168,0.657,169,0.657,170,0.463,171,0.463,172,0.415,173,0.415,174,0.415,175,0.011,176,0.011,313,3.34]],["title/classes/Config.html",[0,0.281,314,2.131]],["body/classes/Config.html",[0,0.346,2,0.423,3,0.188,4,0.188,5,0.164,7,0.141,13,0.164,14,0.018,15,0.319,21,0.58,23,0.54,26,0.367,42,0.262,44,0.34,52,0.452,93,0.56,106,0.34,117,0.49,148,0.513,175,0.013,176,0.013,193,2.529,204,2.203,207,2.293,215,3.999,225,3.737,314,3.344,315,3.999,316,7.944,317,6.854,318,5.913,319,5.913,320,6.509,321,6.509,322,6.509,323,6.509,324,6.509,325,6.509,326,6.509,327,6.509,328,6.509,329,6.509,330,6.509,331,6.509,332,6.509,333,6.509,334,6.509,335,6.509,336,6.509,337,6.509,338,6.509,339,6.509,340,6.509,341,6.509,342,6.509,343,4.638,344,5.913,345,4.638,346,4.638,347,4.638,348,4.638,349,4.638,350,4.638,351,4.638,352,4.638,353,4.638,354,4.638,355,4.638,356,4.638,357,4.638,358,4.638,359,4.638,360,4.638,361,4.638,362,4.638,363,4.638,364,4.638,365,4.638,366,4.638,367,4.638,368,4.638,369,4.638,370,4.638,371,4.638,372,4.638,373,4.638,374,4.638,375,4.638,376,4.638,377,4.638,378,4.638,379,4.638,380,4.638,381,4.638,382,4.638,383,4.638,384,4.638,385,4.638,386,4.638,387,4.638,388,4.638,389,4.638,390,4.638,391,4.638,392,4.638,393,4.638,394,4.638,395,4.638,396,4.638,397,4.638,398,4.638,399,4.638,400,4.638,401,4.638,402,4.638,403,3.999,404,3.999,405,3.999,406,5.098,407,3.999,408,4.638,409,4.638,410,4.638,411,4.638,412,4.638,413,2.467,414,4.638,415,4.638,416,2.467,417,4.638,418,4.638,419,4.638,420,4.638,421,4.638]],["title/classes/DynamoDbAccess.html",[0,0.281,422,2.446]],["body/classes/DynamoDbAccess.html",[0,0.341,2,0.417,3,0.185,4,0.185,5,0.162,7,0.139,8,0.33,13,0.255,14,0.018,15,0.262,21,0.537,33,0.463,42,0.257,44,0.516,59,0.686,106,0.516,117,0.436,141,0.737,175,0.016,176,0.013,193,2.504,198,4.72,201,3.904,204,3.345,207,2.732,223,4.02,247,3.898,258,2.795,314,3.311,413,3.747,416,3.747,422,3.801,423,3.522,424,4.545,425,4.681,426,5.853,427,5.853,428,5.853,429,5.853,430,5.853,431,5.853,432,5.853,433,4.566,434,5.275,435,3.233,436,5.853,437,4.566,438,5.853,439,4.566,440,5.853,441,4.566,442,5.853,443,4.566,444,4.195,445,4.257,446,2.583,447,3.936,448,3.212,449,4.566,450,3.936,451,3.936,452,3.936,453,3.936,454,3.936,455,3.936,456,4.566,457,4.566,458,4.566,459,4.566,460,4.566,461,3.936,462,5.56,463,4.575,464,6.074,465,6.074,466,4.566,467,6.464,468,3.488,469,6.461,470,7.558,471,4.566,472,4.566,473,4.566,474,5.046,475,4.515,476,3.801,477,5.046,478,5.046,479,5.853,480,3.522,481,3.522]],["title/classes/GetAccountDto.html",[0,0.281,133,0.442]],["body/classes/GetAccountDto.html",[0,0.584,1,0.388,2,0.302,3,0.134,4,0.134,5,0.117,6,0.434,7,0.101,8,0.265,9,0.724,10,0.697,11,0.615,12,0.517,13,0.239,14,0.018,15,0.323,16,0.723,17,0.723,18,0.743,19,0.563,20,0.985,21,0.345,23,0.629,24,0.618,26,0.428,27,0.344,29,0.458,30,0.652,31,0.458,33,0.262,34,1.11,35,0.434,36,0.883,37,0.781,38,0.365,39,0.459,40,0.934,41,0.458,42,0.441,43,0.388,44,0.401,45,0.86,46,0.86,47,0.759,48,0.652,49,0.652,50,0.759,51,0.618,52,0.459,53,0.388,54,0.759,55,0.458,56,0.652,57,0.827,58,0.759,59,0.388,60,0.652,61,0.388,62,0.618,63,0.584,64,0.388,65,0.388,66,0.388,67,0.883,68,0.859,69,0.908,70,0.411,71,0.652,72,0.411,73,0.388,74,0.388,75,0.652,76,0.584,77,0.584,78,0.388,79,0.871,80,0.434,81,0.783,82,0.584,83,0.388,84,0.434,85,0.388,86,0.908,87,0.458,88,0.458,89,0.615,90,0.388,91,0.719,92,0.86,93,0.472,94,0.652,95,0.652,96,0.827,97,0.659,98,0.618,99,0.365,100,0.388,101,0.584,102,0.489,103,0.434,104,0.458,105,0.459,106,0.437,107,0.684,108,0.786,109,0.584,110,0.68,111,0.458,112,0.388,113,0.434,114,0.322,115,0.388,116,0.388,117,0.205,118,0.388,119,0.302,120,0.388,121,0.52,122,0.365,123,0.489,124,0.365,125,0.365,126,0.365,127,0.388,128,0.365,129,0.388,130,0.534,131,0.322,132,0.434,133,0.552,134,0.803,135,0.716,136,0.552,137,0.52,138,0.68,139,0.652,140,0.7,141,0.459,142,0.652,143,0.618,144,0.388,145,0.365,146,0.388,147,0.458,148,0.52,149,0.52,150,0.652,151,0.411,152,0.388,153,0.652,154,0.411,155,0.388,156,0.434,157,0.618,158,0.458,159,0.52,160,0.458,161,0.458,162,0.388,163,0.411,164,0.411,165,0.388,166,0.458,167,0.458,168,0.652,169,0.652,170,0.458,171,0.458,172,0.411,173,0.411,174,0.411,175,0.01,176,0.01,482,3.306,483,3.306]],["title/classes/GetAccountResponseDto.html",[0,0.281,136,0.442]],["body/classes/GetAccountResponseDto.html",[0,0.584,1,0.384,2,0.299,3,0.133,4,0.133,5,0.116,6,0.43,7,0.1,8,0.264,9,0.657,10,0.602,11,0.613,12,0.519,13,0.243,14,0.018,15,0.323,16,0.914,17,0.914,18,0.742,19,0.562,20,0.983,21,0.435,23,0.596,24,0.614,26,0.429,27,0.341,29,0.454,30,0.648,31,0.454,33,0.259,34,1.11,35,0.43,36,0.881,37,0.781,38,0.362,39,0.456,40,0.871,41,0.454,42,0.441,43,0.384,44,0.399,45,0.858,46,0.858,47,0.755,48,0.648,49,0.648,50,0.755,51,0.614,52,0.456,53,0.384,54,0.755,55,0.454,56,0.648,57,0.824,58,0.755,59,0.384,60,0.648,61,0.384,62,0.614,63,0.581,64,0.384,65,0.384,66,0.384,67,0.881,68,0.858,69,0.905,70,0.407,71,0.648,72,0.407,73,0.384,74,0.384,75,0.648,76,0.581,77,0.581,78,0.384,79,0.881,80,0.43,81,0.78,82,0.581,83,0.384,84,0.43,85,0.384,86,0.905,87,0.454,88,0.454,89,0.613,90,0.384,91,0.715,92,0.858,93,0.47,94,0.648,95,0.648,96,0.871,97,0.657,98,0.614,99,0.362,100,0.384,101,0.581,102,0.486,103,0.43,104,0.454,105,0.456,106,0.435,107,0.67,108,0.784,109,0.581,110,0.677,111,0.454,112,0.384,113,0.43,114,0.32,115,0.384,116,0.384,117,0.203,118,0.384,119,0.299,120,0.384,121,0.517,122,0.362,123,0.486,124,0.362,125,0.362,126,0.362,127,0.384,128,0.362,129,0.384,130,0.531,131,0.32,132,0.43,133,0.384,134,0.773,135,0.715,136,0.639,137,0.657,138,0.738,139,0.755,140,0.788,141,0.531,142,0.755,143,0.78,144,0.384,145,0.362,146,0.384,147,0.454,148,0.517,149,0.517,150,0.648,151,0.407,152,0.384,153,0.648,154,0.407,155,0.384,156,0.43,157,0.614,158,0.454,159,0.517,160,0.454,161,0.454,162,0.384,163,0.407,164,0.407,165,0.384,166,0.454,167,0.454,168,0.648,169,0.648,170,0.454,171,0.454,172,0.407,173,0.407,174,0.407,175,0.01,176,0.01,484,3.277,485,3.277,486,3.277,487,3.277]],["title/classes/GetBeatmapsNftsResponseDto.html",[0,0.281,83,0.442]],["body/classes/GetBeatmapsNftsResponseDto.html",[0,0.584,1,0.388,2,0.302,3,0.134,4,0.134,5,0.117,6,0.434,7,0.101,8,0.265,9,0.66,10,0.606,11,0.615,12,0.516,13,0.232,14,0.018,15,0.323,16,0.724,17,0.724,18,0.741,19,0.561,20,0.986,21,0.345,23,0.598,24,0.618,26,0.428,27,0.344,29,0.459,30,0.652,31,0.459,33,0.262,34,1.11,35,0.434,36,0.902,37,0.781,38,0.52,39,0.615,40,0.908,41,0.652,42,0.441,43,0.388,44,0.401,45,0.86,46,0.86,47,0.759,48,0.652,49,0.652,50,0.759,51,0.618,52,0.459,53,0.388,54,0.759,55,0.459,56,0.652,57,0.827,58,0.759,59,0.388,60,0.652,61,0.388,62,0.618,63,0.585,64,0.388,65,0.388,66,0.388,67,0.894,68,0.859,69,0.908,70,0.411,71,0.652,72,0.411,73,0.388,74,0.388,75,0.652,76,0.585,77,0.68,78,0.388,79,0.871,80,0.434,81,0.885,82,0.68,83,0.552,84,0.618,85,0.388,86,0.908,87,0.459,88,0.459,89,0.615,90,0.388,91,0.719,92,0.86,93,0.472,94,0.652,95,0.652,96,0.827,97,0.66,98,0.618,99,0.366,100,0.388,101,0.585,102,0.489,103,0.434,104,0.459,105,0.459,106,0.437,107,0.672,108,0.786,109,0.585,110,0.68,111,0.459,112,0.388,113,0.434,114,0.323,115,0.388,116,0.388,117,0.205,118,0.388,119,0.302,120,0.388,121,0.52,122,0.366,123,0.489,124,0.366,125,0.366,126,0.366,127,0.388,128,0.366,129,0.388,130,0.534,131,0.323,132,0.434,133,0.388,134,0.775,135,0.701,136,0.552,137,0.52,138,0.68,139,0.652,140,0.7,141,0.459,142,0.652,143,0.618,144,0.388,145,0.366,146,0.388,147,0.459,148,0.52,149,0.52,150,0.652,151,0.411,152,0.388,153,0.652,154,0.411,155,0.388,156,0.434,157,0.618,158,0.459,159,0.52,160,0.459,161,0.459,162,0.388,163,0.411,164,0.411,165,0.388,166,0.459,167,0.459,168,0.652,169,0.652,170,0.459,171,0.459,172,0.411,173,0.411,174,0.411,175,0.01,176,0.01,178,1.49,179,1.661,488,3.309]],["title/classes/GetBeatsNftsDto.html",[0,0.281,65,0.442]],["body/classes/GetBeatsNftsDto.html",[0,0.585,1,0.392,2,0.305,3,0.135,4,0.135,5,0.118,6,0.439,7,0.102,8,0.267,9,0.662,10,0.609,11,0.617,12,0.516,13,0.224,14,0.018,15,0.323,16,0.514,17,0.514,18,0.744,19,0.566,20,0.988,21,0.245,23,0.6,24,0.622,26,0.429,27,0.347,29,0.463,30,0.657,31,0.463,33,0.264,34,1.111,35,0.439,36,0.885,37,0.781,38,0.369,39,0.462,40,0.877,41,0.463,42,0.441,43,0.392,44,0.403,45,0.863,46,0.863,47,0.763,48,0.657,49,0.657,50,0.763,51,0.622,52,0.462,53,0.392,54,0.763,55,0.463,56,0.657,57,0.831,58,0.763,59,0.392,60,0.657,61,0.392,62,0.622,63,0.589,64,0.392,65,0.556,66,0.392,67,0.885,68,0.861,69,0.911,70,0.415,71,0.657,72,0.415,73,0.392,74,0.392,75,0.657,76,0.589,77,0.589,78,0.392,79,0.873,80,0.439,81,0.787,82,0.589,83,0.392,84,0.439,85,0.392,86,0.911,87,0.463,88,0.463,89,0.617,90,0.392,91,0.723,92,0.863,93,0.474,94,0.657,95,0.657,96,0.831,97,0.662,98,0.622,99,0.369,100,0.392,101,0.589,102,0.493,103,0.439,104,0.463,105,0.462,106,0.439,107,0.674,108,0.788,109,0.589,110,0.684,111,0.463,112,0.392,113,0.439,114,0.326,115,0.392,116,0.392,117,0.207,118,0.392,119,0.305,120,0.392,121,0.524,122,0.369,123,0.493,124,0.369,125,0.369,126,0.369,127,0.392,128,0.369,129,0.392,130,0.537,131,0.326,132,0.439,133,0.392,134,0.777,135,0.703,136,0.556,137,0.524,138,0.684,139,0.657,140,0.703,141,0.462,142,0.657,143,0.622,144,0.392,145,0.369,146,0.392,147,0.463,148,0.524,149,0.524,150,0.657,151,0.415,152,0.392,153,0.657,154,0.415,155,0.392,156,0.439,157,0.622,158,0.463,159,0.524,160,0.463,161,0.463,162,0.392,163,0.415,164,0.415,165,0.392,166,0.463,167,0.463,168,0.657,169,0.657,170,0.463,171,0.463,172,0.415,173,0.415,174,0.415,175,0.011,176,0.011,489,3.34]],["title/classes/GetBeatsNftsResponseDto.html",[0,0.281,78,0.442]],["body/classes/GetBeatsNftsResponseDto.html",[0,0.584,1,0.388,2,0.302,3,0.134,4,0.134,5,0.117,6,0.434,7,0.101,8,0.265,9,0.66,10,0.605,11,0.615,12,0.516,13,0.232,14,0.018,15,0.323,16,0.724,17,0.724,18,0.741,19,0.561,20,0.985,21,0.345,23,0.598,24,0.618,26,0.428,27,0.344,29,0.458,30,0.652,31,0.458,33,0.262,34,1.11,35,0.434,36,0.902,37,0.781,38,0.52,39,0.615,40,0.908,41,0.652,42,0.441,43,0.388,44,0.401,45,0.86,46,0.86,47,0.759,48,0.652,49,0.652,50,0.759,51,0.618,52,0.459,53,0.388,54,0.759,55,0.458,56,0.652,57,0.827,58,0.759,59,0.388,60,0.652,61,0.388,62,0.618,63,0.584,64,0.388,65,0.388,66,0.388,67,0.893,68,0.859,69,0.908,70,0.411,71,0.652,72,0.411,73,0.388,74,0.388,75,0.652,76,0.68,77,0.584,78,0.552,79,0.883,80,0.618,81,0.885,82,0.68,83,0.388,84,0.434,85,0.388,86,0.908,87,0.458,88,0.458,89,0.615,90,0.388,91,0.719,92,0.86,93,0.472,94,0.652,95,0.652,96,0.827,97,0.66,98,0.618,99,0.366,100,0.388,101,0.584,102,0.489,103,0.434,104,0.458,105,0.459,106,0.437,107,0.672,108,0.786,109,0.584,110,0.68,111,0.458,112,0.388,113,0.434,114,0.323,115,0.388,116,0.388,117,0.205,118,0.388,119,0.302,120,0.388,121,0.52,122,0.366,123,0.489,124,0.366,125,0.366,126,0.366,127,0.388,128,0.366,129,0.388,130,0.534,131,0.323,132,0.434,133,0.388,134,0.775,135,0.701,136,0.552,137,0.52,138,0.68,139,0.652,140,0.7,141,0.459,142,0.652,143,0.618,144,0.388,145,0.366,146,0.388,147,0.458,148,0.52,149,0.52,150,0.652,151,0.411,152,0.388,153,0.652,154,0.411,155,0.388,156,0.434,157,0.618,158,0.458,159,0.52,160,0.458,161,0.458,162,0.388,163,0.411,164,0.411,165,0.388,166,0.458,167,0.458,168,0.652,169,0.652,170,0.458,171,0.458,172,0.411,173,0.411,174,0.411,175,0.01,176,0.01,178,1.489,179,1.66,490,3.307]],["title/classes/GetLeaderboardDto.html",[0,0.281,100,0.442]],["body/classes/GetLeaderboardDto.html",[0,0.584,1,0.386,2,0.3,3,0.133,4,0.133,5,0.117,6,0.432,7,0.1,8,0.264,9,0.658,10,0.604,11,0.614,12,0.516,13,0.238,14,0.018,15,0.323,16,0.84,17,0.84,18,0.743,19,0.565,20,0.996,21,0.4,23,0.597,24,0.616,26,0.431,27,0.342,29,0.456,30,0.65,31,0.456,33,0.26,34,1.11,35,0.432,36,0.882,37,0.781,38,0.364,39,0.457,40,0.872,41,0.456,42,0.441,43,0.386,44,0.4,45,0.859,46,0.859,47,0.757,48,0.65,49,0.65,50,0.757,51,0.616,52,0.457,53,0.386,54,0.757,55,0.456,56,0.65,57,0.825,58,0.757,59,0.386,60,0.65,61,0.386,62,0.616,63,0.582,64,0.386,65,0.386,66,0.386,67,0.882,68,0.859,69,0.907,70,0.409,71,0.65,72,0.409,73,0.386,74,0.386,75,0.65,76,0.582,77,0.582,78,0.386,79,0.882,80,0.432,81,0.782,82,0.582,83,0.386,84,0.432,85,0.386,86,0.907,87,0.456,88,0.456,89,0.614,90,0.386,91,0.717,92,0.859,93,0.471,94,0.65,95,0.65,96,0.825,97,0.658,98,0.616,99,0.364,100,0.55,101,0.678,102,0.568,103,0.616,104,0.65,105,0.581,106,0.461,107,0.683,108,0.809,109,0.582,110,0.678,111,0.456,112,0.386,113,0.432,114,0.321,115,0.386,116,0.386,117,0.204,118,0.386,119,0.3,120,0.386,121,0.518,122,0.364,123,0.487,124,0.364,125,0.364,126,0.364,127,0.386,128,0.364,129,0.386,130,0.533,131,0.321,132,0.432,133,0.386,134,0.774,135,0.7,136,0.55,137,0.518,138,0.678,139,0.65,140,0.698,141,0.457,142,0.65,143,0.616,144,0.386,145,0.364,146,0.386,147,0.456,148,0.518,149,0.518,150,0.65,151,0.409,152,0.386,153,0.65,154,0.409,155,0.386,156,0.432,157,0.616,158,0.456,159,0.518,160,0.456,161,0.456,162,0.386,163,0.409,164,0.409,165,0.386,166,0.456,167,0.456,168,0.65,169,0.65,170,0.456,171,0.456,172,0.409,173,0.409,174,0.409,175,0.01,176,0.01,491,3.291,492,3.291,493,3.291]],["title/classes/GetLeaderboardResponseDto.html",[0,0.281,112,0.442]],["body/classes/GetLeaderboardResponseDto.html",[0,0.584,1,0.388,2,0.302,3,0.134,4,0.134,5,0.117,6,0.434,7,0.101,8,0.265,9,0.66,10,0.605,11,0.629,12,0.516,13,0.232,14,0.018,15,0.323,16,0.724,17,0.724,18,0.741,19,0.561,20,0.997,21,0.345,23,0.598,24,0.618,26,0.428,27,0.344,29,0.458,30,0.652,31,0.458,33,0.262,34,1.11,35,0.434,36,0.902,37,0.781,38,0.52,39,0.615,40,0.908,41,0.652,42,0.441,43,0.388,44,0.401,45,0.86,46,0.86,47,0.759,48,0.652,49,0.652,50,0.759,51,0.618,52,0.459,53,0.388,54,0.759,55,0.458,56,0.652,57,0.827,58,0.759,59,0.388,60,0.652,61,0.388,62,0.618,63,0.584,64,0.388,65,0.388,66,0.388,67,0.893,68,0.859,69,0.908,70,0.411,71,0.652,72,0.411,73,0.388,74,0.388,75,0.652,76,0.584,77,0.584,78,0.388,79,0.871,80,0.434,81,0.783,82,0.584,83,0.388,84,0.434,85,0.388,86,0.908,87,0.458,88,0.458,89,0.615,90,0.388,91,0.719,92,0.86,93,0.472,94,0.652,95,0.652,96,0.827,97,0.66,98,0.618,99,0.366,100,0.388,101,0.584,102,0.489,103,0.434,104,0.458,105,0.459,106,0.437,107,0.672,108,0.786,109,0.68,110,0.741,111,0.458,112,0.552,113,0.618,114,0.534,115,0.388,116,0.388,117,0.205,118,0.388,119,0.302,120,0.388,121,0.52,122,0.366,123,0.489,124,0.366,125,0.366,126,0.366,127,0.388,128,0.366,129,0.388,130,0.534,131,0.323,132,0.434,133,0.388,134,0.775,135,0.701,136,0.552,137,0.52,138,0.68,139,0.652,140,0.7,141,0.459,142,0.652,143,0.618,144,0.388,145,0.366,146,0.388,147,0.458,148,0.52,149,0.52,150,0.652,151,0.411,152,0.388,153,0.652,154,0.411,155,0.388,156,0.434,157,0.618,158,0.458,159,0.52,160,0.458,161,0.458,162,0.388,163,0.411,164,0.411,165,0.388,166,0.458,167,0.458,168,0.652,169,0.652,170,0.458,171,0.458,172,0.411,173,0.411,174,0.411,175,0.01,176,0.01,178,1.489,179,1.66,494,3.307]],["title/classes/GetLeaderboardSprintDto.html",[0,0.281,116,0.442]],["body/classes/GetLeaderboardSprintDto.html",[0,0.584,1,0.388,2,0.302,3,0.134,4,0.134,5,0.117,6,0.435,7,0.101,8,0.266,9,0.66,10,0.606,11,0.615,12,0.516,13,0.232,14,0.018,15,0.323,16,0.724,17,0.724,18,0.741,19,0.561,20,0.986,21,0.345,23,0.598,24,0.618,26,0.431,27,0.344,29,0.459,30,0.653,31,0.459,33,0.262,34,1.111,35,0.435,36,0.883,37,0.781,38,0.366,39,0.459,40,0.874,41,0.459,42,0.441,43,0.388,44,0.402,45,0.861,46,0.861,47,0.76,48,0.653,49,0.653,50,0.76,51,0.618,52,0.459,53,0.388,54,0.76,55,0.459,56,0.653,57,0.828,58,0.76,59,0.388,60,0.653,61,0.388,62,0.618,63,0.585,64,0.388,65,0.388,66,0.388,67,0.883,68,0.859,69,0.909,70,0.411,71,0.653,72,0.411,73,0.388,74,0.388,75,0.653,76,0.585,77,0.585,78,0.388,79,0.883,80,0.435,81,0.784,82,0.585,83,0.388,84,0.435,85,0.388,86,0.909,87,0.459,88,0.459,89,0.615,90,0.388,91,0.72,92,0.861,93,0.472,94,0.653,95,0.653,96,0.828,97,0.66,98,0.618,99,0.366,100,0.388,101,0.681,102,0.57,103,0.435,104,0.459,105,0.582,106,0.48,107,0.684,108,0.81,109,0.585,110,0.681,111,0.459,112,0.388,113,0.435,114,0.323,115,0.388,116,0.552,117,0.292,118,0.388,119,0.302,120,0.388,121,0.521,122,0.366,123,0.49,124,0.366,125,0.366,126,0.366,127,0.388,128,0.366,129,0.388,130,0.535,131,0.323,132,0.435,133,0.388,134,0.775,135,0.701,136,0.552,137,0.521,138,0.681,139,0.653,140,0.7,141,0.459,142,0.653,143,0.618,144,0.388,145,0.366,146,0.388,147,0.459,148,0.521,149,0.521,150,0.653,151,0.411,152,0.388,153,0.653,154,0.411,155,0.388,156,0.435,157,0.618,158,0.459,159,0.521,160,0.459,161,0.459,162,0.388,163,0.411,164,0.411,165,0.388,166,0.459,167,0.459,168,0.653,169,0.653,170,0.459,171,0.459,172,0.411,173,0.411,174,0.411,175,0.01,176,0.01,495,3.312,496,3.312]],["title/classes/GetLeaderboardSprintResponseDto.html",[0,0.281,118,0.442]],["body/classes/GetLeaderboardSprintResponseDto.html",[0,0.584,1,0.384,2,0.299,3,0.133,4,0.133,5,0.116,6,0.43,7,0.1,8,0.263,9,0.656,10,0.602,11,0.613,12,0.515,13,0.243,14,0.018,15,0.323,16,0.913,17,0.913,18,0.74,19,0.561,20,0.983,21,0.435,23,0.596,24,0.613,26,0.43,27,0.34,29,0.454,30,0.647,31,0.454,33,0.259,34,1.11,35,0.43,36,0.881,37,0.781,38,0.362,39,0.456,40,0.87,41,0.454,42,0.441,43,0.384,44,0.399,45,0.857,46,0.857,47,0.755,48,0.647,49,0.647,50,0.755,51,0.613,52,0.456,53,0.384,54,0.755,55,0.454,56,0.647,57,0.823,58,0.755,59,0.384,60,0.647,61,0.384,62,0.613,63,0.58,64,0.384,65,0.384,66,0.384,67,0.881,68,0.858,69,0.905,70,0.407,71,0.647,72,0.407,73,0.384,74,0.384,75,0.647,76,0.58,77,0.58,78,0.384,79,0.881,80,0.43,81,0.78,82,0.58,83,0.384,84,0.43,85,0.384,86,0.905,87,0.454,88,0.454,89,0.612,90,0.384,91,0.78,92,0.857,93,0.497,94,0.647,95,0.647,96,0.823,97,0.656,98,0.613,99,0.362,100,0.384,101,0.58,102,0.486,103,0.43,104,0.454,105,0.456,106,0.435,107,0.682,108,0.814,109,0.58,110,0.676,111,0.454,112,0.384,113,0.43,114,0.319,115,0.384,116,0.384,117,0.203,118,0.548,119,0.497,120,0.548,121,0.694,122,0.516,123,0.617,124,0.602,125,0.516,126,0.602,127,0.384,128,0.362,129,0.384,130,0.531,131,0.319,132,0.43,133,0.384,134,0.773,135,0.699,136,0.548,137,0.516,138,0.676,139,0.647,140,0.697,141,0.456,142,0.647,143,0.613,144,0.384,145,0.362,146,0.384,147,0.454,148,0.516,149,0.516,150,0.647,151,0.407,152,0.384,153,0.647,154,0.407,155,0.384,156,0.43,157,0.613,158,0.454,159,0.516,160,0.454,161,0.454,162,0.384,163,0.407,164,0.407,165,0.384,166,0.454,167,0.454,168,0.647,169,0.647,170,0.454,171,0.454,172,0.407,173,0.407,174,0.407,175,0.01,176,0.01,497,3.273,498,3.273,499,3.273,500,3.273]],["title/classes/GetTokenBalanceDto.html",[0,0.281,64,0.442]],["body/classes/GetTokenBalanceDto.html",[0,0.585,1,0.392,2,0.305,3,0.135,4,0.135,5,0.118,6,0.439,7,0.102,8,0.267,9,0.662,10,0.609,11,0.617,12,0.516,13,0.224,14,0.018,15,0.323,16,0.514,17,0.514,18,0.744,19,0.566,20,0.988,21,0.245,23,0.6,24,0.622,26,0.429,27,0.347,29,0.463,30,0.657,31,0.463,33,0.264,34,1.111,35,0.439,36,0.885,37,0.781,38,0.369,39,0.462,40,0.877,41,0.463,42,0.441,43,0.392,44,0.403,45,0.863,46,0.863,47,0.763,48,0.657,49,0.657,50,0.763,51,0.622,52,0.462,53,0.392,54,0.763,55,0.463,56,0.657,57,0.831,58,0.763,59,0.392,60,0.657,61,0.392,62,0.622,63,0.589,64,0.556,65,0.392,66,0.392,67,0.885,68,0.861,69,0.911,70,0.415,71,0.657,72,0.415,73,0.392,74,0.392,75,0.657,76,0.589,77,0.589,78,0.392,79,0.873,80,0.439,81,0.787,82,0.589,83,0.392,84,0.439,85,0.392,86,0.911,87,0.463,88,0.463,89,0.617,90,0.392,91,0.723,92,0.863,93,0.474,94,0.657,95,0.657,96,0.831,97,0.662,98,0.622,99,0.369,100,0.392,101,0.589,102,0.493,103,0.439,104,0.463,105,0.462,106,0.439,107,0.674,108,0.788,109,0.589,110,0.684,111,0.463,112,0.392,113,0.439,114,0.326,115,0.392,116,0.392,117,0.207,118,0.392,119,0.305,120,0.392,121,0.524,122,0.369,123,0.493,124,0.369,125,0.369,126,0.369,127,0.392,128,0.369,129,0.392,130,0.537,131,0.326,132,0.439,133,0.392,134,0.777,135,0.703,136,0.556,137,0.524,138,0.684,139,0.657,140,0.703,141,0.462,142,0.657,143,0.622,144,0.392,145,0.369,146,0.392,147,0.463,148,0.524,149,0.524,150,0.657,151,0.415,152,0.392,153,0.657,154,0.415,155,0.392,156,0.439,157,0.622,158,0.463,159,0.524,160,0.463,161,0.463,162,0.392,163,0.415,164,0.415,165,0.392,166,0.463,167,0.463,168,0.657,169,0.657,170,0.463,171,0.463,172,0.415,173,0.415,174,0.415,175,0.011,176,0.011,501,3.34]],["title/classes/GetTokenBalanceResponseDto.html",[0,0.281,74,0.442]],["body/classes/GetTokenBalanceResponseDto.html",[0,0.584,1,0.388,2,0.302,3,0.134,4,0.134,5,0.117,6,0.435,7,0.101,8,0.265,9,0.66,10,0.606,11,0.615,12,0.516,13,0.232,14,0.018,15,0.323,16,0.724,17,0.724,18,0.741,19,0.563,20,0.986,21,0.345,23,0.598,24,0.618,26,0.43,27,0.344,29,0.459,30,0.653,31,0.459,33,0.262,34,1.111,35,0.435,36,0.902,37,0.781,38,0.52,39,0.615,40,0.908,41,0.653,42,0.441,43,0.388,44,0.401,45,0.861,46,0.861,47,0.76,48,0.653,49,0.653,50,0.76,51,0.618,52,0.459,53,0.388,54,0.76,55,0.459,56,0.653,57,0.827,58,0.76,59,0.388,60,0.653,61,0.388,62,0.618,63,0.585,64,0.388,65,0.388,66,0.388,67,0.894,68,0.859,69,0.908,70,0.411,71,0.653,72,0.411,73,0.388,74,0.552,75,0.874,76,0.585,77,0.585,78,0.388,79,0.871,80,0.435,81,0.784,82,0.585,83,0.388,84,0.435,85,0.388,86,0.908,87,0.459,88,0.459,89,0.615,90,0.388,91,0.72,92,0.861,93,0.472,94,0.653,95,0.653,96,0.827,97,0.66,98,0.618,99,0.366,100,0.388,101,0.585,102,0.489,103,0.435,104,0.459,105,0.459,106,0.437,107,0.672,108,0.786,109,0.585,110,0.681,111,0.459,112,0.388,113,0.435,114,0.323,115,0.388,116,0.388,117,0.205,118,0.388,119,0.302,120,0.388,121,0.52,122,0.366,123,0.489,124,0.366,125,0.366,126,0.366,127,0.388,128,0.366,129,0.388,130,0.534,131,0.323,132,0.435,133,0.388,134,0.775,135,0.701,136,0.552,137,0.52,138,0.681,139,0.653,140,0.7,141,0.459,142,0.653,143,0.618,144,0.388,145,0.366,146,0.388,147,0.459,148,0.52,149,0.52,150,0.653,151,0.411,152,0.388,153,0.653,154,0.411,155,0.388,156,0.435,157,0.618,158,0.459,159,0.52,160,0.459,161,0.459,162,0.388,163,0.411,164,0.411,165,0.388,166,0.459,167,0.459,168,0.653,169,0.653,170,0.459,171,0.459,172,0.411,173,0.411,174,0.411,175,0.01,176,0.01,178,1.491,179,1.661,502,3.31]],["title/classes/GetUserOAuthDto.html",[0,0.281,173,0.468]],["body/classes/GetUserOAuthDto.html",[0,0.585,1,0.392,2,0.305,3,0.135,4,0.135,5,0.118,6,0.439,7,0.102,8,0.267,9,0.662,10,0.609,11,0.617,12,0.516,13,0.224,14,0.018,15,0.323,16,0.514,17,0.514,18,0.742,19,0.562,20,0.988,21,0.245,23,0.6,24,0.622,26,0.43,27,0.347,29,0.463,30,0.657,31,0.463,33,0.264,34,1.111,35,0.439,36,0.885,37,0.781,38,0.369,39,0.462,40,0.877,41,0.463,42,0.441,43,0.392,44,0.403,45,0.863,46,0.863,47,0.763,48,0.657,49,0.657,50,0.763,51,0.622,52,0.462,53,0.392,54,0.763,55,0.463,56,0.657,57,0.831,58,0.763,59,0.392,60,0.657,61,0.392,62,0.622,63,0.589,64,0.392,65,0.392,66,0.392,67,0.885,68,0.861,69,0.911,70,0.415,71,0.657,72,0.415,73,0.392,74,0.392,75,0.657,76,0.589,77,0.589,78,0.392,79,0.873,80,0.439,81,0.787,82,0.589,83,0.392,84,0.439,85,0.392,86,0.911,87,0.463,88,0.463,89,0.617,90,0.392,91,0.723,92,0.863,93,0.474,94,0.657,95,0.657,96,0.831,97,0.662,98,0.622,99,0.369,100,0.392,101,0.589,102,0.493,103,0.439,104,0.463,105,0.462,106,0.439,107,0.674,108,0.788,109,0.589,110,0.684,111,0.463,112,0.392,113,0.439,114,0.326,115,0.392,116,0.392,117,0.207,118,0.392,119,0.305,120,0.392,121,0.524,122,0.369,123,0.493,124,0.369,125,0.369,126,0.369,127,0.392,128,0.369,129,0.392,130,0.537,131,0.326,132,0.439,133,0.392,134,0.777,135,0.703,136,0.556,137,0.524,138,0.684,139,0.657,140,0.703,141,0.462,142,0.657,143,0.622,144,0.392,145,0.369,146,0.392,147,0.463,148,0.524,149,0.524,150,0.657,151,0.415,152,0.392,153,0.657,154,0.415,155,0.392,156,0.439,157,0.622,158,0.463,159,0.524,160,0.463,161,0.463,162,0.392,163,0.415,164,0.415,165,0.392,166,0.463,167,0.463,168,0.763,169,0.831,170,0.463,171,0.463,172,0.415,173,0.589,174,0.415,175,0.011,176,0.011,503,3.34]],["title/classes/GetUserOAuthResponseDto.html",[0,0.281,174,0.468]],["body/classes/GetUserOAuthResponseDto.html",[0,0.584,1,0.382,2,0.298,3,0.132,4,0.132,5,0.115,6,0.428,7,0.099,8,0.263,9,0.655,10,0.601,11,0.613,12,0.519,13,0.243,14,0.018,15,0.323,16,0.912,17,0.912,18,0.742,19,0.562,20,0.982,21,0.434,23,0.595,24,0.612,26,0.429,27,0.339,29,0.452,30,0.646,31,0.452,33,0.258,34,1.11,35,0.428,36,0.88,37,0.781,38,0.36,39,0.454,40,0.869,41,0.452,42,0.441,43,0.382,44,0.398,45,0.856,46,0.856,47,0.753,48,0.646,49,0.646,50,0.753,51,0.612,52,0.454,53,0.382,54,0.753,55,0.452,56,0.646,57,0.822,58,0.753,59,0.382,60,0.646,61,0.382,62,0.612,63,0.579,64,0.382,65,0.382,66,0.382,67,0.891,68,0.857,69,0.904,70,0.405,71,0.646,72,0.405,73,0.382,74,0.382,75,0.646,76,0.579,77,0.579,78,0.382,79,0.88,80,0.428,81,0.778,82,0.579,83,0.382,84,0.428,85,0.382,86,0.904,87,0.452,88,0.452,89,0.612,90,0.382,91,0.714,92,0.856,93,0.469,94,0.646,95,0.646,96,0.869,97,0.655,98,0.612,99,0.36,100,0.382,101,0.579,102,0.484,103,0.428,104,0.452,105,0.454,106,0.434,107,0.669,108,0.784,109,0.579,110,0.675,111,0.452,112,0.382,113,0.428,114,0.318,115,0.382,116,0.382,117,0.202,118,0.382,119,0.298,120,0.382,121,0.515,122,0.36,123,0.484,124,0.36,125,0.36,126,0.36,127,0.382,128,0.36,129,0.382,130,0.53,131,0.318,132,0.428,133,0.382,134,0.772,135,0.714,136,0.787,137,0.655,138,0.736,139,0.753,140,0.787,141,0.53,142,0.753,143,0.778,144,0.382,145,0.36,146,0.382,147,0.452,148,0.515,149,0.515,150,0.646,151,0.405,152,0.382,153,0.646,154,0.405,155,0.382,156,0.428,157,0.612,158,0.452,159,0.515,160,0.452,161,0.452,162,0.382,163,0.405,164,0.405,165,0.382,166,0.452,167,0.452,168,0.646,169,0.646,170,0.452,171,0.452,172,0.405,173,0.405,174,0.579,175,0.01,176,0.01,178,2.67,504,3.261,505,3.261,506,3.261,507,3.261]],["title/interfaces/IAuthManager.html",[508,1.329,509,2.131]],["body/interfaces/IAuthManager.html",[3,0.169,4,0.169,5,0.147,7,0.127,9,0.822,10,0.86,12,0.497,13,0.271,14,0.018,15,0.324,18,0.537,19,0.404,21,0.545,23,0.706,26,0.396,42,0.348,44,0.54,89,0.406,93,0.52,102,0.573,106,0.54,107,0.685,130,0.641,131,0.602,134,0.85,135,0.805,137,0.834,140,0.771,141,0.641,145,0.777,149,0.683,152,0.771,165,0.771,175,0.012,176,0.012,193,2.357,204,3.498,207,2.971,258,2.136,413,3.497,435,3.328,468,2.481,508,2.18,509,3.117,510,2.213,511,2.928,512,5.51,513,5.072,514,5.51,515,4.75,516,5.51,517,5.51,518,5.51,519,5.51,520,5.51,521,4.25,522,4.161,523,4.561,524,3.973,525,4.727,526,4.25,527,4.161,528,3.973,529,5.421,530,4.161,531,4.25,532,4.161,533,4.25,534,4.812,535,4.161,536,3.876,537,3.578,538,3.33,539,3.117,540,4.25,541,4.161,542,3.578,543,3.876,544,4.25,545,4.161,546,4.25,547,3.876,548,3.876,549,4.25,550,4.25,551,4.25,552,4.161,553,4.25,554,4.161,555,4.25,556,4.161,557,2.515,558,2.515,559,3.21,560,3.21,561,4.954,562,4.765]],["title/interfaces/IAuthRecord.html",[508,1.329,557,2.276]],["body/interfaces/IAuthRecord.html",[3,0.198,4,0.198,5,0.173,7,0.149,8,0.344,9,0.832,10,0.857,12,0.508,13,0.269,14,0.018,15,0.322,18,0.476,19,0.358,23,0.692,26,0.413,42,0.376,89,0.476,93,0.483,102,0.508,107,0.65,130,0.476,131,0.65,134,0.832,135,0.789,137,0.839,140,0.843,141,0.596,145,0.737,149,0.54,152,0.716,165,0.716,175,0.014,176,0.014,207,2.585,258,1.894,413,3.249,435,3.269,468,2.2,508,2.352,509,2.763,510,2.598,511,3.436,513,3.768,521,3.768,523,4.432,524,3.691,525,4.535,526,3.768,528,3.691,529,5.141,531,3.768,533,3.768,534,5.16,536,3.436,537,3.172,538,2.952,539,2.763,540,3.768,542,3.172,543,3.436,544,3.768,546,3.768,547,3.436,548,3.436,549,3.768,550,3.768,551,3.768,553,3.768,555,3.768,557,3.691,558,2.952,559,3.768,560,3.768,561,5.052,562,5.141]],["title/interfaces/IAuthSession.html",[508,1.329,558,2.276]],["body/interfaces/IAuthSession.html",[3,0.197,4,0.197,5,0.172,7,0.148,8,0.344,9,0.794,10,0.844,12,0.485,13,0.27,14,0.018,15,0.323,18,0.475,19,0.357,23,0.692,26,0.424,42,0.375,89,0.68,93,0.552,102,0.506,107,0.649,130,0.475,131,0.649,134,0.81,135,0.773,137,0.838,140,0.715,141,0.7,145,0.81,149,0.771,152,0.715,165,0.715,175,0.014,176,0.014,207,2.58,258,1.887,413,3.242,435,3.267,468,2.192,508,2.348,509,2.753,510,2.589,511,3.424,513,3.754,521,3.754,523,4.428,524,3.683,525,4.529,526,3.754,528,3.683,529,5.133,531,3.754,533,3.754,534,4.682,536,3.424,537,3.16,538,2.941,539,2.753,540,3.754,542,3.16,543,3.424,544,3.754,546,3.754,547,3.424,548,3.424,549,3.754,550,3.754,551,3.754,553,3.754,555,3.754,557,2.941,558,3.683,559,5.38,560,5.38,561,5.05,562,5.133]],["title/interfaces/IDynamoResult.html",[445,2.276,508,1.329]],["body/interfaces/IDynamoResult.html",[3,0.245,4,0.245,5,0.214,7,0.184,8,0.391,13,0.258,14,0.017,42,0.34,93,0.578,141,0.731,175,0.015,176,0.015,198,4.53,445,4.193,468,3.376,508,2.131,510,3.212,563,5.207]],["title/interfaces/ILeaderboard.html",[508,1.329,564,1.891]],["body/interfaces/ILeaderboard.html",[3,0.177,4,0.177,5,0.155,7,0.133,11,0.701,12,0.427,13,0.257,14,0.018,15,0.32,19,0.557,21,0.531,26,0.437,27,0.697,37,0.695,38,0.629,42,0.321,44,0.531,70,0.707,79,0.932,93,0.346,99,0.787,101,0.832,102,0.697,105,0.654,106,0.531,107,0.732,108,0.872,110,0.707,114,0.555,117,0.415,119,0.711,120,0.667,121,0.802,122,0.629,123,0.591,124,0.802,125,0.629,126,0.699,154,0.885,175,0.013,176,0.013,193,2.707,204,3.445,207,2.813,223,3.789,224,3.018,258,2.599,416,3.026,435,3.27,508,2.008,510,2.324,524,4.595,528,4.595,539,3.218,542,4.352,561,4.937,564,2.855,565,3.371,566,4.389,567,4.389,568,4.389,569,4.389,570,4.389,571,4.389,572,4.389,573,3.438,574,4.37,575,4.905,576,4.905,577,4.003,578,4.37,579,4.905,580,4.715,581,4.905,582,3.438,583,3.695,584,4.389,585,4.905,586,4.37,587,4.905,588,4.905,589,4.003,590,4.37,591,3.438,592,4.37,593,3.438,594,4.37,595,2.838,596,4.37,597,3.695,598,2.472,599,2.838]],["title/interfaces/IScore.html",[508,1.329,600,2.65]],["body/interfaces/IScore.html",[0,0.229,3,0.124,4,0.124,5,0.108,7,0.093,8,0.251,11,0.687,12,0.508,13,0.186,14,0.018,15,0.314,19,0.53,26,0.423,27,0.463,33,0.484,38,0.728,39,0.512,52,0.299,93,0.352,105,0.623,108,0.783,114,0.562,117,0.48,119,0.717,121,0.728,123,0.546,124,0.761,125,0.492,126,0.773,128,0.637,130,0.299,131,0.643,159,0.339,175,0.01,176,0.01,191,2.156,193,2.245,198,1.852,199,4.048,223,2.369,224,3.04,247,4.108,253,4.492,258,1.188,314,2.52,413,3.064,416,3.718,422,1.99,425,4.53,434,3.692,435,3.193,444,4.279,445,1.852,446,1.733,462,4.925,463,5.047,468,2.594,475,2.364,476,2.892,480,3.436,481,2.364,508,1.081,510,1.63,523,1.852,538,1.852,564,2.235,573,1.852,577,2.156,580,2.156,582,1.852,583,2.892,591,1.852,593,1.852,595,1.99,597,2.892,598,2.52,599,1.99,600,4.305,601,1.99,602,2.642,603,2.642,604,2.642,605,4.749,606,3.134,607,2.364,608,3.134,609,2.364,610,2.156,611,2.364,612,2.364,613,2.642,614,2.642,615,2.642,616,4.524,617,3.84,618,2.642,619,2.642,620,1.99,621,4.146,622,3.84,623,3.692,624,3.84,625,2.642,626,2.642,627,2.642,628,2.642,629,3.84,630,2.642,631,4.732,632,4.524,633,2.642,634,2.642,635,3.692,636,4.599,637,2.642,638,2.642,639,3.692,640,2.364,641,2.364,642,2.642,643,2.642,644,2.642,645,2.642,646,3.84,647,2.642,648,2.642,649,2.642,650,2.642,651,2.642,652,4.524,653,4.967,654,4.048,655,3.84,656,5.505,657,5.276,658,4.444,659,3.84,660,3.84,661,2.642,662,2.692,663,4.524,664,2.364,665,6.027,666,2.642,667,4.048,668,3.84,669,4.524,670,3.84,671,4.524,672,2.642,673,3.84,674,2.364,675,3.84,676,2.642,677,2.364,678,2.364,679,2.642,680,3.436,681,2.642,682,2.642,683,2.642,684,2.642,685,2.642,686,2.642,687,2.642,688,3.84,689,2.156,690,2.642,691,2.364,692,4.524,693,3.84,694,2.642,695,2.642,696,2.642,697,2.642,698,4.524,699,2.642,700,2.642,701,4.967,702,3.84,703,3.84,704,3.84,705,2.642,706,2.642,707,2.642,708,2.642,709,2.642,710,2.642,711,2.642,712,2.642,713,2.642,714,2.642,715,2.642,716,2.642,717,4.524,718,3.84,719,2.642,720,2.642,721,2.642,722,2.642,723,2.642,724,2.642,725,2.642,726,2.642,727,2.642,728,2.642,729,2.642,730,2.642,731,2.364,732,2.642,733,2.642,734,3.84,735,2.642,736,2.642,737,2.642,738,2.642,739,3.84,740,2.642,741,2.642,742,2.642,743,2.642,744,2.642,745,2.642,746,2.642,747,2.156,748,2.156,749,2.642,750,2.642,751,4.524,752,3.436,753,3.84,754,3.84,755,3.84,756,5.309,757,2.642,758,2.642,759,2.642,760,2.642,761,2.642,762,2.642,763,2.642,764,1.852,765,2.642,766,2.642,767,2.642,768,3.84,769,3.692,770,2.642,771,3.84,772,3.84,773,2.642,774,2.642,775,4.967,776,2.642,777,3.84,778,2.642,779,2.642,780,2.642,781,2.642,782,2.642,783,2.642,784,2.642,785,2.642]],["title/interfaces/ISprint.html",[508,1.329,598,2.131]],["body/interfaces/ISprint.html",[3,0.205,4,0.205,5,0.179,7,0.154,8,0.352,11,0.684,12,0.342,13,0.25,14,0.018,15,0.314,19,0.542,26,0.435,27,0.649,38,0.559,42,0.352,70,0.629,79,0.902,93,0.536,99,0.749,101,0.776,102,0.649,105,0.609,107,0.708,108,0.861,110,0.629,114,0.494,117,0.386,119,0.71,120,0.594,121,0.829,122,0.559,123,0.526,124,0.829,125,0.559,126,0.803,154,0.841,175,0.014,176,0.014,193,2.165,223,3.603,224,2.812,258,2.421,416,2.692,435,3.165,508,2.204,510,2.692,524,4.471,528,4.471,539,2.863,542,4.055,561,5.037,564,2.54,565,3.904,573,3.058,575,4.364,576,4.364,577,3.561,579,4.364,580,4.394,581,4.364,582,3.058,583,3.287,584,3.904,585,4.364,587,4.364,588,4.364,589,3.561,591,3.058,593,3.058,597,3.287,598,3.533,599,3.287]],["title/classes/LeaderboardDto.html",[0,0.281,109,0.468]],["body/classes/LeaderboardDto.html",[0,0.584,1,0.384,2,0.299,3,0.133,4,0.133,5,0.116,6,0.43,7,0.1,8,0.263,9,0.657,10,0.602,11,0.647,12,0.519,13,0.243,14,0.018,15,0.323,16,0.914,17,0.914,18,0.742,19,0.565,20,1.005,21,0.435,23,0.596,24,0.614,26,0.43,27,0.34,29,0.454,30,0.648,31,0.454,33,0.259,34,1.11,35,0.43,36,0.881,37,0.781,38,0.362,39,0.456,40,0.871,41,0.454,42,0.441,43,0.384,44,0.399,45,0.858,46,0.858,47,0.755,48,0.648,49,0.648,50,0.755,51,0.614,52,0.456,53,0.384,54,0.755,55,0.454,56,0.648,57,0.823,58,0.755,59,0.384,60,0.648,61,0.384,62,0.614,63,0.58,64,0.384,65,0.384,66,0.384,67,0.881,68,0.858,69,0.905,70,0.407,71,0.648,72,0.407,73,0.384,74,0.384,75,0.648,76,0.58,77,0.58,78,0.384,79,0.881,80,0.43,81,0.78,82,0.58,83,0.384,84,0.43,85,0.384,86,0.905,87,0.454,88,0.454,89,0.613,90,0.384,91,0.715,92,0.858,93,0.47,94,0.648,95,0.648,96,0.823,97,0.657,98,0.614,99,0.362,100,0.384,101,0.58,102,0.486,103,0.43,104,0.454,105,0.456,106,0.46,107,0.682,108,0.808,109,0.677,110,0.738,111,0.648,112,0.384,113,0.43,114,0.319,115,0.384,116,0.384,117,0.203,118,0.384,119,0.299,120,0.384,121,0.516,122,0.362,123,0.486,124,0.362,125,0.362,126,0.362,127,0.384,128,0.362,129,0.384,130,0.531,131,0.319,132,0.43,133,0.384,134,0.773,135,0.699,136,0.548,137,0.516,138,0.677,139,0.648,140,0.697,141,0.456,142,0.648,143,0.614,144,0.384,145,0.362,146,0.384,147,0.454,148,0.516,149,0.516,150,0.648,151,0.407,152,0.384,153,0.648,154,0.407,155,0.384,156,0.43,157,0.614,158,0.454,159,0.516,160,0.454,161,0.454,162,0.384,163,0.407,164,0.407,165,0.384,166,0.454,167,0.454,168,0.648,169,0.648,170,0.454,171,0.454,172,0.407,173,0.407,174,0.407,175,0.01,176,0.01,786,3.275,787,3.275,788,3.275,789,3.275]],["title/classes/LeaderboardJsonFile.html",[0,0.281,790,2.906]],["body/classes/LeaderboardJsonFile.html",[0,0.345,2,0.422,3,0.187,4,0.187,5,0.164,7,0.141,8,0.333,11,0.625,12,0.462,13,0.27,14,0.018,15,0.321,19,0.502,21,0.562,26,0.415,33,0.514,37,0.451,39,0.634,42,0.261,44,0.551,59,0.693,67,0.733,105,0.576,106,0.551,117,0.286,119,0.679,175,0.013,176,0.013,178,3.385,193,2.526,201,2.797,204,3.569,207,2.914,208,4.555,224,2.928,225,3.263,227,4.154,247,3.763,425,4.688,435,3.184,463,3.006,467,3.991,468,3.258,564,3.437,566,4.555,567,4.555,568,4.555,569,4.555,570,4.555,571,4.555,572,4.555,573,3.568,589,3.256,591,2.797,593,2.797,595,3.006,636,3.834,662,2.797,664,4.555,731,4.555,764,3.568,790,4.555,791,3.991,792,5.091,793,5.091,794,5.606,795,5.905,796,5.091,797,5.905,798,5.905,799,5.458,800,5.905,801,5.091,802,6.849,803,5.905,804,5.091,805,4.629,806,3.991,807,4.629,808,4.629,809,4.629,810,5.905,811,4.629,812,5.905,813,3.991,814,4.629,815,5.091,816,3.991,817,4.629,818,4.629,819,4.629,820,4.629,821,4.629,822,4.629,823,4.629,824,4.629,825,3.991,826,5.905,827,4.629,828,4.629,829,4.629,830,4.629,831,4.629,832,4.629,833,4.629,834,4.629,835,3.991,836,4.629,837,4.629,838,3.991,839,4.629]],["title/classes/LeaderboardMemory.html",[0,0.281,799,2.65]],["body/classes/LeaderboardMemory.html",[0,0.335,2,0.41,3,0.182,4,0.182,5,0.159,7,0.137,8,0.327,11,0.655,12,0.473,13,0.267,14,0.018,15,0.322,19,0.496,21,0.552,26,0.425,33,0.459,37,0.438,39,0.722,42,0.253,44,0.542,105,0.684,106,0.542,114,0.438,117,0.458,119,0.688,175,0.013,176,0.013,193,2.744,201,2.717,204,3.514,207,2.832,223,2.391,224,2.888,225,3.4,227,4.077,247,3.082,258,1.743,278,4.47,416,3.082,425,4.742,435,3.296,468,2.61,564,3.603,566,4.47,567,4.47,568,4.47,569,4.47,570,4.47,571,4.47,572,4.47,573,3.502,589,4.077,591,3.502,593,3.502,595,3.763,598,2.543,599,2.919,631,4.165,635,3.163,636,4.662,639,3.163,640,3.468,641,3.468,654,5.225,658,5.225,662,3.502,667,3.468,674,3.468,677,3.468,689,4.077,764,3.502,769,4.077,792,4.996,793,4.996,796,4.996,799,4.077,801,5.529,804,4.996,806,5.529,813,4.996,815,4.996,816,4.996,825,4.996,835,3.876,840,3.876,841,5.795,842,5.795,843,5.795,844,5.795,845,5.795,846,5.795,847,5.795,848,4.496,849,4.496,850,4.496,851,4.496,852,4.496,853,4.496,854,4.496,855,4.496,856,4.496,857,5.795,858,4.496,859,4.496,860,4.496,861,4.496,862,4.496,863,5.795]],["title/classes/LocalScoreCache.html",[0,0.281,623,2.65]],["body/classes/LocalScoreCache.html",[0,0.218,2,0.266,3,0.118,4,0.118,5,0.103,7,0.089,8,0.242,11,0.68,12,0.503,13,0.241,14,0.018,15,0.313,19,0.513,21,0.513,26,0.431,27,0.447,33,0.475,38,0.717,39,0.498,44,0.412,52,0.285,93,0.475,105,0.633,106,0.412,108,0.775,114,0.585,117,0.478,119,0.715,121,0.717,123,0.53,124,0.751,125,0.475,126,0.764,128,0.622,130,0.285,131,0.633,159,0.564,175,0.01,176,0.01,191,2.053,193,2.567,198,1.763,199,3.935,201,1.763,204,2.672,207,2.433,208,3.935,223,2.286,224,3.061,225,1.464,247,4.091,253,4.415,258,1.131,314,2.431,413,2.993,416,3.728,422,1.895,425,4.501,434,3.589,435,3.171,444,4.214,445,1.763,446,1.651,462,4.841,463,5.028,468,2.826,475,2.251,476,2.791,480,3.315,481,2.251,508,1.03,523,1.763,538,1.763,564,2.157,573,1.763,577,2.053,580,2.053,582,1.763,583,2.791,591,1.763,593,1.763,595,1.895,597,2.791,598,2.431,599,1.895,600,4.565,601,1.895,602,2.516,603,2.516,604,2.516,605,4.685,606,3.023,607,2.251,608,3.023,609,2.251,610,2.053,611,2.251,612,2.251,613,2.516,614,2.516,615,2.516,616,4.398,617,3.705,618,2.516,619,2.516,620,1.895,621,4.075,622,3.705,623,3.959,624,5.172,625,4.398,626,4.398,627,3.705,628,2.516,629,3.705,630,2.516,631,4.728,632,4.398,633,2.516,634,3.705,635,4.221,636,4.551,637,2.516,638,2.516,639,3.589,640,2.251,641,2.251,642,4.852,643,4.852,644,2.516,645,3.705,646,3.705,647,2.516,648,2.516,649,3.705,650,2.516,651,2.516,652,4.398,653,4.852,654,3.935,655,3.705,656,5.411,657,5.172,658,4.341,659,3.705,660,3.705,661,2.516,662,2.597,663,4.398,664,2.251,665,5.959,666,2.516,667,3.935,668,3.705,669,4.398,670,3.705,671,4.398,672,2.516,673,3.705,674,2.251,675,3.705,676,2.516,677,2.251,678,2.251,679,2.516,680,3.315,681,2.516,682,2.516,683,2.516,684,2.516,685,2.516,686,2.516,687,2.516,688,3.705,689,2.053,690,2.516,691,2.251,692,4.398,693,3.705,694,2.516,695,2.516,696,2.516,697,2.516,698,4.398,699,2.516,700,2.516,701,4.852,702,3.705,703,3.705,704,3.705,705,2.516,706,2.516,707,2.516,708,2.516,709,2.516,710,2.516,711,2.516,712,2.516,713,2.516,714,2.516,715,2.516,716,2.516,717,4.398,718,3.705,719,2.516,720,2.516,721,2.516,722,2.516,723,2.516,724,2.516,725,2.516,726,2.516,727,2.516,728,2.516,729,2.516,730,2.516,731,2.251,732,2.516,733,2.516,734,3.705,735,2.516,736,2.516,737,2.516,738,2.516,739,3.705,740,2.516,741,2.516,742,2.516,743,2.516,744,2.516,745,2.516,746,2.516,747,2.053,748,2.053,749,2.516,750,2.516,751,4.398,752,3.315,753,3.705,754,3.705,755,3.705,756,5.243,757,2.516,758,2.516,759,2.516,760,2.516,761,2.516,762,2.516,763,2.516,764,1.763,765,2.516,766,2.516,767,2.516,768,3.705,769,3.589,770,2.516,771,3.705,772,3.705,773,2.516,774,2.516,775,4.852,776,2.516,777,3.705,778,2.516,779,2.516,780,2.516,781,2.516,782,2.516,783,2.516,784,2.516,785,2.516,864,5.102,865,4.298,866,4.298,867,4.298,868,2.918,869,2.516,870,2.918,871,2.918,872,2.918,873,2.918,874,2.918,875,2.918,876,2.918,877,2.918]],["title/classes/MintBeatmapsNftDto.html",[0,0.281,53,0.442]],["body/classes/MintBeatmapsNftDto.html",[0,0.583,1,0.376,2,0.293,3,0.13,4,0.13,5,0.114,6,0.421,7,0.098,8,0.26,9,0.65,10,0.595,11,0.61,12,0.518,13,0.253,14,0.018,15,0.323,16,1.028,17,1.028,18,0.741,19,0.56,20,0.979,21,0.489,23,0.592,24,0.605,26,0.429,27,0.333,29,0.445,30,0.638,31,0.445,33,0.254,34,1.109,35,0.421,36,0.877,37,0.781,38,0.355,39,0.449,40,0.864,41,0.445,42,0.44,43,0.376,44,0.394,45,0.897,46,0.914,47,0.816,48,0.746,49,0.816,50,0.816,51,0.773,52,0.525,53,0.54,54,0.899,55,0.638,56,0.816,57,0.947,58,0.899,59,0.54,60,0.816,61,0.376,62,0.605,63,0.572,64,0.376,65,0.376,66,0.376,67,0.877,68,0.855,69,0.899,70,0.398,71,0.638,72,0.398,73,0.376,74,0.376,75,0.638,76,0.572,77,0.572,78,0.376,79,0.864,80,0.421,81,0.773,82,0.572,83,0.376,84,0.421,85,0.376,86,0.899,87,0.445,88,0.445,89,0.608,90,0.376,91,0.707,92,0.852,93,0.466,94,0.638,95,0.638,96,0.816,97,0.65,98,0.605,99,0.355,100,0.376,101,0.572,102,0.479,103,0.421,104,0.445,105,0.449,106,0.475,107,0.667,108,0.781,109,0.572,110,0.669,111,0.445,112,0.376,113,0.421,114,0.313,115,0.376,116,0.376,117,0.199,118,0.376,119,0.293,120,0.376,121,0.509,122,0.355,123,0.479,124,0.355,125,0.355,126,0.355,127,0.376,128,0.355,129,0.376,130,0.525,131,0.313,132,0.421,133,0.376,134,0.769,135,0.694,136,0.54,137,0.509,138,0.669,139,0.638,140,0.69,141,0.449,142,0.638,143,0.605,144,0.376,145,0.355,146,0.376,147,0.445,148,0.509,149,0.509,150,0.638,151,0.398,152,0.376,153,0.638,154,0.398,155,0.376,156,0.421,157,0.605,158,0.445,159,0.509,160,0.445,161,0.445,162,0.376,163,0.398,164,0.398,165,0.376,166,0.445,167,0.445,168,0.638,169,0.638,170,0.445,171,0.445,172,0.398,173,0.398,174,0.398,175,0.01,176,0.01,224,1.444,225,1.61,878,3.208,879,3.208,880,3.208,881,3.208,882,3.208,883,3.208,884,3.208]],["title/classes/MintBeatsNftDto.html",[0,0.281,43,0.442]],["body/classes/MintBeatsNftDto.html",[0,0.584,1,0.383,2,0.298,3,0.132,4,0.132,5,0.116,6,0.429,7,0.099,8,0.263,9,0.656,10,0.602,11,0.613,12,0.515,13,0.243,14,0.018,15,0.323,16,0.913,17,0.913,18,0.742,19,0.561,20,0.983,21,0.435,23,0.596,24,0.613,26,0.43,27,0.34,29,0.453,30,0.647,31,0.453,33,0.259,34,1.11,35,0.429,36,0.881,37,0.781,38,0.361,39,0.455,40,0.87,41,0.453,42,0.441,43,0.547,44,0.478,45,0.918,46,0.918,47,0.823,48,0.754,49,0.823,50,0.823,51,0.779,52,0.531,53,0.383,54,0.754,55,0.453,56,0.647,57,0.823,58,0.754,59,0.383,60,0.647,61,0.383,62,0.613,63,0.58,64,0.383,65,0.383,66,0.383,67,0.881,68,0.858,69,0.905,70,0.406,71,0.647,72,0.406,73,0.383,74,0.383,75,0.647,76,0.58,77,0.58,78,0.383,79,0.868,80,0.429,81,0.779,82,0.58,83,0.383,84,0.429,85,0.383,86,0.905,87,0.453,88,0.453,89,0.612,90,0.383,91,0.715,92,0.857,93,0.47,94,0.647,95,0.647,96,0.823,97,0.656,98,0.613,99,0.361,100,0.383,101,0.58,102,0.485,103,0.429,104,0.453,105,0.455,106,0.478,107,0.67,108,0.784,109,0.58,110,0.676,111,0.453,112,0.383,113,0.429,114,0.319,115,0.383,116,0.383,117,0.202,118,0.383,119,0.298,120,0.383,121,0.516,122,0.361,123,0.485,124,0.361,125,0.361,126,0.361,127,0.383,128,0.361,129,0.383,130,0.531,131,0.319,132,0.429,133,0.383,134,0.773,135,0.698,136,0.547,137,0.516,138,0.676,139,0.647,140,0.696,141,0.455,142,0.647,143,0.613,144,0.383,145,0.361,146,0.383,147,0.453,148,0.516,149,0.516,150,0.647,151,0.406,152,0.383,153,0.647,154,0.406,155,0.383,156,0.429,157,0.613,158,0.453,159,0.516,160,0.453,161,0.453,162,0.383,163,0.406,164,0.406,165,0.383,166,0.453,167,0.453,168,0.647,169,0.647,170,0.453,171,0.453,172,0.406,173,0.406,174,0.406,175,0.01,176,0.01,224,1.472,225,1.64,885,3.269,886,3.269,887,3.269,888,3.269]],["title/classes/MintNftResponseDto.html",[0,0.281,66,0.442]],["body/classes/MintNftResponseDto.html",[0,0.584,1,0.386,2,0.3,3,0.133,4,0.133,5,0.116,6,0.432,7,0.1,8,0.264,9,0.658,10,0.603,11,0.614,12,0.516,13,0.238,14,0.018,15,0.323,16,0.84,17,0.84,18,0.74,19,0.561,20,0.984,21,0.4,23,0.597,24,0.615,26,0.428,27,0.342,29,0.456,30,0.649,31,0.456,33,0.26,34,1.11,35,0.432,36,0.901,37,0.781,38,0.518,39,0.613,40,0.906,41,0.649,42,0.441,43,0.386,44,0.4,45,0.884,46,0.859,47,0.757,48,0.649,49,0.649,50,0.825,51,0.615,52,0.457,53,0.386,54,0.757,55,0.456,56,0.649,57,0.825,58,0.757,59,0.386,60,0.649,61,0.386,62,0.615,63,0.582,64,0.386,65,0.386,66,0.55,67,0.892,68,0.875,69,0.933,70,0.582,71,0.872,72,0.408,73,0.386,74,0.386,75,0.649,76,0.582,77,0.582,78,0.386,79,0.87,80,0.432,81,0.781,82,0.582,83,0.386,84,0.432,85,0.386,86,0.906,87,0.456,88,0.456,89,0.613,90,0.386,91,0.717,92,0.859,93,0.471,94,0.649,95,0.649,96,0.825,97,0.658,98,0.615,99,0.363,100,0.386,101,0.582,102,0.487,103,0.432,104,0.456,105,0.457,106,0.436,107,0.671,108,0.785,109,0.582,110,0.678,111,0.456,112,0.386,113,0.432,114,0.321,115,0.386,116,0.386,117,0.203,118,0.386,119,0.3,120,0.386,121,0.518,122,0.363,123,0.487,124,0.363,125,0.363,126,0.363,127,0.386,128,0.363,129,0.386,130,0.532,131,0.321,132,0.432,133,0.386,134,0.774,135,0.7,136,0.55,137,0.518,138,0.678,139,0.649,140,0.698,141,0.457,142,0.649,143,0.615,144,0.386,145,0.363,146,0.386,147,0.456,148,0.518,149,0.518,150,0.649,151,0.408,152,0.386,153,0.649,154,0.408,155,0.386,156,0.432,157,0.615,158,0.456,159,0.518,160,0.456,161,0.456,162,0.386,163,0.408,164,0.408,165,0.386,166,0.456,167,0.456,168,0.649,169,0.649,170,0.456,171,0.456,172,0.408,173,0.408,174,0.408,175,0.01,176,0.01,178,1.48,179,1.65,889,3.288,890,3.288]],["title/classes/MintTokenDto.html",[0,0.281,61,0.442]],["body/classes/MintTokenDto.html",[0,0.585,1,0.389,2,0.303,3,0.134,4,0.134,5,0.118,6,0.436,7,0.101,8,0.266,9,0.661,10,0.607,11,0.616,12,0.516,13,0.232,14,0.018,15,0.323,16,0.726,17,0.726,18,0.743,19,0.562,20,0.986,21,0.346,23,0.599,24,0.62,26,0.43,27,0.345,29,0.46,30,0.654,31,0.46,33,0.263,34,1.111,35,0.436,36,0.884,37,0.781,38,0.367,39,0.46,40,0.875,41,0.46,42,0.441,43,0.389,44,0.402,45,0.861,46,0.921,47,0.761,48,0.654,49,0.654,50,0.761,51,0.62,52,0.46,53,0.389,54,0.761,55,0.46,56,0.654,57,0.828,58,0.761,59,0.389,60,0.654,61,0.553,62,0.829,63,0.682,64,0.389,65,0.389,66,0.389,67,0.884,68,0.86,69,0.909,70,0.412,71,0.654,72,0.412,73,0.389,74,0.389,75,0.654,76,0.586,77,0.586,78,0.389,79,0.872,80,0.436,81,0.785,82,0.586,83,0.389,84,0.436,85,0.389,86,0.909,87,0.46,88,0.46,89,0.616,90,0.389,91,0.721,92,0.861,93,0.473,94,0.654,95,0.654,96,0.828,97,0.661,98,0.62,99,0.367,100,0.389,101,0.586,102,0.491,103,0.436,104,0.46,105,0.46,106,0.438,107,0.673,108,0.787,109,0.586,110,0.682,111,0.46,112,0.389,113,0.436,114,0.324,115,0.389,116,0.389,117,0.205,118,0.389,119,0.303,120,0.389,121,0.522,122,0.367,123,0.491,124,0.367,125,0.367,126,0.367,127,0.389,128,0.367,129,0.389,130,0.535,131,0.324,132,0.436,133,0.389,134,0.776,135,0.702,136,0.553,137,0.522,138,0.682,139,0.654,140,0.701,141,0.46,142,0.654,143,0.62,144,0.389,145,0.367,146,0.389,147,0.46,148,0.522,149,0.522,150,0.654,151,0.412,152,0.389,153,0.654,154,0.412,155,0.389,156,0.436,157,0.62,158,0.46,159,0.522,160,0.46,161,0.46,162,0.389,163,0.412,164,0.412,165,0.389,166,0.46,167,0.46,168,0.654,169,0.654,170,0.46,171,0.46,172,0.412,173,0.412,174,0.412,175,0.01,176,0.01,891,3.32,892,3.32]],["title/classes/MintTokenResponseDto.html",[0,0.281,73,0.442]],["body/classes/MintTokenResponseDto.html",[0,0.584,1,0.388,2,0.302,3,0.134,4,0.134,5,0.117,6,0.435,7,0.101,8,0.265,9,0.66,10,0.606,11,0.615,12,0.516,13,0.232,14,0.018,15,0.323,16,0.724,17,0.724,18,0.741,19,0.561,20,0.986,21,0.345,23,0.598,24,0.618,26,0.428,27,0.344,29,0.459,30,0.653,31,0.459,33,0.262,34,1.111,35,0.435,36,0.902,37,0.781,38,0.52,39,0.615,40,0.908,41,0.653,42,0.441,43,0.388,44,0.401,45,0.861,46,0.861,47,0.76,48,0.653,49,0.653,50,0.76,51,0.618,52,0.459,53,0.388,54,0.76,55,0.459,56,0.653,57,0.827,58,0.76,59,0.388,60,0.653,61,0.388,62,0.618,63,0.585,64,0.388,65,0.388,66,0.388,67,0.894,68,0.876,69,0.935,70,0.411,71,0.653,72,0.411,73,0.552,74,0.388,75,0.653,76,0.585,77,0.585,78,0.388,79,0.871,80,0.435,81,0.784,82,0.585,83,0.388,84,0.435,85,0.388,86,0.908,87,0.459,88,0.459,89,0.615,90,0.388,91,0.72,92,0.861,93,0.472,94,0.653,95,0.653,96,0.827,97,0.66,98,0.618,99,0.366,100,0.388,101,0.585,102,0.489,103,0.435,104,0.459,105,0.459,106,0.437,107,0.672,108,0.786,109,0.585,110,0.681,111,0.459,112,0.388,113,0.435,114,0.323,115,0.388,116,0.388,117,0.205,118,0.388,119,0.302,120,0.388,121,0.52,122,0.366,123,0.489,124,0.366,125,0.366,126,0.366,127,0.388,128,0.366,129,0.388,130,0.534,131,0.323,132,0.435,133,0.388,134,0.775,135,0.701,136,0.552,137,0.52,138,0.681,139,0.653,140,0.7,141,0.459,142,0.653,143,0.618,144,0.388,145,0.366,146,0.388,147,0.459,148,0.52,149,0.52,150,0.653,151,0.411,152,0.388,153,0.653,154,0.411,155,0.388,156,0.435,157,0.618,158,0.459,159,0.52,160,0.459,161,0.459,162,0.388,163,0.411,164,0.411,165,0.388,166,0.459,167,0.459,168,0.653,169,0.653,170,0.459,171,0.459,172,0.411,173,0.411,174,0.411,175,0.01,176,0.01,178,1.491,179,1.661,893,3.31]],["title/classes/MockService.html",[0,0.281,894,2.906]],["body/classes/MockService.html",[0,0.182,2,0.222,3,0.152,4,0.152,5,0.086,7,0.114,8,0.212,9,0.568,10,0.675,12,0.375,13,0.223,14,0.018,15,0.313,18,0.631,19,0.516,21,0.474,23,0.603,24,0.729,26,0.258,27,0.253,33,0.464,37,0.501,39,0.238,44,0.429,45,0.601,52,0.501,59,0.739,63,0.303,68,0.774,82,0.303,89,0.615,92,0.867,97,0.697,98,0.32,103,0.493,106,0.429,107,0.366,113,0.32,114,0.238,117,0.427,122,0.269,128,0.415,131,0.366,132,0.32,134,0.836,135,0.745,137,0.786,138,0.638,141,0.644,143,0.493,145,0.786,148,0.763,149,0.648,156,0.828,157,0.729,159,0.792,175,0.008,176,0.008,193,1.605,198,4.121,201,2.765,204,2.783,207,2.368,223,3.782,227,2.64,247,4.189,253,3.219,258,2.734,314,2.123,405,3.235,406,3.235,407,3.235,413,2.734,416,1.996,424,3.219,425,4.488,434,3.616,435,2.825,444,3.604,446,1.379,448,1.715,450,2.101,451,3.235,452,2.101,453,3.235,454,2.101,455,2.101,463,5.02,464,4.431,465,4.431,468,2.639,474,3.945,476,4.428,477,4.431,478,5.576,509,2.588,515,4.785,523,3.106,525,2.437,534,1.715,537,2.437,538,1.473,539,2.123,543,2.64,548,1.715,557,3.353,558,2.765,582,1.473,583,1.583,584,4.521,620,4.288,621,1.583,631,4.094,635,2.64,636,4.094,639,2.64,678,3.529,680,1.88,689,2.64,752,1.88,756,5.094,764,1.473,769,4.124,794,2.101,838,3.235,869,2.101,894,3.529,895,4.646,896,1.715,897,4.576,898,3.753,899,3.753,900,3.753,901,3.753,902,5.139,903,3.753,904,4.576,905,3.753,906,3.753,907,4.576,908,2.437,909,3.753,910,2.437,911,3.945,912,3.753,913,2.437,914,3.753,915,6.107,916,2.437,917,2.437,918,3.753,919,2.437,920,2.437,921,4.576,922,2.437,923,3.235,924,2.437,925,2.437,926,4.576,927,2.437,928,2.437,929,3.529,930,3.235,931,2.895,932,2.895,933,2.101,934,3.753,935,3.753,936,2.437,937,2.437,938,3.753,939,3.753,940,2.437,941,3.753,942,1.88,943,2.437,944,2.101,945,3.753,946,2.437,947,4.576,948,2.437,949,3.753,950,3.753,951,2.437,952,2.437,953,2.437,954,2.437,955,2.437,956,2.437,957,3.753,958,2.437,959,2.101,960,2.437,961,2.437,962,4.576,963,2.437,964,2.437,965,4.576,966,2.437,967,5.861,968,3.753,969,2.437,970,2.437,971,3.753,972,2.437,973,2.437,974,2.437,975,2.437,976,2.437,977,2.437,978,3.753,979,5.139,980,2.437,981,2.437,982,2.437,983,2.437,984,5.55,985,2.437,986,2.437,987,2.437,988,3.753,989,2.437,990,3.753,991,2.437,992,2.437,993,2.437,994,2.437,995,2.437,996,2.437,997,2.437,998,5.139,999,2.437,1000,2.437,1001,2.437,1002,5.139,1003,2.437,1004,2.437,1005,2.437,1006,2.437,1007,2.437,1008,2.437,1009,2.437,1010,2.437,1011,2.437,1012,2.101,1013,2.437,1014,2.437,1015,2.437,1016,2.437,1017,2.437,1018,2.437,1019,2.101,1020,2.437,1021,2.437,1022,2.437,1023,2.437,1024,2.437,1025,2.437,1026,2.437,1027,2.437,1028,2.437,1029,3.753,1030,2.437,1031,2.437,1032,3.753,1033,2.437,1034,2.437,1035,2.437,1036,1.88,1037,4.576,1038,7.05,1039,5.139,1040,4.576,1041,5.139,1042,2.437,1043,4.576,1044,6.72,1045,2.437,1046,4.576,1047,4.576,1048,6.107,1049,4.576,1050,3.753,1051,4.576,1052,3.753,1053,5.139,1054,5.139,1055,1.88,1056,2.437,1057,2.437,1058,2.437,1059,2.437,1060,3.753,1061,3.753,1062,5.139,1063,2.437,1064,2.437,1065,2.437,1066,2.437,1067,2.437,1068,2.437,1069,2.437,1070,2.437,1071,2.437,1072,2.437,1073,2.437,1074,2.437,1075,1.88,1076,2.437,1077,2.101,1078,2.437,1079,2.437,1080,2.437,1081,2.437,1082,2.101,1083,2.101,1084,2.437,1085,2.101,1086,2.437,1087,2.437,1088,1.88,1089,2.437,1090,2.101,1091,3.753,1092,3.753,1093,3.753,1094,3.753,1095,3.753,1096,1.715,1097,2.437,1098,2.101,1099,1.88,1100,2.437,1101,2.437,1102,2.437,1103,2.437,1104,3.753,1105,4.576,1106,4.576,1107,4.576,1108,4.576,1109,4.576,1110,4.576,1111,1.88,1112,2.437,1113,2.437,1114,3.753,1115,3.529,1116,3.753,1117,4.576,1118,3.753,1119,5.139,1120,5.139,1121,2.437,1122,2.437,1123,2.437,1124,4.576,1125,5.55,1126,4.576,1127,2.437,1128,3.753,1129,3.753,1130,2.437,1131,2.437,1132,2.437,1133,2.437,1134,2.437,1135,2.437,1136,3.753,1137,2.437,1138,2.437,1139,2.437,1140,2.437,1141,2.437,1142,5.139,1143,2.437,1144,2.437,1145,4.576,1146,3.753,1147,4.576,1148,2.437,1149,2.437,1150,2.437,1151,2.437,1152,2.437,1153,2.437,1154,2.437,1155,3.753,1156,2.437,1157,4.576,1158,3.753,1159,2.437,1160,2.437,1161,2.437,1162,4.576,1163,2.437,1164,2.437,1165,2.437,1166,2.437,1167,2.437,1168,2.437,1169,1.88]],["title/classes/RequestNFTResponseDto.html",[0,0.281,72,0.468]],["body/classes/RequestNFTResponseDto.html",[0,0.584,1,0.388,2,0.302,3,0.134,4,0.134,5,0.117,6,0.435,7,0.101,8,0.265,9,0.66,10,0.606,11,0.615,12,0.516,13,0.232,14,0.018,15,0.323,16,0.724,17,0.724,18,0.741,19,0.561,20,0.986,21,0.345,23,0.598,24,0.618,26,0.428,27,0.344,29,0.459,30,0.653,31,0.459,33,0.262,34,1.111,35,0.435,36,0.902,37,0.781,38,0.52,39,0.615,40,0.908,41,0.653,42,0.441,43,0.388,44,0.401,45,0.861,46,0.861,47,0.76,48,0.653,49,0.653,50,0.76,51,0.618,52,0.459,53,0.388,54,0.76,55,0.459,56,0.653,57,0.827,58,0.76,59,0.388,60,0.653,61,0.388,62,0.618,63,0.585,64,0.388,65,0.388,66,0.388,67,0.894,68,0.876,69,0.935,70,0.411,71,0.653,72,0.585,73,0.388,74,0.388,75,0.653,76,0.585,77,0.585,78,0.388,79,0.871,80,0.435,81,0.784,82,0.585,83,0.388,84,0.435,85,0.388,86,0.908,87,0.459,88,0.459,89,0.615,90,0.388,91,0.72,92,0.861,93,0.472,94,0.653,95,0.653,96,0.827,97,0.66,98,0.618,99,0.366,100,0.388,101,0.585,102,0.489,103,0.435,104,0.459,105,0.459,106,0.437,107,0.672,108,0.786,109,0.585,110,0.681,111,0.459,112,0.388,113,0.435,114,0.323,115,0.388,116,0.388,117,0.205,118,0.388,119,0.302,120,0.388,121,0.52,122,0.366,123,0.489,124,0.366,125,0.366,126,0.366,127,0.388,128,0.366,129,0.388,130,0.534,131,0.323,132,0.435,133,0.388,134,0.775,135,0.701,136,0.552,137,0.52,138,0.681,139,0.653,140,0.7,141,0.459,142,0.653,143,0.618,144,0.388,145,0.366,146,0.388,147,0.459,148,0.52,149,0.52,150,0.653,151,0.411,152,0.388,153,0.653,154,0.411,155,0.388,156,0.435,157,0.618,158,0.459,159,0.52,160,0.459,161,0.459,162,0.388,163,0.411,164,0.411,165,0.388,166,0.459,167,0.459,168,0.653,169,0.653,170,0.459,171,0.459,172,0.411,173,0.411,174,0.411,175,0.01,176,0.01,178,1.491,179,1.661,1170,3.31]],["title/classes/ResponseDtoBase.html",[0,0.281,36,0.468]],["body/classes/ResponseDtoBase.html",[0,0.585,1,0.391,2,0.304,3,0.135,4,0.135,5,0.118,6,0.438,7,0.101,8,0.267,9,0.662,10,0.608,11,0.617,12,0.516,13,0.224,14,0.018,15,0.323,16,0.513,17,0.513,18,0.742,19,0.562,20,0.987,21,0.244,23,0.6,24,0.622,26,0.429,27,0.347,29,0.462,30,0.656,31,0.462,33,0.264,34,1.111,35,0.438,36,0.895,37,0.781,38,0.523,39,0.617,40,0.911,41,0.656,42,0.441,43,0.391,44,0.403,45,0.863,46,0.863,47,0.763,48,0.656,49,0.656,50,0.763,51,0.622,52,0.462,53,0.391,54,0.763,55,0.462,56,0.656,57,0.83,58,0.763,59,0.391,60,0.656,61,0.391,62,0.622,63,0.588,64,0.391,65,0.391,66,0.391,67,0.885,68,0.861,69,0.911,70,0.414,71,0.656,72,0.414,73,0.391,74,0.391,75,0.656,76,0.588,77,0.588,78,0.391,79,0.873,80,0.438,81,0.787,82,0.588,83,0.391,84,0.438,85,0.391,86,0.911,87,0.462,88,0.462,89,0.617,90,0.391,91,0.723,92,0.863,93,0.474,94,0.656,95,0.656,96,0.83,97,0.662,98,0.622,99,0.369,100,0.391,101,0.588,102,0.492,103,0.438,104,0.462,105,0.462,106,0.439,107,0.674,108,0.787,109,0.588,110,0.684,111,0.462,112,0.391,113,0.438,114,0.325,115,0.391,116,0.391,117,0.206,118,0.391,119,0.304,120,0.391,121,0.523,122,0.369,123,0.492,124,0.369,125,0.369,126,0.369,127,0.391,128,0.369,129,0.391,130,0.537,131,0.325,132,0.438,133,0.391,134,0.777,135,0.703,136,0.555,137,0.523,138,0.684,139,0.656,140,0.703,141,0.462,142,0.656,143,0.622,144,0.391,145,0.369,146,0.391,147,0.462,148,0.523,149,0.523,150,0.656,151,0.414,152,0.391,153,0.656,154,0.414,155,0.391,156,0.438,157,0.622,158,0.462,159,0.523,160,0.462,161,0.462,162,0.391,163,0.414,164,0.414,165,0.391,166,0.462,167,0.462,168,0.656,169,0.656,170,0.462,171,0.462,172,0.414,173,0.414,174,0.414,175,0.011,176,0.011,1171,3.337]],["title/classes/StartAuthSessionDto.html",[0,0.281,144,0.442]],["body/classes/StartAuthSessionDto.html",[0,0.585,1,0.392,2,0.305,3,0.135,4,0.135,5,0.118,6,0.438,7,0.102,8,0.267,9,0.662,10,0.609,11,0.617,12,0.516,13,0.224,14,0.018,15,0.323,16,0.513,17,0.513,18,0.744,19,0.563,20,0.987,21,0.245,23,0.6,24,0.622,26,0.429,27,0.347,29,0.463,30,0.657,31,0.463,33,0.264,34,1.111,35,0.438,36,0.885,37,0.781,38,0.369,39,0.462,40,0.877,41,0.463,42,0.441,43,0.392,44,0.403,45,0.863,46,0.863,47,0.763,48,0.657,49,0.657,50,0.763,51,0.622,52,0.462,53,0.392,54,0.763,55,0.463,56,0.657,57,0.83,58,0.763,59,0.392,60,0.657,61,0.392,62,0.622,63,0.588,64,0.392,65,0.392,66,0.392,67,0.885,68,0.861,69,0.911,70,0.415,71,0.657,72,0.415,73,0.392,74,0.392,75,0.657,76,0.588,77,0.588,78,0.392,79,0.873,80,0.438,81,0.787,82,0.588,83,0.392,84,0.438,85,0.392,86,0.911,87,0.463,88,0.463,89,0.617,90,0.392,91,0.723,92,0.863,93,0.474,94,0.657,95,0.657,96,0.83,97,0.662,98,0.622,99,0.369,100,0.392,101,0.588,102,0.492,103,0.438,104,0.463,105,0.462,106,0.439,107,0.674,108,0.788,109,0.588,110,0.684,111,0.463,112,0.392,113,0.438,114,0.326,115,0.392,116,0.392,117,0.207,118,0.392,119,0.305,120,0.392,121,0.524,122,0.369,123,0.492,124,0.369,125,0.369,126,0.369,127,0.392,128,0.369,129,0.392,130,0.537,131,0.326,132,0.438,133,0.392,134,0.788,135,0.703,136,0.556,137,0.524,138,0.684,139,0.657,140,0.703,141,0.462,142,0.657,143,0.622,144,0.556,145,0.609,146,0.392,147,0.463,148,0.524,149,0.524,150,0.657,151,0.415,152,0.392,153,0.657,154,0.415,155,0.392,156,0.438,157,0.622,158,0.463,159,0.524,160,0.463,161,0.463,162,0.392,163,0.415,164,0.415,165,0.392,166,0.463,167,0.463,168,0.657,169,0.657,170,0.463,171,0.463,172,0.415,173,0.415,174,0.415,175,0.011,176,0.011,1172,3.338]],["title/classes/StartAuthSessionResponseDto.html",[0,0.281,146,0.442]],["body/classes/StartAuthSessionResponseDto.html",[0,0.584,1,0.386,2,0.3,3,0.133,4,0.133,5,0.117,6,0.432,7,0.1,8,0.264,9,0.658,10,0.604,11,0.614,12,0.52,13,0.238,14,0.018,15,0.323,16,0.84,17,0.84,18,0.74,19,0.561,20,0.984,21,0.4,23,0.597,24,0.616,26,0.428,27,0.342,29,0.456,30,0.65,31,0.456,33,0.26,34,1.11,35,0.432,36,0.882,37,0.781,38,0.364,39,0.457,40,0.872,41,0.456,42,0.441,43,0.386,44,0.4,45,0.859,46,0.859,47,0.757,48,0.65,49,0.65,50,0.757,51,0.616,52,0.457,53,0.386,54,0.757,55,0.456,56,0.65,57,0.825,58,0.757,59,0.386,60,0.65,61,0.386,62,0.616,63,0.582,64,0.386,65,0.386,66,0.386,67,0.882,68,0.859,69,0.907,70,0.409,71,0.65,72,0.409,73,0.386,74,0.386,75,0.65,76,0.582,77,0.582,78,0.386,79,0.882,80,0.432,81,0.782,82,0.582,83,0.386,84,0.432,85,0.386,86,0.907,87,0.456,88,0.456,89,0.638,90,0.386,91,0.717,92,0.859,93,0.471,94,0.65,95,0.65,96,0.825,97,0.658,98,0.616,99,0.364,100,0.386,101,0.582,102,0.487,103,0.432,104,0.456,105,0.457,106,0.436,107,0.683,108,0.785,109,0.582,110,0.678,111,0.456,112,0.386,113,0.432,114,0.321,115,0.386,116,0.386,117,0.204,118,0.386,119,0.3,120,0.386,121,0.518,122,0.364,123,0.487,124,0.364,125,0.364,126,0.364,127,0.386,128,0.364,129,0.386,130,0.581,131,0.321,132,0.432,133,0.386,134,0.774,135,0.7,136,0.55,137,0.518,138,0.739,139,0.65,140,0.698,141,0.457,142,0.65,143,0.616,144,0.386,145,0.364,146,0.55,147,0.65,148,0.604,149,0.658,150,0.757,151,0.582,152,0.55,153,0.825,154,0.582,155,0.386,156,0.432,157,0.616,158,0.456,159,0.518,160,0.456,161,0.456,162,0.386,163,0.409,164,0.409,165,0.386,166,0.456,167,0.456,168,0.65,169,0.65,170,0.456,171,0.456,172,0.409,173,0.409,174,0.409,175,0.01,176,0.01,1173,3.291,1174,3.291,1175,3.291]],["title/classes/UpdateUserLevelDto.html",[0,0.281,163,0.468]],["body/classes/UpdateUserLevelDto.html",[0,0.584,1,0.385,2,0.3,3,0.133,4,0.133,5,0.116,6,0.431,7,0.1,8,0.264,9,0.723,10,0.695,11,0.614,12,0.517,13,0.244,14,0.018,15,0.323,16,0.839,17,0.839,18,0.743,19,0.562,20,0.984,21,0.4,23,0.628,24,0.615,26,0.429,27,0.342,29,0.455,30,0.649,31,0.455,33,0.26,34,1.11,35,0.431,36,0.882,37,0.781,38,0.363,39,0.457,40,0.933,41,0.455,42,0.441,43,0.385,44,0.4,45,0.859,46,0.859,47,0.756,48,0.649,49,0.649,50,0.756,51,0.615,52,0.457,53,0.385,54,0.756,55,0.455,56,0.649,57,0.825,58,0.756,59,0.385,60,0.649,61,0.385,62,0.615,63,0.582,64,0.385,65,0.385,66,0.385,67,0.882,68,0.858,69,0.906,70,0.408,71,0.649,72,0.408,73,0.385,74,0.385,75,0.649,76,0.582,77,0.582,78,0.385,79,0.869,80,0.431,81,0.781,82,0.582,83,0.385,84,0.431,85,0.385,86,0.906,87,0.455,88,0.455,89,0.613,90,0.385,91,0.717,92,0.859,93,0.471,94,0.649,95,0.649,96,0.825,97,0.658,98,0.615,99,0.363,100,0.385,101,0.582,102,0.487,103,0.431,104,0.455,105,0.457,106,0.436,107,0.683,108,0.785,109,0.582,110,0.678,111,0.455,112,0.385,113,0.431,114,0.32,115,0.385,116,0.385,117,0.203,118,0.385,119,0.3,120,0.385,121,0.518,122,0.363,123,0.487,124,0.363,125,0.363,126,0.363,127,0.385,128,0.363,129,0.385,130,0.532,131,0.32,132,0.431,133,0.385,134,0.802,135,0.715,136,0.549,137,0.518,138,0.678,139,0.756,140,0.789,141,0.457,142,0.649,143,0.615,144,0.385,145,0.363,146,0.385,147,0.455,148,0.518,149,0.518,150,0.649,151,0.408,152,0.385,153,0.649,154,0.408,155,0.385,156,0.431,157,0.615,158,0.455,159,0.518,160,0.455,161,0.455,162,0.385,163,0.582,164,0.408,165,0.385,166,0.455,167,0.455,168,0.649,169,0.649,170,0.455,171,0.455,172,0.408,173,0.408,174,0.408,175,0.01,176,0.01,1176,3.286,1177,3.286,1178,3.286]],["title/classes/UpdateUserOAuthDto.html",[0,0.281,164,0.468]],["body/classes/UpdateUserOAuthDto.html",[0,0.584,1,0.384,2,0.299,3,0.133,4,0.133,5,0.116,6,0.43,7,0.1,8,0.264,9,0.657,10,0.602,11,0.614,12,0.518,13,0.243,14,0.018,15,0.323,16,0.914,17,0.914,18,0.742,19,0.562,20,0.984,21,0.435,23,0.596,24,0.716,26,0.429,27,0.341,29,0.454,30,0.648,31,0.454,33,0.259,34,1.11,35,0.43,36,0.881,37,0.781,38,0.362,39,0.456,40,0.871,41,0.454,42,0.441,43,0.384,44,0.399,45,0.858,46,0.858,47,0.755,48,0.648,49,0.648,50,0.755,51,0.614,52,0.456,53,0.384,54,0.755,55,0.454,56,0.648,57,0.824,58,0.755,59,0.384,60,0.648,61,0.384,62,0.614,63,0.677,64,0.384,65,0.384,66,0.384,67,0.881,68,0.858,69,0.905,70,0.407,71,0.648,72,0.407,73,0.384,74,0.384,75,0.648,76,0.581,77,0.581,78,0.384,79,0.869,80,0.43,81,0.78,82,0.581,83,0.384,84,0.43,85,0.384,86,0.905,87,0.454,88,0.454,89,0.613,90,0.384,91,0.716,92,0.858,93,0.47,94,0.648,95,0.648,96,0.824,97,0.657,98,0.614,99,0.362,100,0.384,101,0.581,102,0.486,103,0.43,104,0.454,105,0.456,106,0.435,107,0.67,108,0.784,109,0.581,110,0.677,111,0.454,112,0.384,113,0.43,114,0.32,115,0.384,116,0.384,117,0.203,118,0.384,119,0.299,120,0.384,121,0.517,122,0.362,123,0.486,124,0.362,125,0.362,126,0.362,127,0.384,128,0.362,129,0.384,130,0.532,131,0.32,132,0.43,133,0.384,134,0.773,135,0.715,136,0.548,137,0.517,138,0.677,139,0.648,140,0.697,141,0.456,142,0.648,143,0.614,144,0.384,145,0.362,146,0.384,147,0.454,148,0.517,149,0.517,150,0.648,151,0.407,152,0.384,153,0.648,154,0.407,155,0.384,156,0.43,157,0.614,158,0.454,159,0.517,160,0.454,161,0.454,162,0.384,163,0.407,164,0.581,165,0.639,166,0.648,167,0.755,168,0.755,169,0.824,170,0.648,171,0.648,172,0.407,173,0.407,174,0.407,175,0.01,176,0.01,1179,3.278,1180,3.278,1181,3.278,1182,3.278]],["title/classes/UpdateUserOAuthResponseDto.html",[0,0.281,172,0.468]],["body/classes/UpdateUserOAuthResponseDto.html",[0,0.584,1,0.387,2,0.301,3,0.134,4,0.134,5,0.117,6,0.434,7,0.1,8,0.265,9,0.724,10,0.605,11,0.615,12,0.519,13,0.239,14,0.018,15,0.323,16,0.842,17,0.842,18,0.741,19,0.561,20,0.985,21,0.401,23,0.598,24,0.617,26,0.428,27,0.343,29,0.458,30,0.651,31,0.458,33,0.261,34,1.11,35,0.434,36,0.883,37,0.781,38,0.365,39,0.458,40,0.873,41,0.458,42,0.441,43,0.387,44,0.401,45,0.86,46,0.86,47,0.759,48,0.651,49,0.651,50,0.759,51,0.617,52,0.458,53,0.387,54,0.759,55,0.458,56,0.651,57,0.826,58,0.759,59,0.387,60,0.651,61,0.387,62,0.617,63,0.584,64,0.387,65,0.387,66,0.387,67,0.883,68,0.859,69,0.908,70,0.41,71,0.651,72,0.41,73,0.387,74,0.387,75,0.651,76,0.584,77,0.584,78,0.387,79,0.87,80,0.434,81,0.783,82,0.584,83,0.387,84,0.434,85,0.387,86,0.908,87,0.458,88,0.458,89,0.615,90,0.387,91,0.719,92,0.86,93,0.472,94,0.651,95,0.651,96,0.873,97,0.659,98,0.617,99,0.365,100,0.387,101,0.584,102,0.489,103,0.434,104,0.458,105,0.458,106,0.437,107,0.672,108,0.786,109,0.584,110,0.68,111,0.458,112,0.387,113,0.434,114,0.322,115,0.387,116,0.387,117,0.204,118,0.387,119,0.301,120,0.387,121,0.52,122,0.365,123,0.489,124,0.365,125,0.365,126,0.365,127,0.387,128,0.365,129,0.387,130,0.534,131,0.322,132,0.434,133,0.387,134,0.775,135,0.7,136,0.551,137,0.52,138,0.68,139,0.651,140,0.699,141,0.534,142,0.759,143,0.783,144,0.387,145,0.365,146,0.387,147,0.458,148,0.52,149,0.52,150,0.651,151,0.41,152,0.387,153,0.651,154,0.41,155,0.387,156,0.434,157,0.617,158,0.458,159,0.52,160,0.458,161,0.458,162,0.387,163,0.41,164,0.41,165,0.387,166,0.458,167,0.458,168,0.651,169,0.651,170,0.458,171,0.458,172,0.584,173,0.41,174,0.41,175,0.01,176,0.01,1183,3.302,1184,3.302,1185,3.302]],["title/classes/VerifySignatureDto.html",[0,0.281,85,0.442]],["body/classes/VerifySignatureDto.html",[0,0.584,1,0.387,2,0.301,3,0.133,4,0.133,5,0.117,6,0.433,7,0.1,8,0.265,9,0.659,10,0.604,11,0.615,12,0.516,13,0.238,14,0.018,15,0.323,16,0.841,17,0.841,18,0.747,19,0.563,20,0.985,21,0.4,23,0.597,24,0.616,26,0.428,27,0.343,29,0.457,30,0.651,31,0.457,33,0.261,34,1.11,35,0.433,36,0.882,37,0.781,38,0.364,39,0.458,40,0.873,41,0.457,42,0.441,43,0.387,44,0.4,45,0.859,46,0.859,47,0.758,48,0.651,49,0.651,50,0.758,51,0.616,52,0.458,53,0.387,54,0.758,55,0.457,56,0.651,57,0.826,58,0.758,59,0.387,60,0.651,61,0.387,62,0.616,63,0.583,64,0.387,65,0.387,66,0.387,67,0.882,68,0.875,69,0.933,70,0.409,71,0.651,72,0.409,73,0.387,74,0.387,75,0.651,76,0.583,77,0.583,78,0.387,79,0.87,80,0.433,81,0.782,82,0.583,83,0.387,84,0.433,85,0.551,86,0.954,87,0.651,88,0.651,89,0.671,90,0.387,91,0.718,92,0.859,93,0.471,94,0.651,95,0.651,96,0.826,97,0.659,98,0.616,99,0.364,100,0.387,101,0.583,102,0.488,103,0.433,104,0.457,105,0.458,106,0.436,107,0.671,108,0.785,109,0.583,110,0.679,111,0.457,112,0.387,113,0.433,114,0.321,115,0.387,116,0.387,117,0.204,118,0.387,119,0.301,120,0.387,121,0.519,122,0.364,123,0.488,124,0.364,125,0.364,126,0.364,127,0.387,128,0.364,129,0.387,130,0.533,131,0.321,132,0.433,133,0.387,134,0.774,135,0.7,136,0.551,137,0.519,138,0.679,139,0.651,140,0.699,141,0.458,142,0.651,143,0.616,144,0.387,145,0.364,146,0.387,147,0.457,148,0.519,149,0.519,150,0.651,151,0.409,152,0.387,153,0.651,154,0.409,155,0.387,156,0.433,157,0.616,158,0.457,159,0.519,160,0.457,161,0.457,162,0.387,163,0.409,164,0.409,165,0.387,166,0.457,167,0.457,168,0.651,169,0.651,170,0.457,171,0.457,172,0.409,173,0.409,174,0.409,175,0.01,176,0.01,1186,3.296,1187,3.296,1188,3.296]],["title/classes/VerifySignatureResponseDto.html",[0,0.281,90,0.442]],["body/classes/VerifySignatureResponseDto.html",[0,0.584,1,0.383,2,0.298,3,0.132,4,0.132,5,0.116,6,0.428,7,0.099,8,0.263,9,0.655,10,0.601,11,0.613,12,0.515,13,0.243,14,0.018,15,0.323,16,0.912,17,0.912,18,0.746,19,0.562,20,0.983,21,0.434,23,0.595,24,0.612,26,0.428,27,0.339,29,0.452,30,0.646,31,0.452,33,0.258,34,1.11,35,0.428,36,0.9,37,0.781,38,0.515,39,0.612,40,0.904,41,0.646,42,0.441,43,0.383,44,0.398,45,0.856,46,0.856,47,0.753,48,0.646,49,0.646,50,0.753,51,0.612,52,0.454,53,0.383,54,0.753,55,0.452,56,0.646,57,0.822,58,0.753,59,0.383,60,0.646,61,0.383,62,0.612,63,0.579,64,0.383,65,0.383,66,0.383,67,0.891,68,0.864,69,0.931,70,0.405,71,0.646,72,0.405,73,0.383,74,0.383,75,0.646,76,0.579,77,0.579,78,0.383,79,0.868,80,0.428,81,0.779,82,0.579,83,0.383,84,0.428,85,0.383,86,0.931,87,0.452,88,0.452,89,0.612,90,0.546,91,0.779,92,0.931,93,0.496,94,0.753,95,0.753,96,0.869,97,0.693,98,0.779,99,0.361,100,0.383,101,0.579,102,0.484,103,0.428,104,0.452,105,0.454,106,0.434,107,0.67,108,0.784,109,0.579,110,0.675,111,0.452,112,0.383,113,0.428,114,0.318,115,0.383,116,0.383,117,0.202,118,0.383,119,0.298,120,0.383,121,0.515,122,0.361,123,0.484,124,0.361,125,0.361,126,0.361,127,0.383,128,0.361,129,0.383,130,0.53,131,0.318,132,0.428,133,0.383,134,0.772,135,0.698,136,0.546,137,0.515,138,0.675,139,0.646,140,0.695,141,0.454,142,0.646,143,0.612,144,0.383,145,0.361,146,0.383,147,0.452,148,0.515,149,0.515,150,0.646,151,0.405,152,0.383,153,0.646,154,0.405,155,0.383,156,0.428,157,0.612,158,0.452,159,0.515,160,0.452,161,0.452,162,0.383,163,0.405,164,0.405,165,0.383,166,0.452,167,0.452,168,0.646,169,0.646,170,0.452,171,0.452,172,0.405,173,0.405,174,0.405,175,0.01,176,0.01,178,1.469,179,1.637,1189,3.262,1190,3.262,1191,3.262]],["title/coverage.html",[1192,4.443]],["body/coverage.html",[0,0.591,1,0.426,5,0.129,6,1.035,13,0.129,14,0.018,36,0.451,43,0.426,53,0.426,61,0.426,64,0.426,65,0.426,66,0.426,72,0.451,73,0.426,74,0.426,76,0.451,77,0.451,78,0.426,83,0.426,85,0.426,90,0.426,97,0.402,100,0.426,109,0.451,112,0.426,115,0.426,116,0.426,118,0.426,127,0.426,129,0.426,133,0.426,136,0.426,144,0.426,146,0.426,151,0.451,155,0.426,162,0.426,163,0.451,164,0.451,172,0.451,173,0.451,174,0.451,175,0.011,176,0.011,180,3.742,181,2.802,183,3.132,258,1.409,269,2.556,274,2.359,275,2.802,281,3.132,289,3.132,314,2.055,315,3.132,422,2.359,423,3.877,424,3.536,445,2.195,446,2.055,461,3.132,476,2.359,508,2.442,509,2.055,511,4.054,557,2.195,558,2.195,563,3.132,564,1.823,565,3.877,598,2.055,600,2.556,601,4.708,605,2.556,606,3.536,608,3.536,610,2.556,620,5.112,621,3.742,623,2.556,631,5.236,662,3.037,691,2.802,747,2.556,748,2.556,790,2.802,791,3.132,799,2.556,840,3.132,894,2.802,895,5.558,896,5.344,923,3.132,929,2.802,931,2.802,932,3.877,942,2.802,1036,2.802,1055,2.802,1075,2.802,1088,2.802,1090,3.132,1096,2.556,1099,3.877,1111,2.802,1115,3.877,1169,4.445,1192,3.132,1193,3.633,1194,3.633,1195,6.175,1196,3.132,1197,3.633,1198,7.837,1199,3.132,1200,7.996,1201,3.132,1202,3.132,1203,3.132,1204,3.132,1205,3.132,1206,3.132,1207,3.132,1208,3.633,1209,7.055,1210,4.445,1211,3.633,1212,3.132,1213,3.633,1214,3.633,1215,3.633,1216,6.218,1217,3.132,1218,3.132,1219,5.026,1220,7.386,1221,7.055,1222,7.25,1223,3.633,1224,3.633,1225,3.633,1226,3.132,1227,3.633,1228,3.633,1229,3.633,1230,3.633,1231,3.132,1232,3.132,1233,3.132,1234,4.968,1235,3.633,1236,3.633,1237,4.333,1238,5.035,1239,3.633,1240,4.333,1241,4.333,1242,3.132,1243,3.132,1244,5.936,1245,3.132,1246,3.132,1247,3.132,1248,3.132,1249,3.132,1250,3.132,1251,3.132,1252,3.132,1253,3.132,1254,3.132,1255,3.132,1256,3.132,1257,3.633]],["title/dependencies.html",[266,3.19,1258,2.707]],["body/dependencies.html",[14,0.018,35,0.785,175,0.015,176,0.015,226,4.204,266,4.204,283,5.151,446,3.38,448,4.851,1259,5.975,1260,5.975,1261,7.269,1262,5.975,1263,5.975,1264,5.975,1265,5.975,1266,5.975,1267,5.975,1268,5.975,1269,5.975,1270,5.975,1271,5.975,1272,5.975,1273,5.975,1274,5.975,1275,5.975,1276,5.975,1277,5.975,1278,5.975,1279,5.975,1280,5.975,1281,5.975,1282,5.975]],["title/miscellaneous/functions.html",[1283,2.209,1284,3.909]],["body/miscellaneous/functions.html",[7,0.144,13,0.269,14,0.018,15,0.32,18,0.462,23,0.433,26,0.402,39,0.462,44,0.563,68,0.81,89,0.674,97,0.663,99,0.524,106,0.563,119,0.63,151,0.745,175,0.013,176,0.013,204,3.652,207,2.9,224,2.96,225,3.299,269,4.625,435,2.028,444,3.892,509,3.719,525,3.892,564,3.299,601,3.078,621,4.901,764,3.622,895,4.625,896,5.434,911,5.168,942,5.071,944,4.086,1036,5.071,1055,5.071,1075,5.071,1077,5.168,1082,5.168,1083,5.168,1096,4.217,1099,5.614,1111,5.071,1115,5.329,1169,5.822,1210,3.656,1212,5.668,1217,4.086,1218,5.668,1226,5.956,1231,4.086,1232,5.168,1233,4.086,1238,3.656,1240,5.956,1241,5.956,1242,5.168,1243,5.168,1244,6.017,1245,5.668,1246,5.168,1247,5.168,1248,5.668,1249,5.668,1250,5.668,1251,5.668,1252,5.668,1253,5.668,1283,3.335,1284,4.086,1285,6.852,1286,4.74,1287,4.74,1288,4.74,1289,5.168,1290,4.086,1291,4.086,1292,5.994,1293,5.994,1294,5.994,1295,4.74,1296,5.994,1297,4.74,1298,6.909,1299,5.994,1300,4.74,1301,4.74,1302,4.74]],["title/index.html",[7,0.095,1303,3.14,1304,3.14]],["body/index.html",[1,0.635,11,0.594,12,0.439,14,0.014,18,0.68,43,0.763,46,0.916,51,0.916,53,0.635,61,0.635,62,0.711,63,0.808,64,0.635,65,0.763,66,0.818,68,0.763,73,0.635,74,0.635,78,0.763,80,0.95,81,0.95,82,0.867,83,0.635,84,0.855,85,0.635,90,0.635,91,0.711,97,0.599,99,0.771,100,0.635,112,0.635,115,0.635,116,0.635,118,0.635,120,0.763,122,0.599,127,0.635,128,0.599,129,0.635,130,0.528,133,0.635,135,0.677,136,0.635,138,0.808,144,0.635,146,0.635,148,0.599,155,0.635,159,0.599,162,0.635,175,0.014,176,0.014,191,3.81,207,3.064,258,2.524,468,3.259,524,4.543,528,4.474,536,3.81,537,3.517,539,3.064,547,3.81,582,3.273,597,3.517,620,3.517,959,4.67,1012,4.67,1019,4.67,1305,5.416,1306,7.668,1307,6.508,1308,6.508,1309,6.977,1310,7.238,1311,6.508,1312,6.508,1313,5.416,1314,6.508,1315,6.508,1316,5.416,1317,5.416,1318,6.508,1319,5.416,1320,5.416,1321,5.416,1322,5.416,1323,5.416,1324,5.416,1325,5.416,1326,5.416]],["title/modules.html",[265,3.975]],["body/modules.html",[14,0.016,175,0.016,176,0.016,264,4.363,265,4.783,1327,6.201,1328,6.201,1329,6.201,1330,6.201]],["title/overview.html",[1331,4.443]],["body/overview.html",[2,0.55,14,0.017,52,0.676,175,0.015,176,0.015,182,4.646,263,5.344,264,5.416,266,4.237,267,5.193,268,5.193,269,4.237,270,5.193,271,5.193,272,5.193,273,5.193,274,4.736,275,5.625,276,5.973,277,5.193,278,4.646,510,3.204,1085,5.193,1088,4.646,1196,5.193,1331,5.193,1332,6.023]],["title/properties.html",[8,0.256,1258,2.707]],["body/properties.html",[8,0.348,14,0.017,37,0.602,175,0.016,176,0.016,1333,6.173,1334,6.173,1335,6.173,1336,6.173,1337,6.173]],["title/miscellaneous/variables.html",[1283,2.209,1338,3.909]],["body/miscellaneous/variables.html",[7,0.145,13,0.278,14,0.018,15,0.313,23,0.55,26,0.429,117,0.373,148,0.529,175,0.013,176,0.013,224,3.592,225,4,247,3.207,258,2.829,403,4.124,404,4.124,423,3.69,424,5.133,446,3.411,447,4.124,448,3.365,601,3.106,605,4.242,606,4.877,607,4.651,608,4.877,609,4.651,610,4.242,611,3.69,612,3.69,662,4.189,747,4.242,748,4.242,895,4.242,896,5.027,929,4.651,930,5.198,931,4.651,932,5.347,933,5.198,1096,4.242,1098,5.198,1195,4.124,1199,5.198,1201,5.198,1202,5.198,1203,5.198,1204,5.198,1205,5.198,1206,5.198,1207,5.198,1210,3.69,1234,4.124,1237,5.976,1238,3.69,1244,5.713,1254,5.198,1255,5.198,1256,5.198,1283,3.365,1285,6.566,1289,5.692,1290,6.29,1291,4.124,1338,4.124,1339,4.784,1340,7.492,1341,6.029,1342,6.029,1343,4.784,1344,4.784,1345,4.784,1346,4.784,1347,6.029,1348,6.029,1349,6.029,1350,6.029,1351,6.029]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"injectables/AppLogger.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/Config.html":{},"classes/DynamoDbAccess.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"interfaces/IDynamoResult.html":{},"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardDto.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":631,"title":{},"body":{"interfaces/IScore.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MockService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1334,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":1274,"title":{},"body":{"dependencies.html":{}}}],["0.3.6",{"_index":1268,"title":{},"body":{"dependencies.html":{}}}],["0.41.0",{"_index":1260,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1200,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1239,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1228,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1209,"title":{},"body":{"coverage.html":{}}}],["0/20",{"_index":1197,"title":{},"body":{"coverage.html":{}}}],["0/21",{"_index":1211,"title":{},"body":{"coverage.html":{}}}],["0/26",{"_index":1227,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1220,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1221,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1222,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1223,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1215,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1216,"title":{},"body":{"coverage.html":{}}}],["08",{"_index":460,"title":{},"body":{"classes/DynamoDbAccess.html":{}}}],["0dt6abmnswwtbetxve0emuo0og9ctj9boppnpupehj0",{"_index":1346,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0x0",{"_index":1147,"title":{},"body":{"classes/MockService.html":{}}}],["1",{"_index":52,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"injectables/AppLogger.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/Config.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IScore.html":{},"classes/LeaderboardDto.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"overview.html":{}}}],["1.0.3",{"_index":1280,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1219,"title":{},"body":{"coverage.html":{}}}],["1/10",{"_index":1208,"title":{},"body":{"coverage.html":{}}}],["1/11",{"_index":1230,"title":{},"body":{"coverage.html":{}}}],["1/13",{"_index":1229,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":461,"title":{},"body":{"classes/DynamoDbAccess.html":{},"coverage.html":{}}}],["100",{"_index":662,"title":{},"body":{"interfaces/IScore.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["1000",{"_index":1098,"title":{},"body":{"classes/MockService.html":{},"miscellaneous/variables.html":{}}}],["14",{"_index":612,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{},"miscellaneous/variables.html":{}}}],["16/33",{"_index":1236,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":478,"title":{},"body":{"classes/DynamoDbAccess.html":{},"classes/MockService.html":{}}}],["2.1498.0",{"_index":1269,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":1262,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":1083,"title":{},"body":{"classes/MockService.html":{},"miscellaneous/functions.html":{}}}],["2012",{"_index":459,"title":{},"body":{"classes/DynamoDbAccess.html":{}}}],["3",{"_index":1085,"title":{},"body":{"classes/MockService.html":{},"overview.html":{}}}],["3.0.2",{"_index":1276,"title":{},"body":{"dependencies.html":{}}}],["3.10.0",{"_index":1282,"title":{},"body":{"dependencies.html":{}}}],["3.154e+7",{"_index":780,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["365",{"_index":779,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["4",{"_index":1086,"title":{},"body":{"classes/MockService.html":{}}}],["400",{"_index":1345,"title":{},"body":{"miscellaneous/variables.html":{}}}],["44",{"_index":1332,"title":{},"body":{"overview.html":{}}}],["48",{"_index":1235,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":1048,"title":{},"body":{"classes/MockService.html":{}}}],["500",{"_index":1344,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6",{"_index":1087,"title":{},"body":{"classes/MockService.html":{}}}],["6.1.2",{"_index":1266,"title":{},"body":{"dependencies.html":{}}}],["6.11.1",{"_index":1271,"title":{},"body":{"dependencies.html":{}}}],["600",{"_index":628,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["63",{"_index":1213,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1088,"title":{},"body":{"classes/MockService.html":{},"coverage.html":{},"overview.html":{}}}],["7.2.0",{"_index":1278,"title":{},"body":{"dependencies.html":{}}}],["7/11",{"_index":1214,"title":{},"body":{"coverage.html":{}}}],["7/8",{"_index":1225,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":1089,"title":{},"body":{"classes/MockService.html":{}}}],["86400",{"_index":611,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{},"miscellaneous/variables.html":{}}}],["87",{"_index":1224,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":1090,"title":{},"body":{"classes/MockService.html":{},"coverage.html":{}}}],["9.0.0",{"_index":1261,"title":{},"body":{"dependencies.html":{}}}],["_checkcreatelogfile",{"_index":194,"title":{},"body":{"injectables/AppLogger.html":{}}}],["_dataaccess_deletesprint(sprintid",{"_index":785,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["_dataaccess_getactivesprints",{"_index":776,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["_dataaccess_getscore(wallet",{"_index":767,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["_dataaccess_getsprint(sprintid",{"_index":774,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["_dataaccess_putscore(wallet",{"_index":770,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["_dataaccess_putsprint(sprintid",{"_index":778,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["_dataaccess_scansprints",{"_index":765,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["_getactivesprintname",{"_index":723,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["_getlogfilename",{"_index":195,"title":{},"body":{"injectables/AppLogger.html":{}}}],["_getscoresfromcache(cache",{"_index":737,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["_iscurrentsprint(sprintid",{"_index":735,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["_moveassets",{"_index":898,"title":{},"body":{"classes/MockService.html":{}}}],["_moveassets(source",{"_index":906,"title":{},"body":{"classes/MockService.html":{}}}],["_readfromfiles",{"_index":802,"title":{},"body":{"classes/LeaderboardJsonFile.html":{}}}],["_scanforscores(sprintid",{"_index":750,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["_sprintexists(sprintid",{"_index":722,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["_updatecacheitem(wallet",{"_index":745,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["_verifyevmsignature",{"_index":899,"title":{},"body":{"classes/MockService.html":{}}}],["_verifyevmsignature(expectedaddress",{"_index":909,"title":{},"body":{"classes/MockService.html":{}}}],["_verifysessionid",{"_index":900,"title":{},"body":{"classes/MockService.html":{}}}],["_verifysessionid(sessionid",{"_index":912,"title":{},"body":{"classes/MockService.html":{}}}],["_writeentry",{"_index":196,"title":{},"body":{"injectables/AppLogger.html":{}}}],["_writeentry(tag",{"_index":210,"title":{},"body":{"injectables/AppLogger.html":{}}}],["_writetofile",{"_index":803,"title":{},"body":{"classes/LeaderboardJsonFile.html":{}}}],["_writetofile(wallet",{"_index":810,"title":{},"body":{"classes/LeaderboardJsonFile.html":{}}}],["a.score",{"_index":641,"title":{},"body":{"interfaces/IScore.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{}}}],["access",{"_index":617,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["accessing",{"_index":1299,"title":{},"body":{"miscellaneous/functions.html":{}}}],["accesskeyid",{"_index":450,"title":{},"body":{"classes/DynamoDbAccess.html":{},"classes/MockService.html":{}}}],["accessors",{"_index":319,"title":{},"body":{"classes/Config.html":{}}}],["account",{"_index":138,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"index.html":{}}}],["accumulated",{"_index":681,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["accumulates",{"_index":575,"title":{},"body":{"interfaces/ILeaderboard.html":{},"interfaces/ISprint.html":{}}}],["action",{"_index":157,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["action:'update",{"_index":1324,"title":{},"body":{"index.html":{}}}],["action:'verify",{"_index":1322,"title":{},"body":{"index.html":{}}}],["active",{"_index":121,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardDto.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["active.tostring",{"_index":784,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["active=false",{"_index":697,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["active_val",{"_index":777,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["activesprint",{"_index":718,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["activesprint.startdate",{"_index":721,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["activesprintid",{"_index":717,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["activesprints",{"_index":724,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["activesprints.data",{"_index":727,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["activesprints.data.length",{"_index":728,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["activesprints.data[0",{"_index":729,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["activesprints.success",{"_index":726,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["add",{"_index":27,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardDto.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["added",{"_index":31,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["adding",{"_index":683,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["addleaderboarddto",{"_index":1,"title":{"classes/AddLeaderboardDto.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{},"index.html":{}}}],["addleaderboardresponsedto",{"_index":115,"title":{"classes/AddLeaderboardResponseDto.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{},"index.html":{}}}],["addleaderboardscore",{"_index":566,"title":{},"body":{"interfaces/ILeaderboard.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{}}}],["addleaderboardscore(wallet",{"_index":573,"title":{},"body":{"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{}}}],["address",{"_index":18,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["addresses",{"_index":71,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["adds",{"_index":536,"title":{},"body":{"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"index.html":{}}}],["admin",{"_index":599,"title":{},"body":{"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{}}}],["again",{"_index":1153,"title":{},"body":{"classes/MockService.html":{}}}],["ageseconds",{"_index":642,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["akia3rqqofzk7u7kte2r",{"_index":936,"title":{},"body":{"classes/MockService.html":{}}}],["akia3rqqofzktr4yarhp",{"_index":938,"title":{},"body":{"classes/MockService.html":{}}}],["alerts",{"_index":186,"title":{},"body":{"injectables/AppLogger.html":{}}}],["allowedcorsorigin",{"_index":336,"title":{},"body":{"classes/Config.html":{}}}],["already",{"_index":538,"title":{},"body":{"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{},"classes/MockService.html":{}}}],["amethod",{"_index":317,"title":{},"body":{"classes/Config.html":{}}}],["amount",{"_index":62,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"index.html":{}}}],["ap",{"_index":934,"title":{},"body":{"classes/MockService.html":{}}}],["api",{"_index":1305,"title":{},"body":{"index.html":{}}}],["api/v1/accounts",{"_index":1326,"title":{},"body":{"index.html":{}}}],["api/v1/auth",{"_index":1320,"title":{},"body":{"index.html":{}}}],["api/v1/leaderboard",{"_index":1318,"title":{},"body":{"index.html":{}}}],["api/v1/nfts",{"_index":1307,"title":{},"body":{"index.html":{}}}],["api/v1/nfts/beatmaps",{"_index":1312,"title":{},"body":{"index.html":{}}}],["api/v1/nfts/beats",{"_index":1310,"title":{},"body":{"index.html":{}}}],["api/v1/sprint",{"_index":1319,"title":{},"body":{"index.html":{}}}],["api/v1/token",{"_index":1314,"title":{},"body":{"index.html":{}}}],["api/v1/username",{"_index":1317,"title":{},"body":{"index.html":{}}}],["api/v1/verify",{"_index":1315,"title":{},"body":{"index.html":{}}}],["apiproperty",{"_index":34,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["apiproperty({description",{"_index":17,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["apiversion",{"_index":458,"title":{},"body":{"classes/DynamoDbAccess.html":{}}}],["app",{"_index":185,"title":{},"body":{"injectables/AppLogger.html":{}}}],["app.controller",{"_index":284,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":285,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":281,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":843,"title":{},"body":{"classes/LeaderboardMemory.html":{}}}],["applogger",{"_index":181,"title":{"injectables/AppLogger.html":{}},"body":{"injectables/AppLogger.html":{},"coverage.html":{}}}],["appmodule",{"_index":264,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":274,"title":{"injectables/AppService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["aprop",{"_index":320,"title":{},"body":{"classes/Config.html":{}}}],["array.from(utf8encode.encode(str).values",{"_index":1350,"title":{},"body":{"miscellaneous/variables.html":{}}}],["artist",{"_index":58,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["assert",{"_index":1240,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["assert(!login.extradata",{"_index":1121,"title":{},"body":{"classes/MockService.html":{}}}],["assert(!session.success",{"_index":1133,"title":{},"body":{"classes/MockService.html":{}}}],["assert(keys.messagetosign.length",{"_index":1104,"title":{},"body":{"classes/MockService.html":{}}}],["assert(keys.sessionid.length",{"_index":1132,"title":{},"body":{"classes/MockService.html":{}}}],["assert(login.authid",{"_index":1119,"title":{},"body":{"classes/MockService.html":{}}}],["assert(login.authtype",{"_index":1120,"title":{},"body":{"classes/MockService.html":{}}}],["assert(login.extradata",{"_index":1122,"title":{},"body":{"classes/MockService.html":{}}}],["assert(login.suiwallet",{"_index":1129,"title":{},"body":{"classes/MockService.html":{}}}],["assert(output1.success",{"_index":1151,"title":{},"body":{"classes/MockService.html":{}}}],["assert(output2.success",{"_index":1159,"title":{},"body":{"classes/MockService.html":{}}}],["assert(output3a.success",{"_index":1166,"title":{},"body":{"classes/MockService.html":{}}}],["assert(output3b.success",{"_index":1167,"title":{},"body":{"classes/MockService.html":{}}}],["assert(pred",{"_index":1292,"title":{},"body":{"miscellaneous/functions.html":{}}}],["assert(session",{"_index":1106,"title":{},"body":{"classes/MockService.html":{}}}],["assert(session.evmwallet",{"_index":1140,"title":{},"body":{"classes/MockService.html":{}}}],["assert(session.message",{"_index":1109,"title":{},"body":{"classes/MockService.html":{}}}],["assert(session.sessionid",{"_index":1107,"title":{},"body":{"classes/MockService.html":{}}}],["assert(session.success",{"_index":1138,"title":{},"body":{"classes/MockService.html":{}}}],["assert(session.suiwallet",{"_index":1139,"title":{},"body":{"classes/MockService.html":{}}}],["assert(success",{"_index":1117,"title":{},"body":{"classes/MockService.html":{}}}],["assets",{"_index":992,"title":{},"body":{"classes/MockService.html":{}}}],["associated",{"_index":543,"title":{},"body":{"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"classes/MockService.html":{}}}],["asssociated",{"_index":977,"title":{},"body":{"classes/MockService.html":{}}}],["async",{"_index":425,"title":{},"body":{"classes/DynamoDbAccess.html":{},"interfaces/IScore.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MockService.html":{}}}],["attempt",{"_index":548,"title":{},"body":{"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"classes/MockService.html":{}}}],["attribute",{"_index":1058,"title":{},"body":{"classes/MockService.html":{}}}],["attributedefinitions",{"_index":1043,"title":{},"body":{"classes/MockService.html":{}}}],["attributename",{"_index":1038,"title":{},"body":{"classes/MockService.html":{}}}],["attributes",{"_index":1060,"title":{},"body":{"classes/MockService.html":{}}}],["attributetype",{"_index":1044,"title":{},"body":{"classes/MockService.html":{}}}],["auth",{"_index":23,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/Config.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["auth.getauthrecord(evmwallet",{"_index":1128,"title":{},"body":{"classes/MockService.html":{}}}],["auth.getauthrecord(wallet",{"_index":1118,"title":{},"body":{"classes/MockService.html":{}}}],["auth.getauthsession(keys.sessionid",{"_index":1105,"title":{},"body":{"classes/MockService.html":{}}}],["auth.register(evmwallet",{"_index":1127,"title":{},"body":{"classes/MockService.html":{}}}],["auth.register(wallet",{"_index":1116,"title":{},"body":{"classes/MockService.html":{}}}],["auth.startauthsession(createrandomaddress",{"_index":1131,"title":{},"body":{"classes/MockService.html":{}}}],["auth.startauthsession(evmwallet",{"_index":1145,"title":{},"body":{"classes/MockService.html":{}}}],["auth.ts",{"_index":896,"title":{},"body":{"classes/MockService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["auth.ts:133",{"_index":916,"title":{},"body":{"classes/MockService.html":{}}}],["auth.ts:163",{"_index":908,"title":{},"body":{"classes/MockService.html":{}}}],["auth.ts:184",{"_index":913,"title":{},"body":{"classes/MockService.html":{}}}],["auth.ts:189",{"_index":910,"title":{},"body":{"classes/MockService.html":{}}}],["auth.ts:198",{"_index":917,"title":{},"body":{"classes/MockService.html":{}}}],["auth.ts:208",{"_index":919,"title":{},"body":{"classes/MockService.html":{}}}],["auth.ts:48",{"_index":905,"title":{},"body":{"classes/MockService.html":{}}}],["auth.ts:54",{"_index":922,"title":{},"body":{"classes/MockService.html":{}}}],["auth.updateauthrecord(evmwallet",{"_index":1130,"title":{},"body":{"classes/MockService.html":{}}}],["auth.updateauthsession(session.sessionid",{"_index":1137,"title":{},"body":{"classes/MockService.html":{}}}],["auth_session_table_name",{"_index":931,"title":{},"body":{"classes/MockService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth_table_name",{"_index":929,"title":{},"body":{"classes/MockService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authentication",{"_index":547,"title":{},"body":{"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"index.html":{}}}],["authenticator",{"_index":550,"title":{},"body":{"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{}}}],["authid",{"_index":9,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["authmanager",{"_index":897,"title":{},"body":{"classes/MockService.html":{}}}],["authmanagerdynamodb",{"_index":923,"title":{},"body":{"classes/MockService.html":{},"coverage.html":{}}}],["author",{"_index":1337,"title":{},"body":{"properties.html":{}}}],["authrecord",{"_index":967,"title":{},"body":{"classes/MockService.html":{}}}],["authrecord.authid",{"_index":1030,"title":{},"body":{"classes/MockService.html":{}}}],["authrecord.authid.trim",{"_index":989,"title":{},"body":{"classes/MockService.html":{}}}],["authrecord.authtype",{"_index":997,"title":{},"body":{"classes/MockService.html":{}}}],["authrecord.extradata",{"_index":993,"title":{},"body":{"classes/MockService.html":{}}}],["authrecord.extradata.privatekey",{"_index":994,"title":{},"body":{"classes/MockService.html":{}}}],["authrecord.suiwallet",{"_index":970,"title":{},"body":{"classes/MockService.html":{}}}],["authsessiontablename",{"_index":335,"title":{},"body":{"classes/Config.html":{}}}],["authtablename",{"_index":334,"title":{},"body":{"classes/Config.html":{}}}],["authtype",{"_index":10,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["authverifydto",{"_index":155,"title":{"classes/AuthVerifyDto.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{},"index.html":{}}}],["authverifyresponsedto",{"_index":162,"title":{"classes/AuthVerifyResponseDto.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{},"index.html":{}}}],["await",{"_index":463,"title":{},"body":{"classes/DynamoDbAccess.html":{},"interfaces/IScore.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LocalScoreCache.html":{},"classes/MockService.html":{}}}],["aws",{"_index":446,"title":{},"body":{"classes/DynamoDbAccess.html":{},"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{},"classes/MockService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["aws.config.update",{"_index":449,"title":{},"body":{"classes/DynamoDbAccess.html":{}}}],["aws.dynamodb",{"_index":457,"title":{},"body":{"classes/DynamoDbAccess.html":{}}}],["b",{"_index":639,"title":{},"body":{"interfaces/IScore.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MockService.html":{}}}],["b.score",{"_index":640,"title":{},"body":{"interfaces/IScore.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{}}}],["balance",{"_index":75,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["beatmap",{"_index":54,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["beatmapjson",{"_index":60,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["beatmaps",{"_index":84,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"index.html":{}}}],["beatmapsnftdto",{"_index":77,"title":{"classes/BeatmapsNftDto.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{}}}],["beatmapsnftownercap",{"_index":330,"title":{},"body":{"classes/Config.html":{}}}],["beatmapsnftpackageid",{"_index":327,"title":{},"body":{"classes/Config.html":{}}}],["beats",{"_index":80,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"index.html":{}}}],["beatscoinpackageid",{"_index":325,"title":{},"body":{"classes/Config.html":{}}}],["beatsnftdto",{"_index":76,"title":{"classes/BeatsNftDto.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{}}}],["beatsnftownercap",{"_index":329,"title":{},"body":{"classes/Config.html":{}}}],["beatsnftpackageid",{"_index":326,"title":{},"body":{"classes/Config.html":{}}}],["being",{"_index":30,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["beyond",{"_index":798,"title":{},"body":{"classes/LeaderboardJsonFile.html":{}}}],["bool",{"_index":1076,"title":{},"body":{"classes/MockService.html":{}}}],["boolean",{"_index":93,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/Config.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"interfaces/IDynamoResult.html":{},"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardDto.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["bootstrap",{"_index":269,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1330,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1327,"title":{},"body":{"modules.html":{}}}],["c",{"_index":1091,"title":{},"body":{"classes/MockService.html":{}}}],["cache",{"_index":665,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["cache.fromcache",{"_index":670,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["cache.getasarray(limit",{"_index":739,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["cache.isexpired",{"_index":738,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["cache.refresh(data",{"_index":744,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["cache.scores",{"_index":668,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["cache.update(wallet",{"_index":749,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["call",{"_index":618,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["caller",{"_index":160,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["calling",{"_index":1309,"title":{},"body":{"index.html":{}}}],["capacity",{"_index":1071,"title":{},"body":{"classes/MockService.html":{}}}],["catch",{"_index":837,"title":{},"body":{"classes/LeaderboardJsonFile.html":{}}}],["certfilepath",{"_index":339,"title":{},"body":{"classes/Config.html":{}}}],["challenge",{"_index":152,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["change",{"_index":976,"title":{},"body":{"classes/MockService.html":{}}}],["changesuiwalletaddress",{"_index":901,"title":{},"body":{"classes/MockService.html":{}}}],["changesuiwalletaddress(authid",{"_index":914,"title":{},"body":{"classes/MockService.html":{}}}],["chars",{"_index":1084,"title":{},"body":{"classes/MockService.html":{}}}],["check",{"_index":128,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IScore.html":{},"classes/LeaderboardDto.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"index.html":{}}}],["checkusernamedto",{"_index":127,"title":{"classes/CheckUsernameDto.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{},"index.html":{}}}],["checkusernameresponsedto",{"_index":129,"title":{"classes/CheckUsernameResponseDto.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{},"index.html":{}}}],["chosen",{"_index":161,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["class",{"_index":0,"title":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/Config.html":{},"classes/DynamoDbAccess.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"injectables/AppLogger.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/Config.html":{},"classes/DynamoDbAccess.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IScore.html":{},"classes/LeaderboardDto.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/Config.html":{},"classes/DynamoDbAccess.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"overview.html":{}}}],["clear",{"_index":864,"title":{},"body":{"classes/LocalScoreCache.html":{}}}],["client",{"_index":150,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["cluster_appmodule",{"_index":272,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":273,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["coincap",{"_index":331,"title":{},"body":{"classes/Config.html":{}}}],["comment",{"_index":562,"title":{},"body":{"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{}}}],["config",{"_index":314,"title":{"classes/Config.html":{}},"body":{"classes/Config.html":{},"classes/DynamoDbAccess.html":{},"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{},"classes/MockService.html":{},"coverage.html":{}}}],["config.getbooleansetting(process.env.detect_package_info",{"_index":394,"title":{},"body":{"classes/Config.html":{}}}],["config.getbooleansetting(process.env.use_cors",{"_index":393,"title":{},"body":{"classes/Config.html":{}}}],["config.getbooleansetting(process.env.use_tls",{"_index":392,"title":{},"body":{"classes/Config.html":{}}}],["config.httpport",{"_index":411,"title":{},"body":{"classes/Config.html":{}}}],["config.httpsport",{"_index":410,"title":{},"body":{"classes/Config.html":{}}}],["config.scorestablename",{"_index":751,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["config.sprintstablename",{"_index":775,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["config.update",{"_index":940,"title":{},"body":{"classes/MockService.html":{}}}],["config.usetls",{"_index":409,"title":{},"body":{"classes/Config.html":{}}}],["configmodule",{"_index":282,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":288,"title":{},"body":{"modules/AppModule.html":{}}}],["console.error(\"unable",{"_index":474,"title":{},"body":{"classes/DynamoDbAccess.html":{},"classes/MockService.html":{}}}],["console.error('unable",{"_index":1073,"title":{},"body":{"classes/MockService.html":{}}}],["console.error(e",{"_index":839,"title":{},"body":{"classes/LeaderboardJsonFile.html":{}}}],["console.error(err",{"_index":469,"title":{},"body":{"classes/DynamoDbAccess.html":{}}}],["console.log(\"created",{"_index":1052,"title":{},"body":{"classes/MockService.html":{}}}],["console.log(\"deleted",{"_index":1081,"title":{},"body":{"classes/MockService.html":{}}}],["console.log('creating",{"_index":251,"title":{},"body":{"injectables/AppLogger.html":{}}}],["console.log('updated",{"_index":1074,"title":{},"body":{"classes/MockService.html":{}}}],["console.log(expectedaddress",{"_index":952,"title":{},"body":{"classes/MockService.html":{}}}],["console.log(keypair",{"_index":1112,"title":{},"body":{"classes/MockService.html":{}}}],["console.log(signingaddress",{"_index":953,"title":{},"body":{"classes/MockService.html":{}}}],["console.log(verified",{"_index":951,"title":{},"body":{"classes/MockService.html":{}}}],["const",{"_index":247,"title":{},"body":{"injectables/AppLogger.html":{},"classes/DynamoDbAccess.html":{},"interfaces/IScore.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MockService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":201,"title":{},"body":{"injectables/AppLogger.html":{},"classes/DynamoDbAccess.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MockService.html":{}}}],["constructor(context",{"_index":202,"title":{},"body":{"injectables/AppLogger.html":{}}}],["constructor(expirationseconds",{"_index":627,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["constructor(network",{"_index":804,"title":{},"body":{"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{}}}],["context",{"_index":205,"title":{},"body":{"injectables/AppLogger.html":{}}}],["controller",{"_index":1196,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["controllers",{"_index":280,"title":{},"body":{"modules/AppModule.html":{}}}],["coordinated",{"_index":243,"title":{},"body":{"injectables/AppLogger.html":{}}}],["copied",{"_index":1066,"title":{},"body":{"classes/MockService.html":{}}}],["count",{"_index":626,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["coverage",{"_index":1192,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":584,"title":{},"body":{"interfaces/ILeaderboard.html":{},"interfaces/ISprint.html":{},"classes/MockService.html":{}}}],["createactivegsi",{"_index":1245,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createactivesprint",{"_index":1246,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createactivesprint(lb",{"_index":1295,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createauthsessiontable",{"_index":1075,"title":{},"body":{"classes/MockService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createauthtable",{"_index":1036,"title":{},"body":{"classes/MockService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createauthusernamegsi",{"_index":1055,"title":{},"body":{"classes/MockService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["created",{"_index":147,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["createinactivesprint",{"_index":1247,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createinactivesprint(lb",{"_index":1297,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createleaderboardscores",{"_index":1248,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createleaderboardsprints",{"_index":1249,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createrandomaddress",{"_index":1115,"title":{},"body":{"classes/MockService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createrandomaddress(20",{"_index":1134,"title":{},"body":{"classes/MockService.html":{}}}],["createrandomaddress(32",{"_index":1125,"title":{},"body":{"classes/MockService.html":{}}}],["createrandomaddress(len",{"_index":1082,"title":{},"body":{"classes/MockService.html":{},"miscellaneous/functions.html":{}}}],["creates",{"_index":579,"title":{},"body":{"interfaces/ILeaderboard.html":{},"interfaces/ISprint.html":{}}}],["createscoregsi",{"_index":1250,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createsprint",{"_index":567,"title":{},"body":{"interfaces/ILeaderboard.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{}}}],["createsprint(sprintid",{"_index":577,"title":{},"body":{"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LocalScoreCache.html":{}}}],["createsprint(sprintname",{"_index":813,"title":{},"body":{"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{}}}],["createsprintgsi",{"_index":1251,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createwallet",{"_index":902,"title":{},"body":{"classes/MockService.html":{}}}],["creating",{"_index":549,"title":{},"body":{"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{}}}],["creator",{"_index":55,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["current",{"_index":38,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardDto.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["currently",{"_index":120,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/ILeaderboard.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"index.html":{}}}],["d",{"_index":1092,"title":{},"body":{"classes/MockService.html":{}}}],["data",{"_index":468,"title":{},"body":{"classes/DynamoDbAccess.html":{},"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"interfaces/IDynamoResult.html":{},"interfaces/IScore.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MockService.html":{},"index.html":{}}}],["data.item",{"_index":471,"title":{},"body":{"classes/DynamoDbAccess.html":{}}}],["data.items",{"_index":479,"title":{},"body":{"classes/DynamoDbAccess.html":{}}}],["data/${wallet}.json",{"_index":827,"title":{},"body":{"classes/LeaderboardJsonFile.html":{}}}],["dataaccess/dynamodbaccess",{"_index":603,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["dataaccess/idynamoresult",{"_index":602,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["database",{"_index":525,"title":{},"body":{"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"classes/MockService.html":{},"miscellaneous/functions.html":{}}}],["date",{"_index":123,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"injectables/AppLogger.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardDto.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["date(date.now",{"_index":240,"title":{},"body":{"injectables/AppLogger.html":{}}}],["deactivated",{"_index":581,"title":{},"body":{"interfaces/ILeaderboard.html":{},"interfaces/ISprint.html":{}}}],["debug",{"_index":197,"title":{},"body":{"injectables/AppLogger.html":{}}}],["debug(message",{"_index":213,"title":{},"body":{"injectables/AppLogger.html":{}}}],["declarations",{"_index":268,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["decorators",{"_index":16,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["default",{"_index":224,"title":{},"body":{"injectables/AppLogger.html":{},"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["default_sprint_key",{"_index":605,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["default_sprint_length",{"_index":610,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":21,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"injectables/AppLogger.html":{},"injectables/AppService.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/Config.html":{},"classes/DynamoDbAccess.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IAuthManager.html":{},"interfaces/ILeaderboard.html":{},"classes/LeaderboardDto.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["defines",{"_index":1065,"title":{},"body":{"classes/MockService.html":{}}}],["definition",{"_index":1056,"title":{},"body":{"classes/MockService.html":{}}}],["definitions",{"_index":1059,"title":{},"body":{"classes/MockService.html":{}}}],["delete",{"_index":1079,"title":{},"body":{"classes/MockService.html":{}}}],["deleteauthtable",{"_index":942,"title":{},"body":{"classes/MockService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["deleteitem",{"_index":426,"title":{},"body":{"classes/DynamoDbAccess.html":{}}}],["deleteitem(params",{"_index":432,"title":{},"body":{"classes/DynamoDbAccess.html":{}}}],["deleteleaderboardscores",{"_index":1252,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["deleteleaderboardsprints",{"_index":1253,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["deletetable",{"_index":1241,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["deletetable(auth_table_name",{"_index":943,"title":{},"body":{"classes/MockService.html":{}}}],["deletetable(tablename",{"_index":1077,"title":{},"body":{"classes/MockService.html":{},"miscellaneous/functions.html":{}}}],["dependencies",{"_index":266,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deprecated",{"_index":1316,"title":{},"body":{"index.html":{}}}],["description",{"_index":37,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"injectables/AppLogger.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/ILeaderboard.html":{},"classes/LeaderboardDto.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"properties.html":{}}}],["dest",{"_index":907,"title":{},"body":{"classes/MockService.html":{}}}],["destination",{"_index":189,"title":{},"body":{"injectables/AppLogger.html":{}}}],["detectpackageinfo",{"_index":323,"title":{},"body":{"classes/Config.html":{}}}],["dev",{"_index":406,"title":{},"body":{"classes/Config.html":{},"classes/MockService.html":{}}}],["devnet",{"_index":41,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["disallow",{"_index":686,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["documentation",{"_index":1193,"title":{},"body":{"coverage.html":{}}}],["doesn't",{"_index":537,"title":{},"body":{"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"classes/MockService.html":{},"index.html":{}}}],["dt",{"_index":257,"title":{},"body":{"injectables/AppLogger.html":{}}}],["dt.getdate()}.log",{"_index":261,"title":{},"body":{"injectables/AppLogger.html":{}}}],["dt.getfullyear",{"_index":259,"title":{},"body":{"injectables/AppLogger.html":{}}}],["dt.getmonth",{"_index":260,"title":{},"body":{"injectables/AppLogger.html":{}}}],["duplicate",{"_index":990,"title":{},"body":{"classes/MockService.html":{}}}],["dynamo.ts",{"_index":1243,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["dynamodb",{"_index":424,"title":{},"body":{"classes/DynamoDbAccess.html":{},"classes/MockService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dynamodb.createtable(params",{"_index":1050,"title":{},"body":{"classes/MockService.html":{}}}],["dynamodb.deletetable(params",{"_index":1078,"title":{},"body":{"classes/MockService.html":{}}}],["dynamodb.updatetable(params",{"_index":1072,"title":{},"body":{"classes/MockService.html":{}}}],["dynamodbaccess",{"_index":422,"title":{"classes/DynamoDbAccess.html":{}},"body":{"classes/DynamoDbAccess.html":{},"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{},"coverage.html":{}}}],["e",{"_index":838,"title":{},"body":{"classes/LeaderboardJsonFile.html":{},"classes/MockService.html":{}}}],["e.g",{"_index":40,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["each",{"_index":113,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["ed25519keypair",{"_index":926,"title":{},"body":{"classes/MockService.html":{}}}],["ed25519keypair.fromsecretkey(privatekey",{"_index":1003,"title":{},"body":{"classes/MockService.html":{}}}],["email",{"_index":171,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["end",{"_index":125,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardDto.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["enddate",{"_index":126,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardDto.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["enddate.tostring",{"_index":783,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["ended",{"_index":695,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["endsprint",{"_index":568,"title":{},"body":{"interfaces/ILeaderboard.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{}}}],["endsprint(sprintid",{"_index":585,"title":{},"body":{"interfaces/ILeaderboard.html":{},"interfaces/ISprint.html":{}}}],["endsprint(sprintname",{"_index":816,"title":{},"body":{"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{}}}],["entire",{"_index":743,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["equal",{"_index":1013,"title":{},"body":{"classes/MockService.html":{}}}],["err",{"_index":467,"title":{},"body":{"classes/DynamoDbAccess.html":{},"classes/LeaderboardJsonFile.html":{}}}],["error",{"_index":198,"title":{},"body":{"injectables/AppLogger.html":{},"classes/DynamoDbAccess.html":{},"interfaces/IDynamoResult.html":{},"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{},"classes/MockService.html":{}}}],["error(\"assertion",{"_index":1094,"title":{},"body":{"classes/MockService.html":{}}}],["error(`invalid",{"_index":690,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["error(message",{"_index":216,"title":{},"body":{"injectables/AppLogger.html":{}}}],["errors",{"_index":188,"title":{},"body":{"injectables/AppLogger.html":{}}}],["ethers",{"_index":1270,"title":{},"body":{"dependencies.html":{}}}],["evm",{"_index":134,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["evmwallet",{"_index":145,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["exception",{"_index":614,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["exist",{"_index":539,"title":{},"body":{"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"interfaces/ILeaderboard.html":{},"interfaces/ISprint.html":{},"classes/MockService.html":{},"index.html":{}}}],["existing",{"_index":982,"title":{},"body":{"classes/MockService.html":{}}}],["exists",{"_index":130,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"interfaces/IScore.html":{},"classes/LeaderboardDto.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"index.html":{}}}],["exists(authid",{"_index":521,"title":{},"body":{"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{}}}],["exixsts",{"_index":969,"title":{},"body":{"classes/MockService.html":{}}}],["expected",{"_index":87,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["expectedaddress",{"_index":911,"title":{},"body":{"classes/MockService.html":{},"miscellaneous/functions.html":{}}}],["expectedaddress.tolowercase",{"_index":950,"title":{},"body":{"classes/MockService.html":{}}}],["expirationseconds",{"_index":624,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["export",{"_index":42,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"injectables/AppLogger.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/Config.html":{},"classes/DynamoDbAccess.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"interfaces/IDynamoResult.html":{},"interfaces/ILeaderboard.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardDto.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["exported",{"_index":1023,"title":{},"body":{"classes/MockService.html":{}}}],["exported.privatekey",{"_index":1026,"title":{},"body":{"classes/MockService.html":{}}}],["exports",{"_index":271,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["express",{"_index":1265,"title":{},"body":{"dependencies.html":{}}}],["expressionattributevalues",{"_index":755,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["extends",{"_index":67,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"injectables/AppLogger.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/LeaderboardJsonFile.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["extra",{"_index":1114,"title":{},"body":{"classes/MockService.html":{}}}],["extradata",{"_index":534,"title":{},"body":{"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"classes/MockService.html":{}}}],["f",{"_index":1093,"title":{},"body":{"classes/MockService.html":{}}}],["failed",{"_index":1095,"title":{},"body":{"classes/MockService.html":{}}}],["failure",{"_index":96,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["failurereason",{"_index":98,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["false",{"_index":416,"title":{},"body":{"classes/Config.html":{},"classes/DynamoDbAccess.html":{},"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MockService.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"injectables/AppLogger.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/Config.html":{},"classes/DynamoDbAccess.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"interfaces/IDynamoResult.html":{},"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardDto.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{}}}],["filename",{"_index":248,"title":{},"body":{"injectables/AppLogger.html":{}}}],["filename.split('.')[0",{"_index":832,"title":{},"body":{"classes/LeaderboardJsonFile.html":{}}}],["files",{"_index":794,"title":{},"body":{"classes/LeaderboardJsonFile.html":{},"classes/MockService.html":{}}}],["files.foreach(filename",{"_index":831,"title":{},"body":{"classes/LeaderboardJsonFile.html":{}}}],["finally",{"_index":1160,"title":{},"body":{"classes/MockService.html":{}}}],["first",{"_index":678,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{},"classes/MockService.html":{}}}],["flags",{"_index":256,"title":{},"body":{"injectables/AppLogger.html":{}}}],["for(let",{"_index":650,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["found",{"_index":716,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["fromcache",{"_index":663,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["fs",{"_index":227,"title":{},"body":{"injectables/AppLogger.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/MockService.html":{}}}],["fs.createwritestream(filename",{"_index":255,"title":{},"body":{"injectables/AppLogger.html":{}}}],["fs.existssync(filename",{"_index":250,"title":{},"body":{"injectables/AppLogger.html":{}}}],["fs.readdirsync(path",{"_index":830,"title":{},"body":{"classes/LeaderboardJsonFile.html":{}}}],["fs.readdirsync(root",{"_index":1103,"title":{},"body":{"classes/MockService.html":{}}}],["fs.readfile(`data/${filename",{"_index":833,"title":{},"body":{"classes/LeaderboardJsonFile.html":{}}}],["fs.writefilesync(filename",{"_index":252,"title":{},"body":{"injectables/AppLogger.html":{}}}],["fs.writefilesync(path",{"_index":828,"title":{},"body":{"classes/LeaderboardJsonFile.html":{}}}],["function",{"_index":620,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{},"classes/MockService.html":{},"coverage.html":{},"index.html":{}}}],["functions",{"_index":1284,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["future",{"_index":730,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["general",{"_index":94,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["getaccountdto",{"_index":133,"title":{"classes/GetAccountDto.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{},"index.html":{}}}],["getaccountresponsedto",{"_index":136,"title":{"classes/GetAccountResponseDto.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{},"index.html":{}}}],["getaccountresponsedto:198",{"_index":506,"title":{},"body":{"classes/GetUserOAuthResponseDto.html":{}}}],["getaccountresponsedto:200",{"_index":507,"title":{},"body":{"classes/GetUserOAuthResponseDto.html":{}}}],["getaccountresponsedto:202",{"_index":504,"title":{},"body":{"classes/GetUserOAuthResponseDto.html":{}}}],["getaccountresponsedto:204",{"_index":505,"title":{},"body":{"classes/GetUserOAuthResponseDto.html":{}}}],["getallowedcorsorigin",{"_index":378,"title":{},"body":{"classes/Config.html":{}}}],["getaprop",{"_index":346,"title":{},"body":{"classes/Config.html":{}}}],["getasarray",{"_index":865,"title":{},"body":{"classes/LocalScoreCache.html":{}}}],["getasarray(limit",{"_index":634,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["getauthmanagerinstance",{"_index":1218,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getauthrecord",{"_index":512,"title":{},"body":{"interfaces/IAuthManager.html":{}}}],["getauthrecord(authid",{"_index":526,"title":{},"body":{"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{}}}],["getauthrecords",{"_index":513,"title":{},"body":{"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{}}}],["getauthsession",{"_index":514,"title":{},"body":{"interfaces/IAuthManager.html":{}}}],["getauthsession(sessionid",{"_index":531,"title":{},"body":{"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{}}}],["getauthsessiontablename",{"_index":376,"title":{},"body":{"classes/Config.html":{}}}],["getauthtablename",{"_index":374,"title":{},"body":{"classes/Config.html":{}}}],["getbeatmapsnftownercap",{"_index":366,"title":{},"body":{"classes/Config.html":{}}}],["getbeatmapsnftpackageid",{"_index":360,"title":{},"body":{"classes/Config.html":{}}}],["getbeatmapsnftsdto",{"_index":1313,"title":{},"body":{"index.html":{}}}],["getbeatmapsnftsresponsedto",{"_index":83,"title":{"classes/GetBeatmapsNftsResponseDto.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{},"index.html":{}}}],["getbeatscoinpackageid",{"_index":356,"title":{},"body":{"classes/Config.html":{}}}],["getbeatsnftownercap",{"_index":364,"title":{},"body":{"classes/Config.html":{}}}],["getbeatsnftpackageid",{"_index":358,"title":{},"body":{"classes/Config.html":{}}}],["getbeatsnftsdto",{"_index":65,"title":{"classes/GetBeatsNftsDto.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{},"index.html":{}}}],["getbeatsnftsresponsedto",{"_index":78,"title":{"classes/GetBeatsNftsResponseDto.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{},"index.html":{}}}],["getbooleansetting",{"_index":318,"title":{},"body":{"classes/Config.html":{}}}],["getbooleansetting(value",{"_index":344,"title":{},"body":{"classes/Config.html":{}}}],["getcertfilepath",{"_index":384,"title":{},"body":{"classes/Config.html":{}}}],["getcoincap",{"_index":368,"title":{},"body":{"classes/Config.html":{}}}],["getdetectpackageinfo",{"_index":352,"title":{},"body":{"classes/Config.html":{}}}],["gethello",{"_index":290,"title":{},"body":{"injectables/AppService.html":{}}}],["gethttpport",{"_index":388,"title":{},"body":{"classes/Config.html":{}}}],["gethttpsport",{"_index":390,"title":{},"body":{"classes/Config.html":{}}}],["getitem",{"_index":427,"title":{},"body":{"classes/DynamoDbAccess.html":{}}}],["getitem(params",{"_index":436,"title":{},"body":{"classes/DynamoDbAccess.html":{}}}],["getkeyfilepath",{"_index":386,"title":{},"body":{"classes/Config.html":{}}}],["getleaderboarddto",{"_index":100,"title":{"classes/GetLeaderboardDto.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{},"index.html":{}}}],["getleaderboardinstance",{"_index":1232,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getleaderboardinstance(network",{"_index":1300,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getleaderboardresponsedto",{"_index":112,"title":{"classes/GetLeaderboardResponseDto.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{},"index.html":{}}}],["getleaderboardscore",{"_index":569,"title":{},"body":{"interfaces/ILeaderboard.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{}}}],["getleaderboardscore(wallet",{"_index":589,"title":{},"body":{"interfaces/ILeaderboard.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{}}}],["getleaderboardscores",{"_index":570,"title":{},"body":{"interfaces/ILeaderboard.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{}}}],["getleaderboardscores(limit",{"_index":591,"title":{},"body":{"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{}}}],["getleaderboardsprintdto",{"_index":116,"title":{"classes/GetLeaderboardSprintDto.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{},"index.html":{}}}],["getleaderboardsprintresponsedto",{"_index":118,"title":{"classes/GetLeaderboardSprintResponseDto.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{},"index.html":{}}}],["getlistenport",{"_index":380,"title":{},"body":{"classes/Config.html":{}}}],["getmnemonicphrase",{"_index":354,"title":{},"body":{"classes/Config.html":{}}}],["getrandomkeypair",{"_index":1111,"title":{},"body":{"classes/MockService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["gets",{"_index":528,"title":{},"body":{"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"interfaces/ILeaderboard.html":{},"interfaces/ISprint.html":{},"index.html":{}}}],["getscorestablename",{"_index":372,"title":{},"body":{"classes/Config.html":{}}}],["getsprint",{"_index":571,"title":{},"body":{"interfaces/ILeaderboard.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{}}}],["getsprint(sprintid",{"_index":593,"title":{},"body":{"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{}}}],["getsprints",{"_index":572,"title":{},"body":{"interfaces/ILeaderboard.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{}}}],["getsprints(limit",{"_index":595,"title":{},"body":{"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{}}}],["getsprintstablename",{"_index":370,"title":{},"body":{"classes/Config.html":{}}}],["getsuinetwork",{"_index":382,"title":{},"body":{"classes/Config.html":{}}}],["getting",{"_index":1303,"title":{"index.html":{}},"body":{}}],["gettokenbalancedto",{"_index":64,"title":{"classes/GetTokenBalanceDto.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{},"index.html":{}}}],["gettokenbalanceresponsedto",{"_index":74,"title":{"classes/GetTokenBalanceResponseDto.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{},"index.html":{}}}],["gettreasurycap",{"_index":362,"title":{},"body":{"classes/Config.html":{}}}],["getusecors",{"_index":350,"title":{},"body":{"classes/Config.html":{}}}],["getuseroauthdto",{"_index":173,"title":{"classes/GetUserOAuthDto.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{}}}],["getuseroauthresponsedto",{"_index":174,"title":{"classes/GetUserOAuthResponseDto.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{}}}],["getusetls",{"_index":348,"title":{},"body":{"classes/Config.html":{}}}],["given",{"_index":524,"title":{},"body":{"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"interfaces/ILeaderboard.html":{},"interfaces/ISprint.html":{},"index.html":{}}}],["globalsecondaryindexupdates",{"_index":1063,"title":{},"body":{"classes/MockService.html":{}}}],["gsi",{"_index":1062,"title":{},"body":{"classes/MockService.html":{}}}],["gsi's",{"_index":1057,"title":{},"body":{"classes/MockService.html":{}}}],["gsi_active",{"_index":609,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{},"miscellaneous/variables.html":{}}}],["gsi_active_name",{"_index":608,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["gsi_score",{"_index":1343,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gsi_score_name",{"_index":1254,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["gsi_sprint",{"_index":607,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{},"miscellaneous/variables.html":{}}}],["gsi_sprint_name",{"_index":606,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["gsi_username",{"_index":933,"title":{},"body":{"classes/MockService.html":{},"miscellaneous/variables.html":{}}}],["gsi_username_name",{"_index":932,"title":{},"body":{"classes/MockService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["handling",{"_index":615,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["hash",{"_index":1040,"title":{},"body":{"classes/MockService.html":{}}}],["hello",{"_index":292,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":965,"title":{},"body":{"classes/MockService.html":{}}}],["home/acer/desktop/blockchain/soundbeats/api",{"_index":1101,"title":{},"body":{"classes/MockService.html":{}}}],["httpport",{"_index":341,"title":{},"body":{"classes/Config.html":{}}}],["httpsport",{"_index":342,"title":{},"body":{"classes/Config.html":{}}}],["i.username?.s",{"_index":762,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["i.wallet.s",{"_index":761,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["i0vt9cz7j7uie2+cejgxlwtmrpjfaky1cdstcody",{"_index":937,"title":{},"body":{"classes/MockService.html":{}}}],["iauthmanager",{"_index":509,"title":{"interfaces/IAuthManager.html":{}},"body":{"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"classes/MockService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["iauthrecord",{"_index":557,"title":{"interfaces/IAuthRecord.html":{}},"body":{"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"classes/MockService.html":{},"coverage.html":{}}}],["iauthsession",{"_index":558,"title":{"interfaces/IAuthSession.html":{}},"body":{"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"classes/MockService.html":{},"coverage.html":{}}}],["id",{"_index":107,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"interfaces/ILeaderboard.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["identified",{"_index":529,"title":{},"body":{"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{}}}],["identifier",{"_index":691,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{},"coverage.html":{}}}],["idynamoresult",{"_index":445,"title":{"interfaces/IDynamoResult.html":{}},"body":{"classes/DynamoDbAccess.html":{},"interfaces/IDynamoResult.html":{},"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{},"coverage.html":{}}}],["ileaderboard",{"_index":564,"title":{"interfaces/ILeaderboard.html":{}},"body":{"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["image",{"_index":48,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["imageurl",{"_index":49,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["implementation",{"_index":792,"title":{},"body":{"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{}}}],["implemented",{"_index":863,"title":{},"body":{"classes/LeaderboardMemory.html":{}}}],["implements",{"_index":846,"title":{},"body":{"classes/LeaderboardMemory.html":{}}}],["import",{"_index":33,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"injectables/AppLogger.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/DynamoDbAccess.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IScore.html":{},"classes/LeaderboardDto.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["imports",{"_index":287,"title":{},"body":{"modules/AppModule.html":{}}}],["include",{"_index":103,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"injectables/AppLogger.html":{},"injectables/AppService.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/Config.html":{},"classes/DynamoDbAccess.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"interfaces/IDynamoResult.html":{},"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardDto.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indexname",{"_index":752,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{},"classes/MockService.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"injectables/AppLogger.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/Config.html":{},"classes/DynamoDbAccess.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"interfaces/IDynamoResult.html":{},"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardDto.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["inherited",{"_index":178,"title":{},"body":{"classes/AddLeaderboardResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardJsonFile.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["injectable",{"_index":180,"title":{"injectables/AppLogger.html":{},"injectables/AppService.html":{}},"body":{"injectables/AppLogger.html":{},"injectables/AppService.html":{},"coverage.html":{}}}],["injectables",{"_index":182,"title":{},"body":{"injectables/AppLogger.html":{},"injectables/AppService.html":{},"overview.html":{}}}],["instance",{"_index":1298,"title":{},"body":{"miscellaneous/functions.html":{}}}],["interface",{"_index":508,"title":{"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"interfaces/IDynamoResult.html":{},"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{}},"body":{"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"interfaces/IDynamoResult.html":{},"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LocalScoreCache.html":{},"coverage.html":{}}}],["interfaces",{"_index":510,"title":{},"body":{"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"interfaces/IDynamoResult.html":{},"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"overview.html":{}}}],["invalid",{"_index":1168,"title":{},"body":{"classes/MockService.html":{}}}],["iscore",{"_index":600,"title":{"interfaces/IScore.html":{}},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{},"coverage.html":{}}}],["isexpired",{"_index":643,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["isprint",{"_index":598,"title":{"interfaces/ISprint.html":{}},"body":{"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"coverage.html":{}}}],["it's",{"_index":731,"title":{},"body":{"interfaces/IScore.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LocalScoreCache.html":{}}}],["item",{"_index":772,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["items",{"_index":708,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["items.foreach(s",{"_index":709,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["json",{"_index":59,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/DynamoDbAccess.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/LeaderboardJsonFile.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["json.stringify(data",{"_index":1053,"title":{},"body":{"classes/MockService.html":{}}}],["json.stringify(error",{"_index":477,"title":{},"body":{"classes/DynamoDbAccess.html":{},"classes/MockService.html":{}}}],["key",{"_index":769,"title":{},"body":{"interfaces/IScore.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MockService.html":{}}}],["keyconditionexpression",{"_index":753,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["keyfilepath",{"_index":340,"title":{},"body":{"classes/Config.html":{}}}],["keypair",{"_index":1002,"title":{},"body":{"classes/MockService.html":{}}}],["keypair.export",{"_index":1024,"title":{},"body":{"classes/MockService.html":{}}}],["keypair.tosuiaddress",{"_index":1025,"title":{},"body":{"classes/MockService.html":{}}}],["keys",{"_index":1061,"title":{},"body":{"classes/MockService.html":{}}}],["keys.messagetosign",{"_index":1110,"title":{},"body":{"classes/MockService.html":{}}}],["keys.sessionid",{"_index":1108,"title":{},"body":{"classes/MockService.html":{}}}],["keys_only",{"_index":1069,"title":{},"body":{"classes/MockService.html":{}}}],["keyschema",{"_index":1037,"title":{},"body":{"classes/MockService.html":{}}}],["keytype",{"_index":1039,"title":{},"body":{"classes/MockService.html":{}}}],["lastrefresh",{"_index":625,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["later",{"_index":1141,"title":{},"body":{"classes/MockService.html":{}}}],["lb",{"_index":1296,"title":{},"body":{"miscellaneous/functions.html":{}}}],["leaderboard",{"_index":99,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/ILeaderboard.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["leaderboard.ts",{"_index":1244,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["leaderboard_default_limit",{"_index":1199,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["leaderboarddto",{"_index":109,"title":{"classes/LeaderboardDto.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{}}}],["leaderboarddynamodb",{"_index":1226,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["leaderboardjsonfile",{"_index":790,"title":{"classes/LeaderboardJsonFile.html":{}},"body":{"classes/LeaderboardJsonFile.html":{},"coverage.html":{}}}],["leaderboardmap",{"_index":801,"title":{},"body":{"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{}}}],["leaderboardmemory",{"_index":799,"title":{"classes/LeaderboardMemory.html":{}},"body":{"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"coverage.html":{}}}],["leaderboardmemory:10",{"_index":808,"title":{},"body":{"classes/LeaderboardJsonFile.html":{}}}],["leaderboardmemory:17",{"_index":812,"title":{},"body":{"classes/LeaderboardJsonFile.html":{}}}],["leaderboardmemory:26",{"_index":818,"title":{},"body":{"classes/LeaderboardJsonFile.html":{}}}],["leaderboardmemory:56",{"_index":814,"title":{},"body":{"classes/LeaderboardJsonFile.html":{}}}],["leaderboardmemory:61",{"_index":817,"title":{},"body":{"classes/LeaderboardJsonFile.html":{}}}],["leaderboardmemory:66",{"_index":819,"title":{},"body":{"classes/LeaderboardJsonFile.html":{}}}],["leaderboardmemory:70",{"_index":820,"title":{},"body":{"classes/LeaderboardJsonFile.html":{}}}],["leaderboardmemory:9",{"_index":807,"title":{},"body":{"classes/LeaderboardJsonFile.html":{}}}],["legend",{"_index":267,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["len",{"_index":1294,"title":{},"body":{"miscellaneous/functions.html":{}}}],["level",{"_index":140,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["license",{"_index":1335,"title":{},"body":{"properties.html":{}}}],["limit",{"_index":105,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardDto.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["list",{"_index":70,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/ILeaderboard.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["listenport",{"_index":337,"title":{},"body":{"classes/Config.html":{}}}],["literal",{"_index":869,"title":{},"body":{"classes/LocalScoreCache.html":{},"classes/MockService.html":{}}}],["local",{"_index":664,"title":{},"body":{"interfaces/IScore.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LocalScoreCache.html":{}}}],["localscorecache",{"_index":623,"title":{"classes/LocalScoreCache.html":{}},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{},"coverage.html":{}}}],["localscorecache(300",{"_index":1342,"title":{},"body":{"miscellaneous/variables.html":{}}}],["localscorecache_default",{"_index":747,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["localscorecache_sprint",{"_index":748,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["log",{"_index":199,"title":{},"body":{"injectables/AppLogger.html":{},"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["log(message",{"_index":219,"title":{},"body":{"injectables/AppLogger.html":{}}}],["logger",{"_index":190,"title":{},"body":{"injectables/AppLogger.html":{}}}],["logging",{"_index":613,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["login",{"_index":24,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["login.extradata.username",{"_index":1123,"title":{},"body":{"classes/MockService.html":{}}}],["logs",{"_index":184,"title":{},"body":{"injectables/AppLogger.html":{}}}],["logs/${filename",{"_index":262,"title":{},"body":{"injectables/AppLogger.html":{}}}],["main",{"_index":1169,"title":{},"body":{"classes/MockService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["make",{"_index":1027,"title":{},"body":{"classes/MockService.html":{}}}],["map",{"_index":806,"title":{},"body":{"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{}}}],["match",{"_index":987,"title":{},"body":{"classes/MockService.html":{}}}],["matches",{"_index":1004,"title":{},"body":{"classes/MockService.html":{}}}],["matching",{"_index":176,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"injectables/AppLogger.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/Config.html":{},"classes/DynamoDbAccess.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"interfaces/IDynamoResult.html":{},"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardDto.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.floor(date.now",{"_index":1097,"title":{},"body":{"classes/MockService.html":{}}}],["math.floor(date.now()/1000",{"_index":622,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["max",{"_index":101,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/ILeaderboard.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["max_json_length",{"_index":1201,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["max_nft_name_length",{"_index":1202,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["max_signature_length",{"_index":1203,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["max_string_length",{"_index":1204,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["max_url_length",{"_index":1205,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["max_username_length",{"_index":1206,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["max_wallet_length",{"_index":1207,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["memory",{"_index":841,"title":{},"body":{"classes/LeaderboardMemory.html":{}}}],["message",{"_index":89,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"injectables/AppLogger.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"miscellaneous/functions.html":{}}}],["messagetosign",{"_index":153,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["message}\\n",{"_index":246,"title":{},"body":{"injectables/AppLogger.html":{}}}],["metadata",{"_index":1273,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":193,"title":{},"body":{"injectables/AppLogger.html":{},"injectables/AppService.html":{},"classes/Config.html":{},"classes/DynamoDbAccess.html":{},"interfaces/IAuthManager.html":{},"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MockService.html":{}}}],["mint",{"_index":1012,"title":{},"body":{"classes/MockService.html":{},"index.html":{}}}],["mintbeatmapsnftdto",{"_index":53,"title":{"classes/MintBeatmapsNftDto.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{},"index.html":{}}}],["mintbeatsnftdto",{"_index":43,"title":{"classes/MintBeatsNftDto.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{},"index.html":{}}}],["minted",{"_index":50,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["mintnftresponsedto",{"_index":66,"title":{"classes/MintNftResponseDto.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{},"index.html":{}}}],["mints",{"_index":1311,"title":{},"body":{"index.html":{}}}],["minttokendto",{"_index":61,"title":{"classes/MintTokenDto.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{},"index.html":{}}}],["minttokenresponsedto",{"_index":73,"title":{"classes/MintTokenResponseDto.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{},"index.html":{}}}],["miscellaneous",{"_index":1283,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mnemonicphrase",{"_index":324,"title":{},"body":{"classes/Config.html":{}}}],["mockservice",{"_index":894,"title":{"classes/MockService.html":{}},"body":{"classes/MockService.html":{},"coverage.html":{}}}],["module",{"_index":263,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["modules",{"_index":265,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{}}}],["more",{"_index":845,"title":{},"body":{"classes/LeaderboardMemory.html":{}}}],["move",{"_index":991,"title":{},"body":{"classes/MockService.html":{}}}],["msg",{"_index":1096,"title":{},"body":{"classes/MockService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["msghash",{"_index":945,"title":{},"body":{"classes/MockService.html":{}}}],["mysten/sui.js",{"_index":1259,"title":{},"body":{"dependencies.html":{}}}],["mysten/sui.js/keypairs/ed25519",{"_index":927,"title":{},"body":{"classes/MockService.html":{}}}],["n",{"_index":253,"title":{},"body":{"injectables/AppLogger.html":{},"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{},"classes/MockService.html":{}}}],["n=0",{"_index":651,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["name",{"_index":44,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"injectables/AppLogger.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/Config.html":{},"classes/DynamoDbAccess.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IAuthManager.html":{},"interfaces/ILeaderboard.html":{},"classes/LeaderboardDto.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"miscellaneous/functions.html":{}}}],["necessary",{"_index":966,"title":{},"body":{"classes/MockService.html":{}}}],["need",{"_index":132,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["nestjs/common",{"_index":226,"title":{},"body":{"injectables/AppLogger.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":283,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1263,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":1264,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":35,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"dependencies.html":{}}}],["network",{"_index":39,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IScore.html":{},"classes/LeaderboardDto.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"miscellaneous/functions.html":{}}}],["new",{"_index":258,"title":{},"body":{"injectables/AppLogger.html":{},"classes/DynamoDbAccess.html":{},"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MockService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newsuiwallet",{"_index":915,"title":{},"body":{"classes/MockService.html":{}}}],["newsuiwallet.trim",{"_index":986,"title":{},"body":{"classes/MockService.html":{}}}],["next",{"_index":1152,"title":{},"body":{"classes/MockService.html":{}}}],["nft",{"_index":45,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["nft.name",{"_index":1018,"title":{},"body":{"classes/MockService.html":{}}}],["nft.url",{"_index":1020,"title":{},"body":{"classes/MockService.html":{}}}],["nftbalances",{"_index":1010,"title":{},"body":{"classes/MockService.html":{}}}],["nftbalances.nfts.foreach(async",{"_index":1016,"title":{},"body":{"classes/MockService.html":{}}}],["nfts",{"_index":81,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"index.html":{}}}],["noncetoken",{"_index":169,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["normally",{"_index":170,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["northeast",{"_index":935,"title":{},"body":{"classes/MockService.html":{}}}],["notfound",{"_index":985,"title":{},"body":{"classes/MockService.html":{}}}],["now",{"_index":580,"title":{},"body":{"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LocalScoreCache.html":{}}}],["null",{"_index":223,"title":{},"body":{"injectables/AppLogger.html":{},"classes/DynamoDbAccess.html":{},"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MockService.html":{}}}],["number",{"_index":26,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/Config.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardDto.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["oauth",{"_index":166,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["oauthtoken",{"_index":167,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["object.values(this.data).slice(0",{"_index":637,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["ok",{"_index":693,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["old",{"_index":988,"title":{},"body":{"classes/MockService.html":{}}}],["one",{"_index":582,"title":{},"body":{"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LocalScoreCache.html":{},"classes/MockService.html":{},"index.html":{}}}],["operation",{"_index":142,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["optional",{"_index":106,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"injectables/AppLogger.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/Config.html":{},"classes/DynamoDbAccess.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IAuthManager.html":{},"interfaces/ILeaderboard.html":{},"classes/LeaderboardDto.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":1068,"title":{},"body":{"classes/MockService.html":{}}}],["oreate",{"_index":1325,"title":{},"body":{"index.html":{}}}],["original",{"_index":88,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["originbyte/js",{"_index":1267,"title":{},"body":{"dependencies.html":{}}}],["otherwise",{"_index":972,"title":{},"body":{"classes/MockService.html":{}}}],["out",{"_index":278,"title":{},"body":{"modules/AppModule.html":{},"classes/LeaderboardMemory.html":{},"overview.html":{}}}],["output",{"_index":636,"title":{},"body":{"interfaces/IScore.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MockService.html":{}}}],["output.failurereason",{"_index":957,"title":{},"body":{"classes/MockService.html":{}}}],["output.fromcache",{"_index":669,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["output.score",{"_index":658,"title":{},"body":{"interfaces/IScore.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{}}}],["output.scores",{"_index":667,"title":{},"body":{"interfaces/IScore.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{}}}],["output.scores.length",{"_index":860,"title":{},"body":{"classes/LeaderboardMemory.html":{}}}],["output.scores.push",{"_index":859,"title":{},"body":{"classes/LeaderboardMemory.html":{}}}],["output.scores.slice(0",{"_index":861,"title":{},"body":{"classes/LeaderboardMemory.html":{}}}],["output.scores.sort((a",{"_index":674,"title":{},"body":{"interfaces/IScore.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{}}}],["output.sort((a",{"_index":638,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["output.status",{"_index":984,"title":{},"body":{"classes/MockService.html":{}}}],["output.success",{"_index":961,"title":{},"body":{"classes/MockService.html":{}}}],["output.suiwallet",{"_index":1029,"title":{},"body":{"classes/MockService.html":{}}}],["output.username",{"_index":660,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["output.wallet",{"_index":962,"title":{},"body":{"classes/MockService.html":{}}}],["output1",{"_index":1148,"title":{},"body":{"classes/MockService.html":{}}}],["output2",{"_index":1156,"title":{},"body":{"classes/MockService.html":{}}}],["output3a",{"_index":1163,"title":{},"body":{"classes/MockService.html":{}}}],["output3b",{"_index":1165,"title":{},"body":{"classes/MockService.html":{}}}],["overview",{"_index":1331,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owned",{"_index":82,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"index.html":{}}}],["package",{"_index":1258,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":561,"title":{},"body":{"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"interfaces/ILeaderboard.html":{},"interfaces/ISprint.html":{}}}],["parameters",{"_index":204,"title":{},"body":{"injectables/AppLogger.html":{},"classes/Config.html":{},"classes/DynamoDbAccess.html":{},"interfaces/IAuthManager.html":{},"interfaces/ILeaderboard.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MockService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":434,"title":{},"body":{"classes/DynamoDbAccess.html":{},"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{},"classes/MockService.html":{}}}],["parseint(a.score.n",{"_index":759,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["parseint(a.score.n)).slice(0",{"_index":676,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["parseint(b.score.n",{"_index":675,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["parseint(data.tostring",{"_index":836,"title":{},"body":{"classes/LeaderboardJsonFile.html":{}}}],["parseint(i.score.n",{"_index":763,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["parseint(output.score.tostring",{"_index":862,"title":{},"body":{"classes/LeaderboardMemory.html":{}}}],["parseint(process.env.http_port",{"_index":420,"title":{},"body":{"classes/Config.html":{}}}],["parseint(process.env.https_port",{"_index":421,"title":{},"body":{"classes/Config.html":{}}}],["parseint(result.data.score.n",{"_index":659,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["parseint(s.active.n",{"_index":714,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["parseint(s.enddate.n",{"_index":713,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["parseint(s.startdate.n",{"_index":712,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["parseint(score.tostring",{"_index":677,"title":{},"body":{"interfaces/IScore.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{}}}],["parseint(sprint.data.active.n",{"_index":704,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["parseint(sprint.data.enddate.n",{"_index":706,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["parseint(sprint.data.startdate.n",{"_index":705,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["parseint(sprint.enddate.n",{"_index":733,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["partition",{"_index":1041,"title":{},"body":{"classes/MockService.html":{}}}],["path",{"_index":826,"title":{},"body":{"classes/LeaderboardJsonFile.html":{}}}],["persists",{"_index":800,"title":{},"body":{"classes/LeaderboardJsonFile.html":{}}}],["player",{"_index":139,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["post",{"_index":1306,"title":{},"body":{"index.html":{}}}],["pred",{"_index":1293,"title":{},"body":{"miscellaneous/functions.html":{}}}],["present",{"_index":29,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["private",{"_index":191,"title":{},"body":{"injectables/AppLogger.html":{},"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{},"index.html":{}}}],["privatekey",{"_index":998,"title":{},"body":{"classes/MockService.html":{}}}],["process.env.aws_access_key",{"_index":451,"title":{},"body":{"classes/DynamoDbAccess.html":{},"classes/MockService.html":{}}}],["process.env.aws_access_secret",{"_index":453,"title":{},"body":{"classes/DynamoDbAccess.html":{},"classes/MockService.html":{}}}],["process.env.aws_region",{"_index":455,"title":{},"body":{"classes/DynamoDbAccess.html":{},"classes/MockService.html":{}}}],["process.env.beatmaps_nft_owner_cap",{"_index":401,"title":{},"body":{"classes/Config.html":{}}}],["process.env.beatmaps_nft_package_id",{"_index":398,"title":{},"body":{"classes/Config.html":{}}}],["process.env.beats_coin_package_id",{"_index":396,"title":{},"body":{"classes/Config.html":{}}}],["process.env.beats_nft_owner_cap",{"_index":400,"title":{},"body":{"classes/Config.html":{}}}],["process.env.beats_nft_package_id",{"_index":397,"title":{},"body":{"classes/Config.html":{}}}],["process.env.cert_file_path",{"_index":418,"title":{},"body":{"classes/Config.html":{}}}],["process.env.coin_cap",{"_index":402,"title":{},"body":{"classes/Config.html":{}}}],["process.env.dbtable_name_auth",{"_index":405,"title":{},"body":{"classes/Config.html":{},"classes/MockService.html":{}}}],["process.env.dbtable_name_auth_session",{"_index":407,"title":{},"body":{"classes/Config.html":{},"classes/MockService.html":{}}}],["process.env.dbtable_name_scores",{"_index":404,"title":{},"body":{"classes/Config.html":{},"miscellaneous/variables.html":{}}}],["process.env.dbtable_name_sprints",{"_index":403,"title":{},"body":{"classes/Config.html":{},"miscellaneous/variables.html":{}}}],["process.env.game_server_domain",{"_index":408,"title":{},"body":{"classes/Config.html":{}}}],["process.env.key_file_path",{"_index":419,"title":{},"body":{"classes/Config.html":{}}}],["process.env.mnemonic_phrase",{"_index":395,"title":{},"body":{"classes/Config.html":{}}}],["process.env.sui_network",{"_index":417,"title":{},"body":{"classes/Config.html":{}}}],["process.env.treasury_cap",{"_index":399,"title":{},"body":{"classes/Config.html":{}}}],["projection",{"_index":1064,"title":{},"body":{"classes/MockService.html":{}}}],["projectiontype",{"_index":1067,"title":{},"body":{"classes/MockService.html":{}}}],["promise",{"_index":435,"title":{},"body":{"classes/DynamoDbAccess.html":{},"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MockService.html":{},"miscellaneous/functions.html":{}}}],["promise((resolve",{"_index":464,"title":{},"body":{"classes/DynamoDbAccess.html":{},"classes/MockService.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"injectables/AppLogger.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/DynamoDbAccess.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"interfaces/IDynamoResult.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardDto.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"properties.html":{}}}],["property",{"_index":588,"title":{},"body":{"interfaces/ILeaderboard.html":{},"interfaces/ISprint.html":{}}}],["providers",{"_index":270,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["provisionedthroughput",{"_index":1046,"title":{},"body":{"classes/MockService.html":{}}}],["putitem",{"_index":428,"title":{},"body":{"classes/DynamoDbAccess.html":{}}}],["putitem(params",{"_index":438,"title":{},"body":{"classes/DynamoDbAccess.html":{}}}],["qkyr58upxyhqxdz7hyoacrr4uj43dt381ksbvbua",{"_index":939,"title":{},"body":{"classes/MockService.html":{}}}],["quantity",{"_index":51,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"index.html":{}}}],["query",{"_index":429,"title":{},"body":{"classes/DynamoDbAccess.html":{}}}],["query(params",{"_index":440,"title":{},"body":{"classes/DynamoDbAccess.html":{}}}],["range",{"_index":1042,"title":{},"body":{"classes/MockService.html":{}}}],["read",{"_index":1070,"title":{},"body":{"classes/MockService.html":{}}}],["readcapacityunits",{"_index":1047,"title":{},"body":{"classes/MockService.html":{}}}],["readdata",{"_index":1099,"title":{},"body":{"classes/MockService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["reason",{"_index":95,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["recipient",{"_index":46,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"index.html":{}}}],["record",{"_index":523,"title":{},"body":{"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{},"classes/MockService.html":{}}}],["record/check",{"_index":980,"title":{},"body":{"classes/MockService.html":{}}}],["records",{"_index":102,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"interfaces/ILeaderboard.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["reflect",{"_index":1272,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":866,"title":{},"body":{"classes/LocalScoreCache.html":{}}}],["refresh(scores",{"_index":649,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["refreshing",{"_index":740,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["region",{"_index":454,"title":{},"body":{"classes/DynamoDbAccess.html":{},"classes/MockService.html":{}}}],["register",{"_index":515,"title":{},"body":{"interfaces/IAuthManager.html":{},"classes/MockService.html":{}}}],["register(authid",{"_index":533,"title":{},"body":{"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{}}}],["register.status",{"_index":974,"title":{},"body":{"classes/MockService.html":{}}}],["register.suiwallet",{"_index":975,"title":{},"body":{"classes/MockService.html":{}}}],["registeraccountevm",{"_index":903,"title":{},"body":{"classes/MockService.html":{}}}],["registeraccountevm(evmwallet",{"_index":918,"title":{},"body":{"classes/MockService.html":{}}}],["reject",{"_index":465,"title":{},"body":{"classes/DynamoDbAccess.html":{},"classes/MockService.html":{}}}],["reject(error",{"_index":1051,"title":{},"body":{"classes/MockService.html":{}}}],["replace",{"_index":242,"title":{},"body":{"injectables/AppLogger.html":{}}}],["requestnftresponsedto",{"_index":72,"title":{"classes/RequestNFTResponseDto.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{}}}],["require(\"aws",{"_index":447,"title":{},"body":{"classes/DynamoDbAccess.html":{},"miscellaneous/variables.html":{}}}],["require('ethers",{"_index":1351,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reset",{"_index":277,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["resolve",{"_index":470,"title":{},"body":{"classes/DynamoDbAccess.html":{}}}],["resolve(error",{"_index":1080,"title":{},"body":{"classes/MockService.html":{}}}],["resolve(true",{"_index":1054,"title":{},"body":{"classes/MockService.html":{}}}],["response",{"_index":104,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["responsedtobase",{"_index":36,"title":{"classes/ResponseDtoBase.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{}}}],["responsedtobase:5",{"_index":179,"title":{},"body":{"classes/AddLeaderboardResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["restarted",{"_index":844,"title":{},"body":{"classes/LeaderboardMemory.html":{}}}],["result",{"_index":462,"title":{},"body":{"classes/DynamoDbAccess.html":{},"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["result.data",{"_index":657,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["result.data.active.n",{"_index":736,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["result.data.sort((a",{"_index":758,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["result.data.username.s",{"_index":661,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["result.data.username?.s",{"_index":679,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["result.success",{"_index":656,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["results",{"_index":175,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"injectables/AppLogger.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/Config.html":{},"classes/DynamoDbAccess.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"interfaces/IDynamoResult.html":{},"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardDto.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":117,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"injectables/AppLogger.html":{},"injectables/AppService.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/Config.html":{},"classes/DynamoDbAccess.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardDto.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":207,"title":{},"body":{"injectables/AppLogger.html":{},"injectables/AppService.html":{},"classes/Config.html":{},"classes/DynamoDbAccess.html":{},"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"interfaces/ILeaderboard.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MockService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["rimraf",{"_index":1275,"title":{},"body":{"dependencies.html":{}}}],["root",{"_index":1100,"title":{},"body":{"classes/MockService.html":{}}}],["rxjs",{"_index":1277,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":756,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{},"classes/MockService.html":{}}}],["s.sprintid.s",{"_index":711,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["same",{"_index":1308,"title":{},"body":{"index.html":{}}}],["scan",{"_index":475,"title":{},"body":{"classes/DynamoDbAccess.html":{},"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["scantable",{"_index":430,"title":{},"body":{"classes/DynamoDbAccess.html":{}}}],["scantable(tablename",{"_index":442,"title":{},"body":{"classes/DynamoDbAccess.html":{}}}],["score",{"_index":11,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardDto.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"index.html":{}}}],["score.tostring",{"_index":773,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["score:number",{"_index":746,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["scores",{"_index":114,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardDto.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["scores_table_name",{"_index":1255,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["scorestablename",{"_index":333,"title":{},"body":{"classes/Config.html":{}}}],["sdk",{"_index":448,"title":{},"body":{"classes/DynamoDbAccess.html":{},"classes/MockService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["sdk/clients/batch",{"_index":604,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["secret",{"_index":168,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["secretaccesskey",{"_index":452,"title":{},"body":{"classes/DynamoDbAccess.html":{},"classes/MockService.html":{}}}],["separate",{"_index":741,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["server/data",{"_index":1102,"title":{},"body":{"classes/MockService.html":{}}}],["service",{"_index":1143,"title":{},"body":{"classes/MockService.html":{}}}],["service.verifysignature2(session1.sessionid",{"_index":1149,"title":{},"body":{"classes/MockService.html":{}}}],["service.verifysignature2(session2.sessionid",{"_index":1157,"title":{},"body":{"classes/MockService.html":{}}}],["session",{"_index":148,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/Config.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["session.evmwallet",{"_index":979,"title":{},"body":{"classes/MockService.html":{}}}],["session.success",{"_index":1135,"title":{},"body":{"classes/MockService.html":{}}}],["session.suiwallet",{"_index":1136,"title":{},"body":{"classes/MockService.html":{}}}],["session1",{"_index":1144,"title":{},"body":{"classes/MockService.html":{}}}],["session1.messagetosign",{"_index":1150,"title":{},"body":{"classes/MockService.html":{}}}],["session2",{"_index":1154,"title":{},"body":{"classes/MockService.html":{}}}],["session2.messagetosign",{"_index":1158,"title":{},"body":{"classes/MockService.html":{}}}],["session3",{"_index":1161,"title":{},"body":{"classes/MockService.html":{}}}],["session3.messagetosign",{"_index":1164,"title":{},"body":{"classes/MockService.html":{}}}],["sessionid",{"_index":149,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["sessionid.length",{"_index":955,"title":{},"body":{"classes/MockService.html":{}}}],["sessionidinvalid",{"_index":958,"title":{},"body":{"classes/MockService.html":{}}}],["sessionkey",{"_index":1045,"title":{},"body":{"classes/MockService.html":{}}}],["set",{"_index":583,"title":{},"body":{"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LocalScoreCache.html":{},"classes/MockService.html":{}}}],["setactivesprint(sprintid",{"_index":715,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["sets",{"_index":542,"title":{},"body":{"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"interfaces/ILeaderboard.html":{},"interfaces/ISprint.html":{}}}],["setsuiwalletaddress",{"_index":516,"title":{},"body":{"interfaces/IAuthManager.html":{}}}],["setsuiwalletaddress(authid",{"_index":540,"title":{},"body":{"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{}}}],["sign",{"_index":151,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["sign(message",{"_index":1301,"title":{},"body":{"miscellaneous/functions.html":{}}}],["signature",{"_index":68,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["signature1",{"_index":1146,"title":{},"body":{"classes/MockService.html":{}}}],["signature2",{"_index":1155,"title":{},"body":{"classes/MockService.html":{}}}],["signature3",{"_index":1162,"title":{},"body":{"classes/MockService.html":{}}}],["signed",{"_index":86,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["signingaddress",{"_index":947,"title":{},"body":{"classes/MockService.html":{}}}],["signingaddress.tolowercase",{"_index":949,"title":{},"body":{"classes/MockService.html":{}}}],["song",{"_index":56,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["sort",{"_index":635,"title":{},"body":{"interfaces/IScore.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MockService.html":{}}}],["sorteditems",{"_index":757,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["sorteditems.map((i",{"_index":760,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["soundbeats",{"_index":1019,"title":{},"body":{"classes/MockService.html":{},"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"injectables/AppLogger.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/Config.html":{},"classes/DynamoDbAccess.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"interfaces/IDynamoResult.html":{},"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardDto.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["source.authid",{"_index":1001,"title":{},"body":{"classes/MockService.html":{}}}],["source.extradata.privatekey",{"_index":999,"title":{},"body":{"classes/MockService.html":{}}}],["specified",{"_index":154,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/ILeaderboard.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["sprint",{"_index":108,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardDto.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["sprint's",{"_index":587,"title":{},"body":{"interfaces/ILeaderboard.html":{},"interfaces/ISprint.html":{}}}],["sprint.active",{"_index":696,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["sprint.data",{"_index":703,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["sprint.enddate",{"_index":698,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["sprint.enddate.n",{"_index":732,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["sprint.sprintid.s",{"_index":734,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["sprint.startdate",{"_index":700,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["sprint.success",{"_index":702,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["sprintid",{"_index":119,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardDto.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"miscellaneous/functions.html":{}}}],["sprintid.length",{"_index":652,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["sprintid.trim().tolowercase",{"_index":688,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["sprintid_val",{"_index":754,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["sprintname",{"_index":815,"title":{},"body":{"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{}}}],["sprints",{"_index":597,"title":{},"body":{"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LocalScoreCache.html":{},"index.html":{}}}],["sprints.push",{"_index":710,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["sprints_table_name",{"_index":1256,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["sprintstablename",{"_index":332,"title":{},"body":{"classes/Config.html":{}}}],["src/.../app.controller.ts",{"_index":1340,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.ts",{"_index":1287,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../authmanagerdynamodb.ts",{"_index":1291,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../dynamodbaccess.ts",{"_index":1339,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../leaderboard.ts",{"_index":1288,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../leaderboarddynamodb.ts",{"_index":1290,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1286,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../sui.service.ts",{"_index":1341,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":1195,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.logger.ts",{"_index":183,"title":{},"body":{"injectables/AppLogger.html":{},"coverage.html":{}}}],["src/app.logger.ts:16",{"_index":220,"title":{},"body":{"injectables/AppLogger.html":{}}}],["src/app.logger.ts:22",{"_index":218,"title":{},"body":{"injectables/AppLogger.html":{}}}],["src/app.logger.ts:28",{"_index":222,"title":{},"body":{"injectables/AppLogger.html":{}}}],["src/app.logger.ts:34",{"_index":214,"title":{},"body":{"injectables/AppLogger.html":{}}}],["src/app.logger.ts:40",{"_index":211,"title":{},"body":{"injectables/AppLogger.html":{}}}],["src/app.logger.ts:48",{"_index":206,"title":{},"body":{"injectables/AppLogger.html":{}}}],["src/app.logger.ts:59",{"_index":209,"title":{},"body":{"injectables/AppLogger.html":{}}}],["src/app.logger.ts:9",{"_index":203,"title":{},"body":{"injectables/AppLogger.html":{}}}],["src/app.module.ts",{"_index":279,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":289,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":291,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.ts",{"_index":1217,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/auth/authmanagerdynamodb",{"_index":924,"title":{},"body":{"classes/MockService.html":{}}}],["src/auth/authmanagerdynamodb.ts",{"_index":1210,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/auth/iauthmanager",{"_index":928,"title":{},"body":{"classes/MockService.html":{}}}],["src/auth/iauthmanager.ts",{"_index":511,"title":{},"body":{"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"coverage.html":{}}}],["src/auth/iauthmanager.ts:31",{"_index":535,"title":{},"body":{"interfaces/IAuthManager.html":{}}}],["src/auth/iauthmanager.ts:39",{"_index":522,"title":{},"body":{"interfaces/IAuthManager.html":{}}}],["src/auth/iauthmanager.ts:46",{"_index":556,"title":{},"body":{"interfaces/IAuthManager.html":{}}}],["src/auth/iauthmanager.ts:54",{"_index":527,"title":{},"body":{"interfaces/IAuthManager.html":{}}}],["src/auth/iauthmanager.ts:59",{"_index":530,"title":{},"body":{"interfaces/IAuthManager.html":{}}}],["src/auth/iauthmanager.ts:62",{"_index":552,"title":{},"body":{"interfaces/IAuthManager.html":{}}}],["src/auth/iauthmanager.ts:72",{"_index":541,"title":{},"body":{"interfaces/IAuthManager.html":{}}}],["src/auth/iauthmanager.ts:80",{"_index":545,"title":{},"body":{"interfaces/IAuthManager.html":{}}}],["src/auth/iauthmanager.ts:83",{"_index":554,"title":{},"body":{"interfaces/IAuthManager.html":{}}}],["src/auth/iauthmanager.ts:86",{"_index":532,"title":{},"body":{"interfaces/IAuthManager.html":{}}}],["src/config",{"_index":925,"title":{},"body":{"classes/MockService.html":{}}}],["src/config.ts",{"_index":315,"title":{},"body":{"classes/Config.html":{},"coverage.html":{}}}],["src/config.ts:10",{"_index":353,"title":{},"body":{"classes/Config.html":{}}}],["src/config.ts:13",{"_index":355,"title":{},"body":{"classes/Config.html":{}}}],["src/config.ts:16",{"_index":357,"title":{},"body":{"classes/Config.html":{}}}],["src/config.ts:19",{"_index":359,"title":{},"body":{"classes/Config.html":{}}}],["src/config.ts:2",{"_index":347,"title":{},"body":{"classes/Config.html":{}}}],["src/config.ts:22",{"_index":361,"title":{},"body":{"classes/Config.html":{}}}],["src/config.ts:25",{"_index":363,"title":{},"body":{"classes/Config.html":{}}}],["src/config.ts:28",{"_index":365,"title":{},"body":{"classes/Config.html":{}}}],["src/config.ts:3",{"_index":343,"title":{},"body":{"classes/Config.html":{}}}],["src/config.ts:31",{"_index":367,"title":{},"body":{"classes/Config.html":{}}}],["src/config.ts:34",{"_index":369,"title":{},"body":{"classes/Config.html":{}}}],["src/config.ts:37",{"_index":371,"title":{},"body":{"classes/Config.html":{}}}],["src/config.ts:4",{"_index":349,"title":{},"body":{"classes/Config.html":{}}}],["src/config.ts:40",{"_index":373,"title":{},"body":{"classes/Config.html":{}}}],["src/config.ts:43",{"_index":375,"title":{},"body":{"classes/Config.html":{}}}],["src/config.ts:46",{"_index":377,"title":{},"body":{"classes/Config.html":{}}}],["src/config.ts:49",{"_index":379,"title":{},"body":{"classes/Config.html":{}}}],["src/config.ts:52",{"_index":381,"title":{},"body":{"classes/Config.html":{}}}],["src/config.ts:56",{"_index":345,"title":{},"body":{"classes/Config.html":{}}}],["src/config.ts:65",{"_index":383,"title":{},"body":{"classes/Config.html":{}}}],["src/config.ts:68",{"_index":385,"title":{},"body":{"classes/Config.html":{}}}],["src/config.ts:7",{"_index":351,"title":{},"body":{"classes/Config.html":{}}}],["src/config.ts:71",{"_index":387,"title":{},"body":{"classes/Config.html":{}}}],["src/config.ts:74",{"_index":389,"title":{},"body":{"classes/Config.html":{}}}],["src/config.ts:77",{"_index":391,"title":{},"body":{"classes/Config.html":{}}}],["src/dataaccess/dynamodbaccess.ts",{"_index":423,"title":{},"body":{"classes/DynamoDbAccess.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/dataaccess/dynamodbaccess.ts:112",{"_index":433,"title":{},"body":{"classes/DynamoDbAccess.html":{}}}],["src/dataaccess/dynamodbaccess.ts:17",{"_index":437,"title":{},"body":{"classes/DynamoDbAccess.html":{}}}],["src/dataaccess/dynamodbaccess.ts:40",{"_index":439,"title":{},"body":{"classes/DynamoDbAccess.html":{}}}],["src/dataaccess/dynamodbaccess.ts:6",{"_index":431,"title":{},"body":{"classes/DynamoDbAccess.html":{}}}],["src/dataaccess/dynamodbaccess.ts:62",{"_index":443,"title":{},"body":{"classes/DynamoDbAccess.html":{}}}],["src/dataaccess/dynamodbaccess.ts:89",{"_index":441,"title":{},"body":{"classes/DynamoDbAccess.html":{}}}],["src/dataaccess/idynamoresult.ts",{"_index":563,"title":{},"body":{"interfaces/IDynamoResult.html":{},"coverage.html":{}}}],["src/entity/req.entity.ts",{"_index":6,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{}}}],["src/entity/req.entity.ts:10",{"_index":886,"title":{},"body":{"classes/MintBeatsNftDto.html":{}}}],["src/entity/req.entity.ts:101",{"_index":1188,"title":{},"body":{"classes/VerifySignatureDto.html":{}}}],["src/entity/req.entity.ts:103",{"_index":1187,"title":{},"body":{"classes/VerifySignatureDto.html":{}}}],["src/entity/req.entity.ts:108",{"_index":1191,"title":{},"body":{"classes/VerifySignatureResponseDto.html":{}}}],["src/entity/req.entity.ts:110",{"_index":1189,"title":{},"body":{"classes/VerifySignatureResponseDto.html":{}}}],["src/entity/req.entity.ts:112",{"_index":1190,"title":{},"body":{"classes/VerifySignatureResponseDto.html":{}}}],["src/entity/req.entity.ts:119",{"_index":493,"title":{},"body":{"classes/GetLeaderboardDto.html":{}}}],["src/entity/req.entity.ts:12",{"_index":888,"title":{},"body":{"classes/MintBeatsNftDto.html":{}}}],["src/entity/req.entity.ts:121",{"_index":491,"title":{},"body":{"classes/GetLeaderboardDto.html":{}}}],["src/entity/req.entity.ts:123",{"_index":492,"title":{},"body":{"classes/GetLeaderboardDto.html":{}}}],["src/entity/req.entity.ts:128",{"_index":789,"title":{},"body":{"classes/LeaderboardDto.html":{}}}],["src/entity/req.entity.ts:130",{"_index":786,"title":{},"body":{"classes/LeaderboardDto.html":{}}}],["src/entity/req.entity.ts:132",{"_index":788,"title":{},"body":{"classes/LeaderboardDto.html":{}}}],["src/entity/req.entity.ts:134",{"_index":787,"title":{},"body":{"classes/LeaderboardDto.html":{}}}],["src/entity/req.entity.ts:139",{"_index":494,"title":{},"body":{"classes/GetLeaderboardResponseDto.html":{}}}],["src/entity/req.entity.ts:14",{"_index":885,"title":{},"body":{"classes/MintBeatsNftDto.html":{}}}],["src/entity/req.entity.ts:144",{"_index":22,"title":{},"body":{"classes/AddLeaderboardDto.html":{}}}],["src/entity/req.entity.ts:146",{"_index":25,"title":{},"body":{"classes/AddLeaderboardDto.html":{}}}],["src/entity/req.entity.ts:148",{"_index":28,"title":{},"body":{"classes/AddLeaderboardDto.html":{}}}],["src/entity/req.entity.ts:150",{"_index":32,"title":{},"body":{"classes/AddLeaderboardDto.html":{}}}],["src/entity/req.entity.ts:155",{"_index":177,"title":{},"body":{"classes/AddLeaderboardResponseDto.html":{}}}],["src/entity/req.entity.ts:16",{"_index":887,"title":{},"body":{"classes/MintBeatsNftDto.html":{}}}],["src/entity/req.entity.ts:160",{"_index":496,"title":{},"body":{"classes/GetLeaderboardSprintDto.html":{}}}],["src/entity/req.entity.ts:162",{"_index":495,"title":{},"body":{"classes/GetLeaderboardSprintDto.html":{}}}],["src/entity/req.entity.ts:167",{"_index":499,"title":{},"body":{"classes/GetLeaderboardSprintResponseDto.html":{}}}],["src/entity/req.entity.ts:169",{"_index":497,"title":{},"body":{"classes/GetLeaderboardSprintResponseDto.html":{}}}],["src/entity/req.entity.ts:171",{"_index":500,"title":{},"body":{"classes/GetLeaderboardSprintResponseDto.html":{}}}],["src/entity/req.entity.ts:173",{"_index":498,"title":{},"body":{"classes/GetLeaderboardSprintResponseDto.html":{}}}],["src/entity/req.entity.ts:180",{"_index":312,"title":{},"body":{"classes/CheckUsernameDto.html":{}}}],["src/entity/req.entity.ts:185",{"_index":313,"title":{},"body":{"classes/CheckUsernameResponseDto.html":{}}}],["src/entity/req.entity.ts:191",{"_index":482,"title":{},"body":{"classes/GetAccountDto.html":{}}}],["src/entity/req.entity.ts:193",{"_index":483,"title":{},"body":{"classes/GetAccountDto.html":{}}}],["src/entity/req.entity.ts:198",{"_index":486,"title":{},"body":{"classes/GetAccountResponseDto.html":{}}}],["src/entity/req.entity.ts:200",{"_index":487,"title":{},"body":{"classes/GetAccountResponseDto.html":{}}}],["src/entity/req.entity.ts:202",{"_index":484,"title":{},"body":{"classes/GetAccountResponseDto.html":{}}}],["src/entity/req.entity.ts:204",{"_index":485,"title":{},"body":{"classes/GetAccountResponseDto.html":{}}}],["src/entity/req.entity.ts:209",{"_index":1172,"title":{},"body":{"classes/StartAuthSessionDto.html":{}}}],["src/entity/req.entity.ts:21",{"_index":882,"title":{},"body":{"classes/MintBeatmapsNftDto.html":{}}}],["src/entity/req.entity.ts:214",{"_index":1174,"title":{},"body":{"classes/StartAuthSessionResponseDto.html":{}}}],["src/entity/req.entity.ts:216",{"_index":1173,"title":{},"body":{"classes/StartAuthSessionResponseDto.html":{}}}],["src/entity/req.entity.ts:218",{"_index":1175,"title":{},"body":{"classes/StartAuthSessionResponseDto.html":{}}}],["src/entity/req.entity.ts:223",{"_index":299,"title":{},"body":{"classes/AuthVerifyDto.html":{}}}],["src/entity/req.entity.ts:225",{"_index":300,"title":{},"body":{"classes/AuthVerifyDto.html":{}}}],["src/entity/req.entity.ts:227",{"_index":294,"title":{},"body":{"classes/AuthVerifyDto.html":{}}}],["src/entity/req.entity.ts:229",{"_index":296,"title":{},"body":{"classes/AuthVerifyDto.html":{}}}],["src/entity/req.entity.ts:23",{"_index":884,"title":{},"body":{"classes/MintBeatmapsNftDto.html":{}}}],["src/entity/req.entity.ts:231",{"_index":295,"title":{},"body":{"classes/AuthVerifyDto.html":{}}}],["src/entity/req.entity.ts:233",{"_index":297,"title":{},"body":{"classes/AuthVerifyDto.html":{}}}],["src/entity/req.entity.ts:235",{"_index":298,"title":{},"body":{"classes/AuthVerifyDto.html":{}}}],["src/entity/req.entity.ts:240",{"_index":304,"title":{},"body":{"classes/AuthVerifyResponseDto.html":{}}}],["src/entity/req.entity.ts:242",{"_index":305,"title":{},"body":{"classes/AuthVerifyResponseDto.html":{}}}],["src/entity/req.entity.ts:244",{"_index":301,"title":{},"body":{"classes/AuthVerifyResponseDto.html":{}}}],["src/entity/req.entity.ts:246",{"_index":302,"title":{},"body":{"classes/AuthVerifyResponseDto.html":{}}}],["src/entity/req.entity.ts:248",{"_index":303,"title":{},"body":{"classes/AuthVerifyResponseDto.html":{}}}],["src/entity/req.entity.ts:25",{"_index":883,"title":{},"body":{"classes/MintBeatmapsNftDto.html":{}}}],["src/entity/req.entity.ts:253",{"_index":1176,"title":{},"body":{"classes/UpdateUserLevelDto.html":{}}}],["src/entity/req.entity.ts:255",{"_index":1177,"title":{},"body":{"classes/UpdateUserLevelDto.html":{}}}],["src/entity/req.entity.ts:257",{"_index":1178,"title":{},"body":{"classes/UpdateUserLevelDto.html":{}}}],["src/entity/req.entity.ts:262",{"_index":1181,"title":{},"body":{"classes/UpdateUserOAuthDto.html":{}}}],["src/entity/req.entity.ts:264",{"_index":1180,"title":{},"body":{"classes/UpdateUserOAuthDto.html":{}}}],["src/entity/req.entity.ts:266",{"_index":1179,"title":{},"body":{"classes/UpdateUserOAuthDto.html":{}}}],["src/entity/req.entity.ts:268",{"_index":1182,"title":{},"body":{"classes/UpdateUserOAuthDto.html":{}}}],["src/entity/req.entity.ts:27",{"_index":878,"title":{},"body":{"classes/MintBeatmapsNftDto.html":{}}}],["src/entity/req.entity.ts:273",{"_index":1183,"title":{},"body":{"classes/UpdateUserOAuthResponseDto.html":{}}}],["src/entity/req.entity.ts:275",{"_index":1185,"title":{},"body":{"classes/UpdateUserOAuthResponseDto.html":{}}}],["src/entity/req.entity.ts:277",{"_index":1184,"title":{},"body":{"classes/UpdateUserOAuthResponseDto.html":{}}}],["src/entity/req.entity.ts:282",{"_index":503,"title":{},"body":{"classes/GetUserOAuthDto.html":{}}}],["src/entity/req.entity.ts:29",{"_index":879,"title":{},"body":{"classes/MintBeatmapsNftDto.html":{}}}],["src/entity/req.entity.ts:31",{"_index":880,"title":{},"body":{"classes/MintBeatmapsNftDto.html":{}}}],["src/entity/req.entity.ts:33",{"_index":881,"title":{},"body":{"classes/MintBeatmapsNftDto.html":{}}}],["src/entity/req.entity.ts:38",{"_index":891,"title":{},"body":{"classes/MintTokenDto.html":{}}}],["src/entity/req.entity.ts:40",{"_index":892,"title":{},"body":{"classes/MintTokenDto.html":{}}}],["src/entity/req.entity.ts:45",{"_index":501,"title":{},"body":{"classes/GetTokenBalanceDto.html":{}}}],["src/entity/req.entity.ts:5",{"_index":1171,"title":{},"body":{"classes/ResponseDtoBase.html":{}}}],["src/entity/req.entity.ts:50",{"_index":489,"title":{},"body":{"classes/GetBeatsNftsDto.html":{}}}],["src/entity/req.entity.ts:55",{"_index":890,"title":{},"body":{"classes/MintNftResponseDto.html":{}}}],["src/entity/req.entity.ts:57",{"_index":889,"title":{},"body":{"classes/MintNftResponseDto.html":{}}}],["src/entity/req.entity.ts:62",{"_index":1170,"title":{},"body":{"classes/RequestNFTResponseDto.html":{}}}],["src/entity/req.entity.ts:67",{"_index":893,"title":{},"body":{"classes/MintTokenResponseDto.html":{}}}],["src/entity/req.entity.ts:72",{"_index":502,"title":{},"body":{"classes/GetTokenBalanceResponseDto.html":{}}}],["src/entity/req.entity.ts:76",{"_index":310,"title":{},"body":{"classes/BeatsNftDto.html":{}}}],["src/entity/req.entity.ts:77",{"_index":311,"title":{},"body":{"classes/BeatsNftDto.html":{}}}],["src/entity/req.entity.ts:81",{"_index":309,"title":{},"body":{"classes/BeatmapsNftDto.html":{}}}],["src/entity/req.entity.ts:82",{"_index":308,"title":{},"body":{"classes/BeatmapsNftDto.html":{}}}],["src/entity/req.entity.ts:83",{"_index":306,"title":{},"body":{"classes/BeatmapsNftDto.html":{}}}],["src/entity/req.entity.ts:84",{"_index":307,"title":{},"body":{"classes/BeatmapsNftDto.html":{}}}],["src/entity/req.entity.ts:89",{"_index":490,"title":{},"body":{"classes/GetBeatsNftsResponseDto.html":{}}}],["src/entity/req.entity.ts:94",{"_index":488,"title":{},"body":{"classes/GetBeatmapsNftsResponseDto.html":{}}}],["src/entity/req.entity.ts:99",{"_index":1186,"title":{},"body":{"classes/VerifySignatureDto.html":{}}}],["src/leaderboard/ileaderboard.ts",{"_index":565,"title":{},"body":{"interfaces/ILeaderboard.html":{},"interfaces/ISprint.html":{},"coverage.html":{}}}],["src/leaderboard/ileaderboard.ts:17",{"_index":590,"title":{},"body":{"interfaces/ILeaderboard.html":{}}}],["src/leaderboard/ileaderboard.ts:26",{"_index":592,"title":{},"body":{"interfaces/ILeaderboard.html":{}}}],["src/leaderboard/ileaderboard.ts:35",{"_index":574,"title":{},"body":{"interfaces/ILeaderboard.html":{}}}],["src/leaderboard/ileaderboard.ts:46",{"_index":578,"title":{},"body":{"interfaces/ILeaderboard.html":{}}}],["src/leaderboard/ileaderboard.ts:53",{"_index":586,"title":{},"body":{"interfaces/ILeaderboard.html":{}}}],["src/leaderboard/ileaderboard.ts:60",{"_index":594,"title":{},"body":{"interfaces/ILeaderboard.html":{}}}],["src/leaderboard/ileaderboard.ts:67",{"_index":596,"title":{},"body":{"interfaces/ILeaderboard.html":{}}}],["src/leaderboard/leaderboard.ts",{"_index":1231,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/leaderboard/leaderboarddynamodb.ts",{"_index":601,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/leaderboard/leaderboarddynamodb.ts:27",{"_index":870,"title":{},"body":{"classes/LocalScoreCache.html":{}}}],["src/leaderboard/leaderboarddynamodb.ts:28",{"_index":871,"title":{},"body":{"classes/LocalScoreCache.html":{}}}],["src/leaderboard/leaderboarddynamodb.ts:29",{"_index":868,"title":{},"body":{"classes/LocalScoreCache.html":{}}}],["src/leaderboard/leaderboarddynamodb.ts:30",{"_index":867,"title":{},"body":{"classes/LocalScoreCache.html":{}}}],["src/leaderboard/leaderboarddynamodb.ts:39",{"_index":874,"title":{},"body":{"classes/LocalScoreCache.html":{}}}],["src/leaderboard/leaderboarddynamodb.ts:46",{"_index":872,"title":{},"body":{"classes/LocalScoreCache.html":{}}}],["src/leaderboard/leaderboarddynamodb.ts:50",{"_index":875,"title":{},"body":{"classes/LocalScoreCache.html":{}}}],["src/leaderboard/leaderboarddynamodb.ts:54",{"_index":877,"title":{},"body":{"classes/LocalScoreCache.html":{}}}],["src/leaderboard/leaderboarddynamodb.ts:64",{"_index":876,"title":{},"body":{"classes/LocalScoreCache.html":{}}}],["src/leaderboard/leaderboarddynamodb.ts:71",{"_index":873,"title":{},"body":{"classes/LocalScoreCache.html":{}}}],["src/leaderboard/leaderboardjsonfile.ts",{"_index":791,"title":{},"body":{"classes/LeaderboardJsonFile.html":{},"coverage.html":{}}}],["src/leaderboard/leaderboardjsonfile.ts:10",{"_index":805,"title":{},"body":{"classes/LeaderboardJsonFile.html":{}}}],["src/leaderboard/leaderboardjsonfile.ts:24",{"_index":811,"title":{},"body":{"classes/LeaderboardJsonFile.html":{}}}],["src/leaderboard/leaderboardjsonfile.ts:31",{"_index":809,"title":{},"body":{"classes/LeaderboardJsonFile.html":{}}}],["src/leaderboard/leaderboardmemory.ts",{"_index":840,"title":{},"body":{"classes/LeaderboardMemory.html":{},"coverage.html":{}}}],["src/leaderboard/leaderboardmemory.ts:10",{"_index":847,"title":{},"body":{"classes/LeaderboardMemory.html":{}}}],["src/leaderboard/leaderboardmemory.ts:17",{"_index":852,"title":{},"body":{"classes/LeaderboardMemory.html":{}}}],["src/leaderboard/leaderboardmemory.ts:26",{"_index":853,"title":{},"body":{"classes/LeaderboardMemory.html":{}}}],["src/leaderboard/leaderboardmemory.ts:43",{"_index":849,"title":{},"body":{"classes/LeaderboardMemory.html":{}}}],["src/leaderboard/leaderboardmemory.ts:56",{"_index":850,"title":{},"body":{"classes/LeaderboardMemory.html":{}}}],["src/leaderboard/leaderboardmemory.ts:61",{"_index":851,"title":{},"body":{"classes/LeaderboardMemory.html":{}}}],["src/leaderboard/leaderboardmemory.ts:66",{"_index":854,"title":{},"body":{"classes/LeaderboardMemory.html":{}}}],["src/leaderboard/leaderboardmemory.ts:70",{"_index":855,"title":{},"body":{"classes/LeaderboardMemory.html":{}}}],["src/leaderboard/leaderboardmemory.ts:9",{"_index":848,"title":{},"body":{"classes/LeaderboardMemory.html":{}}}],["src/main.ts",{"_index":1233,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/sui.service.ts",{"_index":1234,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":122,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/ILeaderboard.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"index.html":{}}}],["startauthsession",{"_index":517,"title":{},"body":{"interfaces/IAuthManager.html":{}}}],["startauthsession(evmwallet",{"_index":544,"title":{},"body":{"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{}}}],["startauthsessiondto",{"_index":144,"title":{"classes/StartAuthSessionDto.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{},"index.html":{}}}],["startauthsessionresponsedto",{"_index":146,"title":{"classes/StartAuthSessionResponseDto.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{},"index.html":{}}}],["startdate",{"_index":124,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardDto.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["startdate.tostring",{"_index":782,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["started",{"_index":1304,"title":{"index.html":{}},"body":{}}],["starts",{"_index":546,"title":{},"body":{"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{}}}],["starttimestamp",{"_index":559,"title":{},"body":{"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{}}}],["statements",{"_index":1194,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":316,"title":{},"body":{"classes/Config.html":{}}}],["status",{"_index":143,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["step",{"_index":797,"title":{},"body":{"classes/LeaderboardJsonFile.html":{}}}],["still",{"_index":795,"title":{},"body":{"classes/LeaderboardJsonFile.html":{}}}],["store",{"_index":1033,"title":{},"body":{"classes/MockService.html":{}}}],["stored",{"_index":1005,"title":{},"body":{"classes/MockService.html":{}}}],["stores",{"_index":793,"title":{},"body":{"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{}}}],["str",{"_index":1347,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string",{"_index":15,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"injectables/AppLogger.html":{},"injectables/AppService.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/Config.html":{},"classes/DynamoDbAccess.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardDto.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["strtobytearray",{"_index":1237,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["success",{"_index":141,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/DynamoDbAccess.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"interfaces/IDynamoResult.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["successful",{"_index":619,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["sui",{"_index":135,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"index.html":{}}}],["sui.service",{"_index":286,"title":{},"body":{"modules/AppModule.html":{}}}],["sui/evm",{"_index":1321,"title":{},"body":{"index.html":{}}}],["suiaddress",{"_index":165,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["suinetwork",{"_index":338,"title":{},"body":{"classes/Config.html":{}}}],["suiservice",{"_index":275,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"overview.html":{}}}],["suiwallet",{"_index":137,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["suiwallet.address",{"_index":1032,"title":{},"body":{"classes/MockService.html":{}}}],["suiwallet.privatekey",{"_index":1035,"title":{},"body":{"classes/MockService.html":{}}}],["suiwallet1",{"_index":1124,"title":{},"body":{"classes/MockService.html":{}}}],["suiwallet2",{"_index":1126,"title":{},"body":{"classes/MockService.html":{}}}],["super(context",{"_index":228,"title":{},"body":{"injectables/AppLogger.html":{}}}],["super(network",{"_index":821,"title":{},"body":{"classes/LeaderboardJsonFile.html":{}}}],["super.addleaderboardscore(wallet",{"_index":823,"title":{},"body":{"classes/LeaderboardJsonFile.html":{}}}],["super.debug(message",{"_index":236,"title":{},"body":{"injectables/AppLogger.html":{}}}],["super.error(message",{"_index":232,"title":{},"body":{"injectables/AppLogger.html":{}}}],["super.log(message",{"_index":230,"title":{},"body":{"injectables/AppLogger.html":{}}}],["super.warn(message",{"_index":234,"title":{},"body":{"injectables/AppLogger.html":{}}}],["support",{"_index":1328,"title":{},"body":{"modules.html":{}}}],["sure",{"_index":1028,"title":{},"body":{"classes/MockService.html":{}}}],["svg",{"_index":1329,"title":{},"body":{"modules.html":{}}}],["t",{"_index":414,"title":{},"body":{"classes/Config.html":{}}}],["table",{"_index":476,"title":{},"body":{"classes/DynamoDbAccess.html":{},"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{},"classes/MockService.html":{},"coverage.html":{}}}],["tablename",{"_index":444,"title":{},"body":{"classes/DynamoDbAccess.html":{},"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{},"classes/MockService.html":{},"miscellaneous/functions.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1257,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":212,"title":{},"body":{"injectables/AppLogger.html":{}}}],["tag}][${new",{"_index":239,"title":{},"body":{"injectables/AppLogger.html":{}}}],["taken",{"_index":158,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["test",{"_index":930,"title":{},"body":{"classes/MockService.html":{},"miscellaneous/variables.html":{}}}],["test/.../sign.ts",{"_index":1289,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["test/.../test",{"_index":1285,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["test/sign.ts",{"_index":1238,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["test/test",{"_index":895,"title":{},"body":{"classes/MockService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["testing",{"_index":796,"title":{},"body":{"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{}}}],["textencoder",{"_index":1349,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this._checkcreatelogfile",{"_index":229,"title":{},"body":{"injectables/AppLogger.html":{}}}],["this._dataaccess_getactivesprints",{"_index":725,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["this._dataaccess_getscore(wallet",{"_index":655,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["this._dataaccess_getsprint(sprintid",{"_index":701,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["this._dataaccess_putscore(wallet",{"_index":682,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["this._dataaccess_putsprint",{"_index":720,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["this._dataaccess_putsprint(sprintid",{"_index":699,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["this._dataaccess_scansprints",{"_index":707,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["this._getactivesprintname",{"_index":653,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["this._getlogfilename",{"_index":249,"title":{},"body":{"injectables/AppLogger.html":{}}}],["this._getscoresfromcache(localscorecache_default",{"_index":666,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["this._getscoresfromcache(localscorecache_sprint",{"_index":672,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["this._iscurrentsprint(sprintid",{"_index":671,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["this._moveassets(authrecord",{"_index":995,"title":{},"body":{"classes/MockService.html":{}}}],["this._readfromfiles",{"_index":822,"title":{},"body":{"classes/LeaderboardJsonFile.html":{}}}],["this._scanforscores(sprintid",{"_index":673,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["this._updatecacheitem(wallet",{"_index":685,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["this._verifyevmsignature(walletpubkey",{"_index":960,"title":{},"body":{"classes/MockService.html":{}}}],["this._verifysessionid(sessionid",{"_index":956,"title":{},"body":{"classes/MockService.html":{}}}],["this._writeentry('debug",{"_index":237,"title":{},"body":{"injectables/AppLogger.html":{}}}],["this._writeentry('error",{"_index":233,"title":{},"body":{"injectables/AppLogger.html":{}}}],["this._writeentry('info",{"_index":231,"title":{},"body":{"injectables/AppLogger.html":{}}}],["this._writeentry('warn",{"_index":235,"title":{},"body":{"injectables/AppLogger.html":{}}}],["this._writetofile(wallet",{"_index":824,"title":{},"body":{"classes/LeaderboardJsonFile.html":{}}}],["this.addleaderboardscore(wallet",{"_index":684,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["this.ageseconds",{"_index":644,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["this.authmanager",{"_index":954,"title":{},"body":{"classes/MockService.html":{}}}],["this.authmanager.getauthrecord(authid",{"_index":983,"title":{},"body":{"classes/MockService.html":{}}}],["this.authmanager.getauthrecord(evmwallet",{"_index":968,"title":{},"body":{"classes/MockService.html":{}}}],["this.authmanager.getauthsession(sessionid",{"_index":978,"title":{},"body":{"classes/MockService.html":{}}}],["this.authmanager.register(evmwallet",{"_index":1034,"title":{},"body":{"classes/MockService.html":{}}}],["this.authmanager.setsuiwalletaddress(authrecord.authid",{"_index":996,"title":{},"body":{"classes/MockService.html":{}}}],["this.authmanager.updateauthrecord(evmwallet",{"_index":971,"title":{},"body":{"classes/MockService.html":{}}}],["this.authmanager.updateauthsession(sessionid",{"_index":964,"title":{},"body":{"classes/MockService.html":{}}}],["this.changesuiwalletaddress(evmwallet",{"_index":981,"title":{},"body":{"classes/MockService.html":{}}}],["this.count",{"_index":630,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["this.createwallet",{"_index":1031,"title":{},"body":{"classes/MockService.html":{}}}],["this.data",{"_index":633,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["this.data[wallet",{"_index":646,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["this.data[wallet].score",{"_index":647,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["this.data[wallet].username",{"_index":648,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["this.dynamodb",{"_index":456,"title":{},"body":{"classes/DynamoDbAccess.html":{}}}],["this.dynamodb.deleteitem(params",{"_index":481,"title":{},"body":{"classes/DynamoDbAccess.html":{},"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["this.dynamodb.getitem",{"_index":768,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["this.dynamodb.getitem(params",{"_index":466,"title":{},"body":{"classes/DynamoDbAccess.html":{}}}],["this.dynamodb.putitem",{"_index":771,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["this.dynamodb.putitem(params",{"_index":472,"title":{},"body":{"classes/DynamoDbAccess.html":{}}}],["this.dynamodb.query(params",{"_index":480,"title":{},"body":{"classes/DynamoDbAccess.html":{},"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["this.dynamodb.scan(params",{"_index":473,"title":{},"body":{"classes/DynamoDbAccess.html":{}}}],["this.dynamodb.scantable(config.sprintstablename",{"_index":766,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["this.expirationseconds",{"_index":629,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["this.getsprint(activesprintid",{"_index":719,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["this.getsprint(sprintid",{"_index":694,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["this.gettokenbalance(walletaddr",{"_index":1009,"title":{},"body":{"classes/MockService.html":{}}}],["this.getusernfts(walletaddr",{"_index":1011,"title":{},"body":{"classes/MockService.html":{}}}],["this.lastrefresh",{"_index":632,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["this.leaderboardmap",{"_index":856,"title":{},"body":{"classes/LeaderboardMemory.html":{}}}],["this.leaderboardmap.foreach((value",{"_index":858,"title":{},"body":{"classes/LeaderboardMemory.html":{}}}],["this.leaderboardmap.get(wallet",{"_index":857,"title":{},"body":{"classes/LeaderboardMemory.html":{}}}],["this.leaderboardmap.get(wallet).tostring",{"_index":829,"title":{},"body":{"classes/LeaderboardJsonFile.html":{}}}],["this.leaderboardmap.has(wallet",{"_index":825,"title":{},"body":{"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{}}}],["this.leaderboardmap.set(wallet",{"_index":835,"title":{},"body":{"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{}}}],["this.mintbeatsnfts(dest",{"_index":1017,"title":{},"body":{"classes/MockService.html":{}}}],["this.minttokens(dest",{"_index":1014,"title":{},"body":{"classes/MockService.html":{}}}],["this.network",{"_index":654,"title":{},"body":{"interfaces/IScore.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{}}}],["this.packageid}::beats::beats",{"_index":1007,"title":{},"body":{"classes/MockService.html":{}}}],["this.registeraccountevm(evmwallet",{"_index":973,"title":{},"body":{"classes/MockService.html":{}}}],["this.web3.eth.accounts.recover(msghash",{"_index":1022,"title":{},"body":{"classes/MockService.html":{}}}],["this.web3.utils.soliditysha3(message",{"_index":1021,"title":{},"body":{"classes/MockService.html":{}}}],["this.writestream",{"_index":254,"title":{},"body":{"injectables/AppLogger.html":{}}}],["this.writestream.write",{"_index":238,"title":{},"body":{"injectables/AppLogger.html":{}}}],["thread",{"_index":742,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["throw",{"_index":689,"title":{},"body":{"interfaces/IScore.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MockService.html":{}}}],["time",{"_index":245,"title":{},"body":{"injectables/AppLogger.html":{}}}],["title",{"_index":57,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["todo",{"_index":131,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"interfaces/IScore.html":{},"classes/LeaderboardDto.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["token",{"_index":63,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"index.html":{}}}],["tokenbalance",{"_index":1008,"title":{},"body":{"classes/MockService.html":{}}}],["tokenbalance.balance",{"_index":1015,"title":{},"body":{"classes/MockService.html":{}}}],["tokentype",{"_index":1006,"title":{},"body":{"classes/MockService.html":{}}}],["total",{"_index":110,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/ILeaderboard.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["totimestring",{"_index":241,"title":{},"body":{"injectables/AppLogger.html":{}}}],["trace",{"_index":217,"title":{},"body":{"injectables/AppLogger.html":{}}}],["transaction",{"_index":69,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["treasurycap",{"_index":328,"title":{},"body":{"classes/Config.html":{}}}],["true",{"_index":413,"title":{},"body":{"classes/Config.html":{},"classes/DynamoDbAccess.html":{},"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{},"classes/MockService.html":{}}}],["try",{"_index":834,"title":{},"body":{"classes/LeaderboardJsonFile.html":{}}}],["tweetnacl",{"_index":1279,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":13,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"injectables/AppLogger.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/Config.html":{},"classes/DynamoDbAccess.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"interfaces/IDynamoResult.html":{},"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardDto.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["unique",{"_index":79,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/ILeaderboard.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["universal",{"_index":244,"title":{},"body":{"injectables/AppLogger.html":{}}}],["unixdate",{"_index":621,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{},"classes/MockService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["unixtimestamp",{"_index":1212,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["unknown",{"_index":963,"title":{},"body":{"classes/MockService.html":{}}}],["unlicensed",{"_index":1336,"title":{},"body":{"properties.html":{}}}],["update",{"_index":159,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IScore.html":{},"classes/LeaderboardDto.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"index.html":{}}}],["update(wallet",{"_index":645,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["updateauthrecord",{"_index":518,"title":{},"body":{"interfaces/IAuthManager.html":{}}}],["updateauthrecord(authid",{"_index":551,"title":{},"body":{"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{}}}],["updateauthsession",{"_index":519,"title":{},"body":{"interfaces/IAuthManager.html":{}}}],["updateauthsession(sessionid",{"_index":553,"title":{},"body":{"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{}}}],["updatetimestamp",{"_index":560,"title":{},"body":{"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{}}}],["updateuserleveldto",{"_index":163,"title":{"classes/UpdateUserLevelDto.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{}}}],["updateuseroauthdto",{"_index":164,"title":{"classes/UpdateUserOAuthDto.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{}}}],["updateuseroauthresponsedto",{"_index":172,"title":{"classes/UpdateUserOAuthResponseDto.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{}}}],["url",{"_index":47,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["usecors",{"_index":322,"title":{},"body":{"classes/Config.html":{}}}],["used",{"_index":764,"title":{},"body":{"interfaces/IScore.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MockService.html":{},"miscellaneous/functions.html":{}}}],["user",{"_index":20,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["username",{"_index":12,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardDto.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"index.html":{}}}],["usernameexists",{"_index":520,"title":{},"body":{"interfaces/IAuthManager.html":{}}}],["usernameexists(username",{"_index":555,"title":{},"body":{"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{}}}],["users",{"_index":111,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["usetls",{"_index":321,"title":{},"body":{"classes/Config.html":{}}}],["utf8encode",{"_index":1348,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validation",{"_index":692,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["value",{"_index":225,"title":{},"body":{"injectables/AppLogger.html":{},"classes/Config.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["value.trim().tolowercase",{"_index":412,"title":{},"body":{"classes/Config.html":{}}}],["values",{"_index":687,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["variable",{"_index":1198,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1338,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verification",{"_index":959,"title":{},"body":{"classes/MockService.html":{},"index.html":{}}}],["verified",{"_index":92,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["verifies",{"_index":1323,"title":{},"body":{"index.html":{}}}],["verify",{"_index":97,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["verify(address",{"_index":1302,"title":{},"body":{"miscellaneous/functions.html":{}}}],["verifying",{"_index":1142,"title":{},"body":{"classes/MockService.html":{}}}],["verifysignature",{"_index":1242,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["verifysignature(message",{"_index":944,"title":{},"body":{"classes/MockService.html":{},"miscellaneous/functions.html":{}}}],["verifysignature2",{"_index":904,"title":{},"body":{"classes/MockService.html":{}}}],["verifysignature2(sessionid",{"_index":920,"title":{},"body":{"classes/MockService.html":{}}}],["verifysignaturedto",{"_index":85,"title":{"classes/VerifySignatureDto.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{},"index.html":{}}}],["verifysignatureresponsedto",{"_index":90,"title":{"classes/VerifySignatureResponseDto.html":{}},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"coverage.html":{},"index.html":{}}}],["version",{"_index":1333,"title":{},"body":{"properties.html":{}}}],["void",{"_index":208,"title":{},"body":{"injectables/AppLogger.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LocalScoreCache.html":{}}}],["wallet",{"_index":19,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"interfaces/IAuthManager.html":{},"interfaces/IAuthRecord.html":{},"interfaces/IAuthSession.html":{},"interfaces/ILeaderboard.html":{},"interfaces/IScore.html":{},"interfaces/ISprint.html":{},"classes/LeaderboardDto.html":{},"classes/LeaderboardJsonFile.html":{},"classes/LeaderboardMemory.html":{},"classes/LocalScoreCache.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["wallet's",{"_index":576,"title":{},"body":{"interfaces/ILeaderboard.html":{},"interfaces/ISprint.html":{}}}],["walletaddr",{"_index":1000,"title":{},"body":{"classes/MockService.html":{}}}],["walletpubkey",{"_index":921,"title":{},"body":{"classes/MockService.html":{}}}],["wallettype",{"_index":156,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/MockService.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{}}}],["warn",{"_index":200,"title":{},"body":{"injectables/AppLogger.html":{}}}],["warn(message",{"_index":221,"title":{},"body":{"injectables/AppLogger.html":{}}}],["warning",{"_index":616,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["warnings",{"_index":187,"title":{},"body":{"injectables/AppLogger.html":{}}}],["web3",{"_index":941,"title":{},"body":{"classes/MockService.html":{}}}],["web3.eth.accounts.recover(msghash",{"_index":948,"title":{},"body":{"classes/MockService.html":{}}}],["web3.utils.soliditysha3(message",{"_index":946,"title":{},"body":{"classes/MockService.html":{}}}],["whether",{"_index":91,"title":{},"body":{"classes/AddLeaderboardDto.html":{},"classes/AddLeaderboardResponseDto.html":{},"classes/AuthVerifyDto.html":{},"classes/AuthVerifyResponseDto.html":{},"classes/BeatmapsNftDto.html":{},"classes/BeatsNftDto.html":{},"classes/CheckUsernameDto.html":{},"classes/CheckUsernameResponseDto.html":{},"classes/GetAccountDto.html":{},"classes/GetAccountResponseDto.html":{},"classes/GetBeatmapsNftsResponseDto.html":{},"classes/GetBeatsNftsDto.html":{},"classes/GetBeatsNftsResponseDto.html":{},"classes/GetLeaderboardDto.html":{},"classes/GetLeaderboardResponseDto.html":{},"classes/GetLeaderboardSprintDto.html":{},"classes/GetLeaderboardSprintResponseDto.html":{},"classes/GetTokenBalanceDto.html":{},"classes/GetTokenBalanceResponseDto.html":{},"classes/GetUserOAuthDto.html":{},"classes/GetUserOAuthResponseDto.html":{},"classes/LeaderboardDto.html":{},"classes/MintBeatmapsNftDto.html":{},"classes/MintBeatsNftDto.html":{},"classes/MintNftResponseDto.html":{},"classes/MintTokenDto.html":{},"classes/MintTokenResponseDto.html":{},"classes/RequestNFTResponseDto.html":{},"classes/ResponseDtoBase.html":{},"classes/StartAuthSessionDto.html":{},"classes/StartAuthSessionResponseDto.html":{},"classes/UpdateUserLevelDto.html":{},"classes/UpdateUserOAuthDto.html":{},"classes/UpdateUserOAuthResponseDto.html":{},"classes/VerifySignatureDto.html":{},"classes/VerifySignatureResponseDto.html":{},"index.html":{}}}],["winston",{"_index":1281,"title":{},"body":{"dependencies.html":{}}}],["wiped",{"_index":842,"title":{},"body":{"classes/LeaderboardMemory.html":{}}}],["without",{"_index":1113,"title":{},"body":{"classes/MockService.html":{}}}],["world",{"_index":293,"title":{},"body":{"injectables/AppService.html":{}}}],["write",{"_index":680,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{},"classes/MockService.html":{}}}],["writecapacityunits",{"_index":1049,"title":{},"body":{"classes/MockService.html":{}}}],["writestream",{"_index":192,"title":{},"body":{"injectables/AppLogger.html":{}}}],["y",{"_index":415,"title":{},"body":{"classes/Config.html":{}}}],["year",{"_index":781,"title":{},"body":{"interfaces/IScore.html":{},"classes/LocalScoreCache.html":{}}}],["yes",{"_index":215,"title":{},"body":{"injectables/AppLogger.html":{},"classes/Config.html":{}}}],["zoom",{"_index":276,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AddLeaderboardDto.html":{"url":"classes/AddLeaderboardDto.html","title":"class - AddLeaderboardDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddLeaderboardDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/req.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authId\n                            \n                            \n                                    \n                                authType\n                            \n                            \n                                    \n                                score\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The address of the wallet of the user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:144\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The auth type of the user login'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:146\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        score\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The score to add'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:148\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The present username of the user being added'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:150\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass ResponseDtoBase {\n    @ApiProperty({ description: 'The current network (e.g. devnet)' })\n    network: string;\n}\n\nexport class MintBeatsNftDto {\n    @ApiProperty({ description: 'Name of the NFT' })\n    name: string;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'URL of the NFT image' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintBeatmapsNftDto {\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'Username of the beatmap creator' })\n    username: string;\n    @ApiProperty({ description: 'Song title or beatmap title' })\n    title: string;\n    @ApiProperty({ description: 'Song artist' })\n    artist: string;\n    @ApiProperty({ description: 'Beatmap json' })\n    beatmapJson: string;\n    @ApiProperty({ description: 'NFT image url' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintTokenDto {\n    @ApiProperty({ description: 'The amount of the token' })\n    amount: number;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n}\n\nexport class GetTokenBalanceDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class GetBeatsNftsDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class MintNftResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n    @ApiProperty({ description: 'The list of NFT addresses minted' })\n    addresses: string[];\n}\n\nexport class RequestNFTResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class MintTokenResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class GetTokenBalanceResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The balance of the wallet' })\n    balance: number;\n}\n\nexport class BeatsNftDto {\n    name: string;\n    url: string;\n}\n\nexport class BeatmapsNftDto {\n    username: string;\n    title: string;\n    artist: string;\n    beatmapJson: string;\n}\n\nexport class GetBeatsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The unique BEATS NFTs owned' })\n    nfts: BeatsNftDto[];\n}\n\nexport class GetBeatmapsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The BEATMAPS NFTs owned' })\n    nfts: BeatmapsNftDto[];\n}\n\nexport class VerifySignatureDto {\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'The expected signature' })\n    signature: string;\n    @ApiProperty({ description: 'The original message that was signed' })\n    message: string;\n}\n\nexport class VerifySignatureResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n}\n\n/// --- LEADERBOARD --- ///\n\nexport class GetLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The max number of records to include in the response' })\n    limit: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class LeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The total score of the users' })\n    score: number;\n    @ApiProperty({ description: 'The username of the user' })\n    username: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class GetLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of each user' })\n    scores: LeaderboardDto[];\n}\n\nexport class AddLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    authId: string;\n    @ApiProperty({ description: 'The auth type of the user login' })\n    authType: string;\n    @ApiProperty({ description: 'The score to add' })\n    score: number;\n    @ApiProperty({ description: 'The present username of the user being added' })\n    username: string;\n}\n\nexport class AddLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of the user' })\n    score: number;\n}\n\nexport class GetLeaderboardSprintDto {\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n    @ApiProperty({ description: 'Optional max number of records to return' })\n    limit: number;\n}\n\nexport class GetLeaderboardSprintResponseDto {\n    @ApiProperty({ description: 'Unique id of sprint' })\n    sprintId: string;\n    @ApiProperty({ description: 'Whether or not sprint is currently active' })\n    active: boolean;\n    @ApiProperty({ description: 'Sprint start date' })\n    startDate: number;\n    @ApiProperty({ description: 'Sprint end date' })\n    endDate: number;\n}\n\n/// --- AUTH --- ///\n\nexport class CheckUsernameDto {\n    @ApiProperty({ description: 'Username to check' })\n    username: string;\n}\n\nexport class CheckUsernameResponseDto {\n    @ApiProperty({ description: 'Username exists or not' })\n    exists: boolean;\n}\n\n//TODO: need this?\nexport class GetAccountDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n}\n\nexport class GetAccountResponseDto {\n    @ApiProperty({ description: 'SUI wallet address' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Account unique username' })\n    username: string;\n    @ApiProperty({ description: 'Player level' })\n    level: number;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class StartAuthSessionDto {\n    @ApiProperty({ description: 'EVM wallet address' })\n    evmWallet: string;\n}\n\nexport class StartAuthSessionResponseDto {\n    @ApiProperty({ description: 'The unique id of the created session' })\n    sessionId: string;\n    @ApiProperty({ description: 'A message for the client to sign as a challenge' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The username of the specified account, if it exists' })\n    username: string;\n}\n\nexport class AuthVerifyDto {\n    @ApiProperty({ description: 'Wallet address' })\n    wallet: string;\n    @ApiProperty({ description: 'Wallet type can be evm or sui' })\n    walletType: 'sui' | 'evm';\n    @ApiProperty({ description: 'The action being taken; verify signature, or update account' })\n    action: 'verify' | 'update';\n    @ApiProperty({ description: 'The unique id of this session' })\n    sessionId: string;\n    @ApiProperty({ description: 'The message that was signed by the client' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The message signature as signed by caller' })\n    signature: string;\n    @ApiProperty({ description: 'A unique user-chosen username' })\n    username: string;\n}\n\nexport class AuthVerifyResponseDto {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    wallet: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n    @ApiProperty({ description: 'Sui wallet address (if any)' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Username of user' })\n    username: string;\n}\n\nexport class UpdateUserLevelDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n    @ApiProperty({ description: 'Level of player' })\n    level: number;\n}\n\nexport class UpdateUserOAuthDto {\n    @ApiProperty({ description: 'Sui wallet address' })\n    suiAddress: string;\n    @ApiProperty({ description: 'Token from OAuth login' })\n    oauthToken: string;\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n    @ApiProperty({ description: 'Normally, the email' })\n    username: string;\n}\n\nexport class UpdateUserOAuthResponseDto {\n    @ApiProperty({ description: '' })\n    authId: string;\n    @ApiProperty({ description: '' })\n    username: string;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class GetUserOAuthDto {\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n}\n\nexport class GetUserOAuthResponseDto extends GetAccountResponseDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddLeaderboardResponseDto.html":{"url":"classes/AddLeaderboardResponseDto.html","title":"class - AddLeaderboardResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddLeaderboardResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/req.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ResponseDtoBase\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                score\n                            \n                            \n                                    \n                                network\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        score\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The total score of the user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:155\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        network\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The current network (e.g. devnet)'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ResponseDtoBase\n\n                            \n                        \n                    \n                        \n                                Defined in         ResponseDtoBase:5\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass ResponseDtoBase {\n    @ApiProperty({ description: 'The current network (e.g. devnet)' })\n    network: string;\n}\n\nexport class MintBeatsNftDto {\n    @ApiProperty({ description: 'Name of the NFT' })\n    name: string;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'URL of the NFT image' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintBeatmapsNftDto {\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'Username of the beatmap creator' })\n    username: string;\n    @ApiProperty({ description: 'Song title or beatmap title' })\n    title: string;\n    @ApiProperty({ description: 'Song artist' })\n    artist: string;\n    @ApiProperty({ description: 'Beatmap json' })\n    beatmapJson: string;\n    @ApiProperty({ description: 'NFT image url' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintTokenDto {\n    @ApiProperty({ description: 'The amount of the token' })\n    amount: number;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n}\n\nexport class GetTokenBalanceDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class GetBeatsNftsDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class MintNftResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n    @ApiProperty({ description: 'The list of NFT addresses minted' })\n    addresses: string[];\n}\n\nexport class RequestNFTResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class MintTokenResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class GetTokenBalanceResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The balance of the wallet' })\n    balance: number;\n}\n\nexport class BeatsNftDto {\n    name: string;\n    url: string;\n}\n\nexport class BeatmapsNftDto {\n    username: string;\n    title: string;\n    artist: string;\n    beatmapJson: string;\n}\n\nexport class GetBeatsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The unique BEATS NFTs owned' })\n    nfts: BeatsNftDto[];\n}\n\nexport class GetBeatmapsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The BEATMAPS NFTs owned' })\n    nfts: BeatmapsNftDto[];\n}\n\nexport class VerifySignatureDto {\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'The expected signature' })\n    signature: string;\n    @ApiProperty({ description: 'The original message that was signed' })\n    message: string;\n}\n\nexport class VerifySignatureResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n}\n\n/// --- LEADERBOARD --- ///\n\nexport class GetLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The max number of records to include in the response' })\n    limit: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class LeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The total score of the users' })\n    score: number;\n    @ApiProperty({ description: 'The username of the user' })\n    username: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class GetLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of each user' })\n    scores: LeaderboardDto[];\n}\n\nexport class AddLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    authId: string;\n    @ApiProperty({ description: 'The auth type of the user login' })\n    authType: string;\n    @ApiProperty({ description: 'The score to add' })\n    score: number;\n    @ApiProperty({ description: 'The present username of the user being added' })\n    username: string;\n}\n\nexport class AddLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of the user' })\n    score: number;\n}\n\nexport class GetLeaderboardSprintDto {\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n    @ApiProperty({ description: 'Optional max number of records to return' })\n    limit: number;\n}\n\nexport class GetLeaderboardSprintResponseDto {\n    @ApiProperty({ description: 'Unique id of sprint' })\n    sprintId: string;\n    @ApiProperty({ description: 'Whether or not sprint is currently active' })\n    active: boolean;\n    @ApiProperty({ description: 'Sprint start date' })\n    startDate: number;\n    @ApiProperty({ description: 'Sprint end date' })\n    endDate: number;\n}\n\n/// --- AUTH --- ///\n\nexport class CheckUsernameDto {\n    @ApiProperty({ description: 'Username to check' })\n    username: string;\n}\n\nexport class CheckUsernameResponseDto {\n    @ApiProperty({ description: 'Username exists or not' })\n    exists: boolean;\n}\n\n//TODO: need this?\nexport class GetAccountDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n}\n\nexport class GetAccountResponseDto {\n    @ApiProperty({ description: 'SUI wallet address' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Account unique username' })\n    username: string;\n    @ApiProperty({ description: 'Player level' })\n    level: number;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class StartAuthSessionDto {\n    @ApiProperty({ description: 'EVM wallet address' })\n    evmWallet: string;\n}\n\nexport class StartAuthSessionResponseDto {\n    @ApiProperty({ description: 'The unique id of the created session' })\n    sessionId: string;\n    @ApiProperty({ description: 'A message for the client to sign as a challenge' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The username of the specified account, if it exists' })\n    username: string;\n}\n\nexport class AuthVerifyDto {\n    @ApiProperty({ description: 'Wallet address' })\n    wallet: string;\n    @ApiProperty({ description: 'Wallet type can be evm or sui' })\n    walletType: 'sui' | 'evm';\n    @ApiProperty({ description: 'The action being taken; verify signature, or update account' })\n    action: 'verify' | 'update';\n    @ApiProperty({ description: 'The unique id of this session' })\n    sessionId: string;\n    @ApiProperty({ description: 'The message that was signed by the client' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The message signature as signed by caller' })\n    signature: string;\n    @ApiProperty({ description: 'A unique user-chosen username' })\n    username: string;\n}\n\nexport class AuthVerifyResponseDto {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    wallet: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n    @ApiProperty({ description: 'Sui wallet address (if any)' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Username of user' })\n    username: string;\n}\n\nexport class UpdateUserLevelDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n    @ApiProperty({ description: 'Level of player' })\n    level: number;\n}\n\nexport class UpdateUserOAuthDto {\n    @ApiProperty({ description: 'Sui wallet address' })\n    suiAddress: string;\n    @ApiProperty({ description: 'Token from OAuth login' })\n    oauthToken: string;\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n    @ApiProperty({ description: 'Normally, the email' })\n    username: string;\n}\n\nexport class UpdateUserOAuthResponseDto {\n    @ApiProperty({ description: '' })\n    authId: string;\n    @ApiProperty({ description: '' })\n    username: string;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class GetUserOAuthDto {\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n}\n\nexport class GetUserOAuthResponseDto extends GetAccountResponseDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppLogger.html":{"url":"injectables/AppLogger.html","title":"injectable - AppLogger","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppLogger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.logger.ts\n        \n\n\n            \n                Description\n            \n            \n                Logs app info, alerts, warnings, and errors to a file destination.\n\n            \n\n            \n                Extends\n            \n            \n                        Logger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                writeStream\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                _checkCreateLogFile\n                            \n                            \n                                _getLogFileName\n                            \n                            \n                                _writeEntry\n                            \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(context: string)\n                    \n                \n                        \n                            \n                                Defined in src/app.logger.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        context\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        _checkCreateLogFile\n                        \n                    \n                \n            \n            \n                \n_checkCreateLogFile()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.logger.ts:48\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _getLogFileName\n                        \n                    \n                \n            \n            \n                \n_getLogFileName()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.logger.ts:59\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _writeEntry\n                        \n                    \n                \n            \n            \n                \n_writeEntry(tag, message)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.logger.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tag\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(message: string, context?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.logger.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: string, trace?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.logger.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                trace\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.logger.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(message: string, context?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.logger.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                context\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        writeStream\n                        \n                    \n                \n            \n                \n                    \n                        Type :     null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app.logger.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Logger, Injectable } from '@nestjs/common';\nimport * as fs from 'fs';\n\n/**\n * Logs app info, alerts, warnings, and errors to a file destination.\n */\n@Injectable()\nexport class AppLogger extends Logger {\n    private writeStream = null;\n\n    constructor(context: string) {\n        super(context);\n        this._checkCreateLogFile();\n    }\n\n    log(message: string) {\n        this._checkCreateLogFile();\n        super.log(message);\n        this._writeEntry('INFO', message);\n    }\n\n    error(message: string, trace?: string) {\n        this._checkCreateLogFile();\n        super.error(message, trace);\n        this._writeEntry('ERROR', `${message} ${trace || ''}`);\n    }\n\n    warn(message: string, context?: string) {\n        this._checkCreateLogFile();\n        super.warn(message, context);\n        this._writeEntry('WARN', `${message} ${context || ''}`);\n    }\n\n    debug(message: string, context?: string) {\n        this._checkCreateLogFile();\n        super.debug(message, context);\n        this._writeEntry('DEBUG', `${message} ${context || ''}`);\n    }\n\n    _writeEntry(tag, message) {\n        this.writeStream.write(\n            `[${tag}][${new Date(Date.now())\n                .toTimeString()\n                .replace(' (Coordinated Universal Time)', '')}] ${message}\\n`,\n        );\n    }\n\n    _checkCreateLogFile() {\n        const filename = this._getLogFileName();\n        if (!fs.existsSync(filename)) {\n            console.log('creating file');\n            fs.writeFileSync(filename, '\\n');\n        }\n        this.writeStream = fs.createWriteStream(filename, {\n            flags: 'a',\n        });\n    }\n\n    _getLogFileName() {\n        const dt = new Date();\n        const filename = `${dt.getFullYear()}-${dt.getMonth() + 1}-${dt.getDate()}.log`;\n        return `./logs/${filename}`;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAppService\n\nAppService\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nSuiService\n\nSuiService\n\nAppModule -->\n\nSuiService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            SuiService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { ConfigModule } from '@nestjs/config'\nimport { AppController } from './app.controller'\nimport { AppService } from './app.service'\nimport { SuiService } from './sui.service'\n\n@Module({\n  imports: [ConfigModule.forRoot()],\n  controllers: [AppController],\n  providers: [AppService, SuiService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common'\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!'\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthVerifyDto.html":{"url":"classes/AuthVerifyDto.html","title":"class - AuthVerifyDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthVerifyDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/req.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                action\n                            \n                            \n                                    \n                                messageToSign\n                            \n                            \n                                    \n                                sessionId\n                            \n                            \n                                    \n                                signature\n                            \n                            \n                                    \n                                username\n                            \n                            \n                                    \n                                wallet\n                            \n                            \n                                    \n                                walletType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        action\n                        \n                    \n                \n            \n                \n                    \n                        Type :         \"verify\" | \"update\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The action being taken; verify signature, or update account'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:227\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        messageToSign\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The message that was signed by the client'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:231\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sessionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The unique id of this session'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:229\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        signature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The message signature as signed by caller'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:233\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'A unique user-chosen username'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:235\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        wallet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Wallet address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:223\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        walletType\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"sui\" | \"evm\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Wallet type can be evm or sui'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:225\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass ResponseDtoBase {\n    @ApiProperty({ description: 'The current network (e.g. devnet)' })\n    network: string;\n}\n\nexport class MintBeatsNftDto {\n    @ApiProperty({ description: 'Name of the NFT' })\n    name: string;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'URL of the NFT image' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintBeatmapsNftDto {\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'Username of the beatmap creator' })\n    username: string;\n    @ApiProperty({ description: 'Song title or beatmap title' })\n    title: string;\n    @ApiProperty({ description: 'Song artist' })\n    artist: string;\n    @ApiProperty({ description: 'Beatmap json' })\n    beatmapJson: string;\n    @ApiProperty({ description: 'NFT image url' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintTokenDto {\n    @ApiProperty({ description: 'The amount of the token' })\n    amount: number;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n}\n\nexport class GetTokenBalanceDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class GetBeatsNftsDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class MintNftResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n    @ApiProperty({ description: 'The list of NFT addresses minted' })\n    addresses: string[];\n}\n\nexport class RequestNFTResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class MintTokenResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class GetTokenBalanceResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The balance of the wallet' })\n    balance: number;\n}\n\nexport class BeatsNftDto {\n    name: string;\n    url: string;\n}\n\nexport class BeatmapsNftDto {\n    username: string;\n    title: string;\n    artist: string;\n    beatmapJson: string;\n}\n\nexport class GetBeatsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The unique BEATS NFTs owned' })\n    nfts: BeatsNftDto[];\n}\n\nexport class GetBeatmapsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The BEATMAPS NFTs owned' })\n    nfts: BeatmapsNftDto[];\n}\n\nexport class VerifySignatureDto {\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'The expected signature' })\n    signature: string;\n    @ApiProperty({ description: 'The original message that was signed' })\n    message: string;\n}\n\nexport class VerifySignatureResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n}\n\n/// --- LEADERBOARD --- ///\n\nexport class GetLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The max number of records to include in the response' })\n    limit: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class LeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The total score of the users' })\n    score: number;\n    @ApiProperty({ description: 'The username of the user' })\n    username: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class GetLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of each user' })\n    scores: LeaderboardDto[];\n}\n\nexport class AddLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    authId: string;\n    @ApiProperty({ description: 'The auth type of the user login' })\n    authType: string;\n    @ApiProperty({ description: 'The score to add' })\n    score: number;\n    @ApiProperty({ description: 'The present username of the user being added' })\n    username: string;\n}\n\nexport class AddLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of the user' })\n    score: number;\n}\n\nexport class GetLeaderboardSprintDto {\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n    @ApiProperty({ description: 'Optional max number of records to return' })\n    limit: number;\n}\n\nexport class GetLeaderboardSprintResponseDto {\n    @ApiProperty({ description: 'Unique id of sprint' })\n    sprintId: string;\n    @ApiProperty({ description: 'Whether or not sprint is currently active' })\n    active: boolean;\n    @ApiProperty({ description: 'Sprint start date' })\n    startDate: number;\n    @ApiProperty({ description: 'Sprint end date' })\n    endDate: number;\n}\n\n/// --- AUTH --- ///\n\nexport class CheckUsernameDto {\n    @ApiProperty({ description: 'Username to check' })\n    username: string;\n}\n\nexport class CheckUsernameResponseDto {\n    @ApiProperty({ description: 'Username exists or not' })\n    exists: boolean;\n}\n\n//TODO: need this?\nexport class GetAccountDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n}\n\nexport class GetAccountResponseDto {\n    @ApiProperty({ description: 'SUI wallet address' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Account unique username' })\n    username: string;\n    @ApiProperty({ description: 'Player level' })\n    level: number;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class StartAuthSessionDto {\n    @ApiProperty({ description: 'EVM wallet address' })\n    evmWallet: string;\n}\n\nexport class StartAuthSessionResponseDto {\n    @ApiProperty({ description: 'The unique id of the created session' })\n    sessionId: string;\n    @ApiProperty({ description: 'A message for the client to sign as a challenge' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The username of the specified account, if it exists' })\n    username: string;\n}\n\nexport class AuthVerifyDto {\n    @ApiProperty({ description: 'Wallet address' })\n    wallet: string;\n    @ApiProperty({ description: 'Wallet type can be evm or sui' })\n    walletType: 'sui' | 'evm';\n    @ApiProperty({ description: 'The action being taken; verify signature, or update account' })\n    action: 'verify' | 'update';\n    @ApiProperty({ description: 'The unique id of this session' })\n    sessionId: string;\n    @ApiProperty({ description: 'The message that was signed by the client' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The message signature as signed by caller' })\n    signature: string;\n    @ApiProperty({ description: 'A unique user-chosen username' })\n    username: string;\n}\n\nexport class AuthVerifyResponseDto {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    wallet: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n    @ApiProperty({ description: 'Sui wallet address (if any)' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Username of user' })\n    username: string;\n}\n\nexport class UpdateUserLevelDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n    @ApiProperty({ description: 'Level of player' })\n    level: number;\n}\n\nexport class UpdateUserOAuthDto {\n    @ApiProperty({ description: 'Sui wallet address' })\n    suiAddress: string;\n    @ApiProperty({ description: 'Token from OAuth login' })\n    oauthToken: string;\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n    @ApiProperty({ description: 'Normally, the email' })\n    username: string;\n}\n\nexport class UpdateUserOAuthResponseDto {\n    @ApiProperty({ description: '' })\n    authId: string;\n    @ApiProperty({ description: '' })\n    username: string;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class GetUserOAuthDto {\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n}\n\nexport class GetUserOAuthResponseDto extends GetAccountResponseDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthVerifyResponseDto.html":{"url":"classes/AuthVerifyResponseDto.html","title":"class - AuthVerifyResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthVerifyResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/req.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                failureReason\n                            \n                            \n                                    \n                                suiWallet\n                            \n                            \n                                    \n                                username\n                            \n                            \n                                    \n                                verified\n                            \n                            \n                                    \n                                wallet\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        failureReason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'General reason for failure to verify (if not verified)'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:244\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        suiWallet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Sui wallet address (if any)'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:246\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Username of user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:248\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        verified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Whether or not the signature was verified'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:240\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        wallet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The address of the wallet that signed the transaction'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:242\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass ResponseDtoBase {\n    @ApiProperty({ description: 'The current network (e.g. devnet)' })\n    network: string;\n}\n\nexport class MintBeatsNftDto {\n    @ApiProperty({ description: 'Name of the NFT' })\n    name: string;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'URL of the NFT image' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintBeatmapsNftDto {\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'Username of the beatmap creator' })\n    username: string;\n    @ApiProperty({ description: 'Song title or beatmap title' })\n    title: string;\n    @ApiProperty({ description: 'Song artist' })\n    artist: string;\n    @ApiProperty({ description: 'Beatmap json' })\n    beatmapJson: string;\n    @ApiProperty({ description: 'NFT image url' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintTokenDto {\n    @ApiProperty({ description: 'The amount of the token' })\n    amount: number;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n}\n\nexport class GetTokenBalanceDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class GetBeatsNftsDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class MintNftResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n    @ApiProperty({ description: 'The list of NFT addresses minted' })\n    addresses: string[];\n}\n\nexport class RequestNFTResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class MintTokenResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class GetTokenBalanceResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The balance of the wallet' })\n    balance: number;\n}\n\nexport class BeatsNftDto {\n    name: string;\n    url: string;\n}\n\nexport class BeatmapsNftDto {\n    username: string;\n    title: string;\n    artist: string;\n    beatmapJson: string;\n}\n\nexport class GetBeatsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The unique BEATS NFTs owned' })\n    nfts: BeatsNftDto[];\n}\n\nexport class GetBeatmapsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The BEATMAPS NFTs owned' })\n    nfts: BeatmapsNftDto[];\n}\n\nexport class VerifySignatureDto {\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'The expected signature' })\n    signature: string;\n    @ApiProperty({ description: 'The original message that was signed' })\n    message: string;\n}\n\nexport class VerifySignatureResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n}\n\n/// --- LEADERBOARD --- ///\n\nexport class GetLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The max number of records to include in the response' })\n    limit: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class LeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The total score of the users' })\n    score: number;\n    @ApiProperty({ description: 'The username of the user' })\n    username: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class GetLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of each user' })\n    scores: LeaderboardDto[];\n}\n\nexport class AddLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    authId: string;\n    @ApiProperty({ description: 'The auth type of the user login' })\n    authType: string;\n    @ApiProperty({ description: 'The score to add' })\n    score: number;\n    @ApiProperty({ description: 'The present username of the user being added' })\n    username: string;\n}\n\nexport class AddLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of the user' })\n    score: number;\n}\n\nexport class GetLeaderboardSprintDto {\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n    @ApiProperty({ description: 'Optional max number of records to return' })\n    limit: number;\n}\n\nexport class GetLeaderboardSprintResponseDto {\n    @ApiProperty({ description: 'Unique id of sprint' })\n    sprintId: string;\n    @ApiProperty({ description: 'Whether or not sprint is currently active' })\n    active: boolean;\n    @ApiProperty({ description: 'Sprint start date' })\n    startDate: number;\n    @ApiProperty({ description: 'Sprint end date' })\n    endDate: number;\n}\n\n/// --- AUTH --- ///\n\nexport class CheckUsernameDto {\n    @ApiProperty({ description: 'Username to check' })\n    username: string;\n}\n\nexport class CheckUsernameResponseDto {\n    @ApiProperty({ description: 'Username exists or not' })\n    exists: boolean;\n}\n\n//TODO: need this?\nexport class GetAccountDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n}\n\nexport class GetAccountResponseDto {\n    @ApiProperty({ description: 'SUI wallet address' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Account unique username' })\n    username: string;\n    @ApiProperty({ description: 'Player level' })\n    level: number;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class StartAuthSessionDto {\n    @ApiProperty({ description: 'EVM wallet address' })\n    evmWallet: string;\n}\n\nexport class StartAuthSessionResponseDto {\n    @ApiProperty({ description: 'The unique id of the created session' })\n    sessionId: string;\n    @ApiProperty({ description: 'A message for the client to sign as a challenge' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The username of the specified account, if it exists' })\n    username: string;\n}\n\nexport class AuthVerifyDto {\n    @ApiProperty({ description: 'Wallet address' })\n    wallet: string;\n    @ApiProperty({ description: 'Wallet type can be evm or sui' })\n    walletType: 'sui' | 'evm';\n    @ApiProperty({ description: 'The action being taken; verify signature, or update account' })\n    action: 'verify' | 'update';\n    @ApiProperty({ description: 'The unique id of this session' })\n    sessionId: string;\n    @ApiProperty({ description: 'The message that was signed by the client' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The message signature as signed by caller' })\n    signature: string;\n    @ApiProperty({ description: 'A unique user-chosen username' })\n    username: string;\n}\n\nexport class AuthVerifyResponseDto {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    wallet: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n    @ApiProperty({ description: 'Sui wallet address (if any)' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Username of user' })\n    username: string;\n}\n\nexport class UpdateUserLevelDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n    @ApiProperty({ description: 'Level of player' })\n    level: number;\n}\n\nexport class UpdateUserOAuthDto {\n    @ApiProperty({ description: 'Sui wallet address' })\n    suiAddress: string;\n    @ApiProperty({ description: 'Token from OAuth login' })\n    oauthToken: string;\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n    @ApiProperty({ description: 'Normally, the email' })\n    username: string;\n}\n\nexport class UpdateUserOAuthResponseDto {\n    @ApiProperty({ description: '' })\n    authId: string;\n    @ApiProperty({ description: '' })\n    username: string;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class GetUserOAuthDto {\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n}\n\nexport class GetUserOAuthResponseDto extends GetAccountResponseDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BeatmapsNftDto.html":{"url":"classes/BeatmapsNftDto.html","title":"class - BeatmapsNftDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BeatmapsNftDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/req.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                artist\n                            \n                            \n                                beatmapJson\n                            \n                            \n                                title\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        artist\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        beatmapJson\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:81\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass ResponseDtoBase {\n    @ApiProperty({ description: 'The current network (e.g. devnet)' })\n    network: string;\n}\n\nexport class MintBeatsNftDto {\n    @ApiProperty({ description: 'Name of the NFT' })\n    name: string;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'URL of the NFT image' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintBeatmapsNftDto {\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'Username of the beatmap creator' })\n    username: string;\n    @ApiProperty({ description: 'Song title or beatmap title' })\n    title: string;\n    @ApiProperty({ description: 'Song artist' })\n    artist: string;\n    @ApiProperty({ description: 'Beatmap json' })\n    beatmapJson: string;\n    @ApiProperty({ description: 'NFT image url' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintTokenDto {\n    @ApiProperty({ description: 'The amount of the token' })\n    amount: number;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n}\n\nexport class GetTokenBalanceDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class GetBeatsNftsDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class MintNftResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n    @ApiProperty({ description: 'The list of NFT addresses minted' })\n    addresses: string[];\n}\n\nexport class RequestNFTResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class MintTokenResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class GetTokenBalanceResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The balance of the wallet' })\n    balance: number;\n}\n\nexport class BeatsNftDto {\n    name: string;\n    url: string;\n}\n\nexport class BeatmapsNftDto {\n    username: string;\n    title: string;\n    artist: string;\n    beatmapJson: string;\n}\n\nexport class GetBeatsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The unique BEATS NFTs owned' })\n    nfts: BeatsNftDto[];\n}\n\nexport class GetBeatmapsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The BEATMAPS NFTs owned' })\n    nfts: BeatmapsNftDto[];\n}\n\nexport class VerifySignatureDto {\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'The expected signature' })\n    signature: string;\n    @ApiProperty({ description: 'The original message that was signed' })\n    message: string;\n}\n\nexport class VerifySignatureResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n}\n\n/// --- LEADERBOARD --- ///\n\nexport class GetLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The max number of records to include in the response' })\n    limit: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class LeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The total score of the users' })\n    score: number;\n    @ApiProperty({ description: 'The username of the user' })\n    username: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class GetLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of each user' })\n    scores: LeaderboardDto[];\n}\n\nexport class AddLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    authId: string;\n    @ApiProperty({ description: 'The auth type of the user login' })\n    authType: string;\n    @ApiProperty({ description: 'The score to add' })\n    score: number;\n    @ApiProperty({ description: 'The present username of the user being added' })\n    username: string;\n}\n\nexport class AddLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of the user' })\n    score: number;\n}\n\nexport class GetLeaderboardSprintDto {\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n    @ApiProperty({ description: 'Optional max number of records to return' })\n    limit: number;\n}\n\nexport class GetLeaderboardSprintResponseDto {\n    @ApiProperty({ description: 'Unique id of sprint' })\n    sprintId: string;\n    @ApiProperty({ description: 'Whether or not sprint is currently active' })\n    active: boolean;\n    @ApiProperty({ description: 'Sprint start date' })\n    startDate: number;\n    @ApiProperty({ description: 'Sprint end date' })\n    endDate: number;\n}\n\n/// --- AUTH --- ///\n\nexport class CheckUsernameDto {\n    @ApiProperty({ description: 'Username to check' })\n    username: string;\n}\n\nexport class CheckUsernameResponseDto {\n    @ApiProperty({ description: 'Username exists or not' })\n    exists: boolean;\n}\n\n//TODO: need this?\nexport class GetAccountDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n}\n\nexport class GetAccountResponseDto {\n    @ApiProperty({ description: 'SUI wallet address' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Account unique username' })\n    username: string;\n    @ApiProperty({ description: 'Player level' })\n    level: number;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class StartAuthSessionDto {\n    @ApiProperty({ description: 'EVM wallet address' })\n    evmWallet: string;\n}\n\nexport class StartAuthSessionResponseDto {\n    @ApiProperty({ description: 'The unique id of the created session' })\n    sessionId: string;\n    @ApiProperty({ description: 'A message for the client to sign as a challenge' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The username of the specified account, if it exists' })\n    username: string;\n}\n\nexport class AuthVerifyDto {\n    @ApiProperty({ description: 'Wallet address' })\n    wallet: string;\n    @ApiProperty({ description: 'Wallet type can be evm or sui' })\n    walletType: 'sui' | 'evm';\n    @ApiProperty({ description: 'The action being taken; verify signature, or update account' })\n    action: 'verify' | 'update';\n    @ApiProperty({ description: 'The unique id of this session' })\n    sessionId: string;\n    @ApiProperty({ description: 'The message that was signed by the client' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The message signature as signed by caller' })\n    signature: string;\n    @ApiProperty({ description: 'A unique user-chosen username' })\n    username: string;\n}\n\nexport class AuthVerifyResponseDto {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    wallet: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n    @ApiProperty({ description: 'Sui wallet address (if any)' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Username of user' })\n    username: string;\n}\n\nexport class UpdateUserLevelDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n    @ApiProperty({ description: 'Level of player' })\n    level: number;\n}\n\nexport class UpdateUserOAuthDto {\n    @ApiProperty({ description: 'Sui wallet address' })\n    suiAddress: string;\n    @ApiProperty({ description: 'Token from OAuth login' })\n    oauthToken: string;\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n    @ApiProperty({ description: 'Normally, the email' })\n    username: string;\n}\n\nexport class UpdateUserOAuthResponseDto {\n    @ApiProperty({ description: '' })\n    authId: string;\n    @ApiProperty({ description: '' })\n    username: string;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class GetUserOAuthDto {\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n}\n\nexport class GetUserOAuthResponseDto extends GetAccountResponseDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BeatsNftDto.html":{"url":"classes/BeatsNftDto.html","title":"class - BeatsNftDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BeatsNftDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/req.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:77\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass ResponseDtoBase {\n    @ApiProperty({ description: 'The current network (e.g. devnet)' })\n    network: string;\n}\n\nexport class MintBeatsNftDto {\n    @ApiProperty({ description: 'Name of the NFT' })\n    name: string;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'URL of the NFT image' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintBeatmapsNftDto {\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'Username of the beatmap creator' })\n    username: string;\n    @ApiProperty({ description: 'Song title or beatmap title' })\n    title: string;\n    @ApiProperty({ description: 'Song artist' })\n    artist: string;\n    @ApiProperty({ description: 'Beatmap json' })\n    beatmapJson: string;\n    @ApiProperty({ description: 'NFT image url' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintTokenDto {\n    @ApiProperty({ description: 'The amount of the token' })\n    amount: number;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n}\n\nexport class GetTokenBalanceDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class GetBeatsNftsDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class MintNftResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n    @ApiProperty({ description: 'The list of NFT addresses minted' })\n    addresses: string[];\n}\n\nexport class RequestNFTResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class MintTokenResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class GetTokenBalanceResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The balance of the wallet' })\n    balance: number;\n}\n\nexport class BeatsNftDto {\n    name: string;\n    url: string;\n}\n\nexport class BeatmapsNftDto {\n    username: string;\n    title: string;\n    artist: string;\n    beatmapJson: string;\n}\n\nexport class GetBeatsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The unique BEATS NFTs owned' })\n    nfts: BeatsNftDto[];\n}\n\nexport class GetBeatmapsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The BEATMAPS NFTs owned' })\n    nfts: BeatmapsNftDto[];\n}\n\nexport class VerifySignatureDto {\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'The expected signature' })\n    signature: string;\n    @ApiProperty({ description: 'The original message that was signed' })\n    message: string;\n}\n\nexport class VerifySignatureResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n}\n\n/// --- LEADERBOARD --- ///\n\nexport class GetLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The max number of records to include in the response' })\n    limit: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class LeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The total score of the users' })\n    score: number;\n    @ApiProperty({ description: 'The username of the user' })\n    username: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class GetLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of each user' })\n    scores: LeaderboardDto[];\n}\n\nexport class AddLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    authId: string;\n    @ApiProperty({ description: 'The auth type of the user login' })\n    authType: string;\n    @ApiProperty({ description: 'The score to add' })\n    score: number;\n    @ApiProperty({ description: 'The present username of the user being added' })\n    username: string;\n}\n\nexport class AddLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of the user' })\n    score: number;\n}\n\nexport class GetLeaderboardSprintDto {\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n    @ApiProperty({ description: 'Optional max number of records to return' })\n    limit: number;\n}\n\nexport class GetLeaderboardSprintResponseDto {\n    @ApiProperty({ description: 'Unique id of sprint' })\n    sprintId: string;\n    @ApiProperty({ description: 'Whether or not sprint is currently active' })\n    active: boolean;\n    @ApiProperty({ description: 'Sprint start date' })\n    startDate: number;\n    @ApiProperty({ description: 'Sprint end date' })\n    endDate: number;\n}\n\n/// --- AUTH --- ///\n\nexport class CheckUsernameDto {\n    @ApiProperty({ description: 'Username to check' })\n    username: string;\n}\n\nexport class CheckUsernameResponseDto {\n    @ApiProperty({ description: 'Username exists or not' })\n    exists: boolean;\n}\n\n//TODO: need this?\nexport class GetAccountDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n}\n\nexport class GetAccountResponseDto {\n    @ApiProperty({ description: 'SUI wallet address' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Account unique username' })\n    username: string;\n    @ApiProperty({ description: 'Player level' })\n    level: number;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class StartAuthSessionDto {\n    @ApiProperty({ description: 'EVM wallet address' })\n    evmWallet: string;\n}\n\nexport class StartAuthSessionResponseDto {\n    @ApiProperty({ description: 'The unique id of the created session' })\n    sessionId: string;\n    @ApiProperty({ description: 'A message for the client to sign as a challenge' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The username of the specified account, if it exists' })\n    username: string;\n}\n\nexport class AuthVerifyDto {\n    @ApiProperty({ description: 'Wallet address' })\n    wallet: string;\n    @ApiProperty({ description: 'Wallet type can be evm or sui' })\n    walletType: 'sui' | 'evm';\n    @ApiProperty({ description: 'The action being taken; verify signature, or update account' })\n    action: 'verify' | 'update';\n    @ApiProperty({ description: 'The unique id of this session' })\n    sessionId: string;\n    @ApiProperty({ description: 'The message that was signed by the client' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The message signature as signed by caller' })\n    signature: string;\n    @ApiProperty({ description: 'A unique user-chosen username' })\n    username: string;\n}\n\nexport class AuthVerifyResponseDto {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    wallet: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n    @ApiProperty({ description: 'Sui wallet address (if any)' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Username of user' })\n    username: string;\n}\n\nexport class UpdateUserLevelDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n    @ApiProperty({ description: 'Level of player' })\n    level: number;\n}\n\nexport class UpdateUserOAuthDto {\n    @ApiProperty({ description: 'Sui wallet address' })\n    suiAddress: string;\n    @ApiProperty({ description: 'Token from OAuth login' })\n    oauthToken: string;\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n    @ApiProperty({ description: 'Normally, the email' })\n    username: string;\n}\n\nexport class UpdateUserOAuthResponseDto {\n    @ApiProperty({ description: '' })\n    authId: string;\n    @ApiProperty({ description: '' })\n    username: string;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class GetUserOAuthDto {\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n}\n\nexport class GetUserOAuthResponseDto extends GetAccountResponseDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CheckUsernameDto.html":{"url":"classes/CheckUsernameDto.html","title":"class - CheckUsernameDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CheckUsernameDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/req.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Username to check'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:180\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass ResponseDtoBase {\n    @ApiProperty({ description: 'The current network (e.g. devnet)' })\n    network: string;\n}\n\nexport class MintBeatsNftDto {\n    @ApiProperty({ description: 'Name of the NFT' })\n    name: string;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'URL of the NFT image' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintBeatmapsNftDto {\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'Username of the beatmap creator' })\n    username: string;\n    @ApiProperty({ description: 'Song title or beatmap title' })\n    title: string;\n    @ApiProperty({ description: 'Song artist' })\n    artist: string;\n    @ApiProperty({ description: 'Beatmap json' })\n    beatmapJson: string;\n    @ApiProperty({ description: 'NFT image url' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintTokenDto {\n    @ApiProperty({ description: 'The amount of the token' })\n    amount: number;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n}\n\nexport class GetTokenBalanceDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class GetBeatsNftsDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class MintNftResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n    @ApiProperty({ description: 'The list of NFT addresses minted' })\n    addresses: string[];\n}\n\nexport class RequestNFTResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class MintTokenResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class GetTokenBalanceResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The balance of the wallet' })\n    balance: number;\n}\n\nexport class BeatsNftDto {\n    name: string;\n    url: string;\n}\n\nexport class BeatmapsNftDto {\n    username: string;\n    title: string;\n    artist: string;\n    beatmapJson: string;\n}\n\nexport class GetBeatsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The unique BEATS NFTs owned' })\n    nfts: BeatsNftDto[];\n}\n\nexport class GetBeatmapsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The BEATMAPS NFTs owned' })\n    nfts: BeatmapsNftDto[];\n}\n\nexport class VerifySignatureDto {\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'The expected signature' })\n    signature: string;\n    @ApiProperty({ description: 'The original message that was signed' })\n    message: string;\n}\n\nexport class VerifySignatureResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n}\n\n/// --- LEADERBOARD --- ///\n\nexport class GetLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The max number of records to include in the response' })\n    limit: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class LeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The total score of the users' })\n    score: number;\n    @ApiProperty({ description: 'The username of the user' })\n    username: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class GetLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of each user' })\n    scores: LeaderboardDto[];\n}\n\nexport class AddLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    authId: string;\n    @ApiProperty({ description: 'The auth type of the user login' })\n    authType: string;\n    @ApiProperty({ description: 'The score to add' })\n    score: number;\n    @ApiProperty({ description: 'The present username of the user being added' })\n    username: string;\n}\n\nexport class AddLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of the user' })\n    score: number;\n}\n\nexport class GetLeaderboardSprintDto {\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n    @ApiProperty({ description: 'Optional max number of records to return' })\n    limit: number;\n}\n\nexport class GetLeaderboardSprintResponseDto {\n    @ApiProperty({ description: 'Unique id of sprint' })\n    sprintId: string;\n    @ApiProperty({ description: 'Whether or not sprint is currently active' })\n    active: boolean;\n    @ApiProperty({ description: 'Sprint start date' })\n    startDate: number;\n    @ApiProperty({ description: 'Sprint end date' })\n    endDate: number;\n}\n\n/// --- AUTH --- ///\n\nexport class CheckUsernameDto {\n    @ApiProperty({ description: 'Username to check' })\n    username: string;\n}\n\nexport class CheckUsernameResponseDto {\n    @ApiProperty({ description: 'Username exists or not' })\n    exists: boolean;\n}\n\n//TODO: need this?\nexport class GetAccountDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n}\n\nexport class GetAccountResponseDto {\n    @ApiProperty({ description: 'SUI wallet address' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Account unique username' })\n    username: string;\n    @ApiProperty({ description: 'Player level' })\n    level: number;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class StartAuthSessionDto {\n    @ApiProperty({ description: 'EVM wallet address' })\n    evmWallet: string;\n}\n\nexport class StartAuthSessionResponseDto {\n    @ApiProperty({ description: 'The unique id of the created session' })\n    sessionId: string;\n    @ApiProperty({ description: 'A message for the client to sign as a challenge' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The username of the specified account, if it exists' })\n    username: string;\n}\n\nexport class AuthVerifyDto {\n    @ApiProperty({ description: 'Wallet address' })\n    wallet: string;\n    @ApiProperty({ description: 'Wallet type can be evm or sui' })\n    walletType: 'sui' | 'evm';\n    @ApiProperty({ description: 'The action being taken; verify signature, or update account' })\n    action: 'verify' | 'update';\n    @ApiProperty({ description: 'The unique id of this session' })\n    sessionId: string;\n    @ApiProperty({ description: 'The message that was signed by the client' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The message signature as signed by caller' })\n    signature: string;\n    @ApiProperty({ description: 'A unique user-chosen username' })\n    username: string;\n}\n\nexport class AuthVerifyResponseDto {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    wallet: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n    @ApiProperty({ description: 'Sui wallet address (if any)' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Username of user' })\n    username: string;\n}\n\nexport class UpdateUserLevelDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n    @ApiProperty({ description: 'Level of player' })\n    level: number;\n}\n\nexport class UpdateUserOAuthDto {\n    @ApiProperty({ description: 'Sui wallet address' })\n    suiAddress: string;\n    @ApiProperty({ description: 'Token from OAuth login' })\n    oauthToken: string;\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n    @ApiProperty({ description: 'Normally, the email' })\n    username: string;\n}\n\nexport class UpdateUserOAuthResponseDto {\n    @ApiProperty({ description: '' })\n    authId: string;\n    @ApiProperty({ description: '' })\n    username: string;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class GetUserOAuthDto {\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n}\n\nexport class GetUserOAuthResponseDto extends GetAccountResponseDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CheckUsernameResponseDto.html":{"url":"classes/CheckUsernameResponseDto.html","title":"class - CheckUsernameResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CheckUsernameResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/req.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                exists\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        exists\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Username exists or not'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:185\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass ResponseDtoBase {\n    @ApiProperty({ description: 'The current network (e.g. devnet)' })\n    network: string;\n}\n\nexport class MintBeatsNftDto {\n    @ApiProperty({ description: 'Name of the NFT' })\n    name: string;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'URL of the NFT image' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintBeatmapsNftDto {\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'Username of the beatmap creator' })\n    username: string;\n    @ApiProperty({ description: 'Song title or beatmap title' })\n    title: string;\n    @ApiProperty({ description: 'Song artist' })\n    artist: string;\n    @ApiProperty({ description: 'Beatmap json' })\n    beatmapJson: string;\n    @ApiProperty({ description: 'NFT image url' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintTokenDto {\n    @ApiProperty({ description: 'The amount of the token' })\n    amount: number;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n}\n\nexport class GetTokenBalanceDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class GetBeatsNftsDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class MintNftResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n    @ApiProperty({ description: 'The list of NFT addresses minted' })\n    addresses: string[];\n}\n\nexport class RequestNFTResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class MintTokenResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class GetTokenBalanceResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The balance of the wallet' })\n    balance: number;\n}\n\nexport class BeatsNftDto {\n    name: string;\n    url: string;\n}\n\nexport class BeatmapsNftDto {\n    username: string;\n    title: string;\n    artist: string;\n    beatmapJson: string;\n}\n\nexport class GetBeatsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The unique BEATS NFTs owned' })\n    nfts: BeatsNftDto[];\n}\n\nexport class GetBeatmapsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The BEATMAPS NFTs owned' })\n    nfts: BeatmapsNftDto[];\n}\n\nexport class VerifySignatureDto {\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'The expected signature' })\n    signature: string;\n    @ApiProperty({ description: 'The original message that was signed' })\n    message: string;\n}\n\nexport class VerifySignatureResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n}\n\n/// --- LEADERBOARD --- ///\n\nexport class GetLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The max number of records to include in the response' })\n    limit: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class LeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The total score of the users' })\n    score: number;\n    @ApiProperty({ description: 'The username of the user' })\n    username: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class GetLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of each user' })\n    scores: LeaderboardDto[];\n}\n\nexport class AddLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    authId: string;\n    @ApiProperty({ description: 'The auth type of the user login' })\n    authType: string;\n    @ApiProperty({ description: 'The score to add' })\n    score: number;\n    @ApiProperty({ description: 'The present username of the user being added' })\n    username: string;\n}\n\nexport class AddLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of the user' })\n    score: number;\n}\n\nexport class GetLeaderboardSprintDto {\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n    @ApiProperty({ description: 'Optional max number of records to return' })\n    limit: number;\n}\n\nexport class GetLeaderboardSprintResponseDto {\n    @ApiProperty({ description: 'Unique id of sprint' })\n    sprintId: string;\n    @ApiProperty({ description: 'Whether or not sprint is currently active' })\n    active: boolean;\n    @ApiProperty({ description: 'Sprint start date' })\n    startDate: number;\n    @ApiProperty({ description: 'Sprint end date' })\n    endDate: number;\n}\n\n/// --- AUTH --- ///\n\nexport class CheckUsernameDto {\n    @ApiProperty({ description: 'Username to check' })\n    username: string;\n}\n\nexport class CheckUsernameResponseDto {\n    @ApiProperty({ description: 'Username exists or not' })\n    exists: boolean;\n}\n\n//TODO: need this?\nexport class GetAccountDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n}\n\nexport class GetAccountResponseDto {\n    @ApiProperty({ description: 'SUI wallet address' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Account unique username' })\n    username: string;\n    @ApiProperty({ description: 'Player level' })\n    level: number;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class StartAuthSessionDto {\n    @ApiProperty({ description: 'EVM wallet address' })\n    evmWallet: string;\n}\n\nexport class StartAuthSessionResponseDto {\n    @ApiProperty({ description: 'The unique id of the created session' })\n    sessionId: string;\n    @ApiProperty({ description: 'A message for the client to sign as a challenge' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The username of the specified account, if it exists' })\n    username: string;\n}\n\nexport class AuthVerifyDto {\n    @ApiProperty({ description: 'Wallet address' })\n    wallet: string;\n    @ApiProperty({ description: 'Wallet type can be evm or sui' })\n    walletType: 'sui' | 'evm';\n    @ApiProperty({ description: 'The action being taken; verify signature, or update account' })\n    action: 'verify' | 'update';\n    @ApiProperty({ description: 'The unique id of this session' })\n    sessionId: string;\n    @ApiProperty({ description: 'The message that was signed by the client' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The message signature as signed by caller' })\n    signature: string;\n    @ApiProperty({ description: 'A unique user-chosen username' })\n    username: string;\n}\n\nexport class AuthVerifyResponseDto {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    wallet: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n    @ApiProperty({ description: 'Sui wallet address (if any)' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Username of user' })\n    username: string;\n}\n\nexport class UpdateUserLevelDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n    @ApiProperty({ description: 'Level of player' })\n    level: number;\n}\n\nexport class UpdateUserOAuthDto {\n    @ApiProperty({ description: 'Sui wallet address' })\n    suiAddress: string;\n    @ApiProperty({ description: 'Token from OAuth login' })\n    oauthToken: string;\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n    @ApiProperty({ description: 'Normally, the email' })\n    username: string;\n}\n\nexport class UpdateUserOAuthResponseDto {\n    @ApiProperty({ description: '' })\n    authId: string;\n    @ApiProperty({ description: '' })\n    username: string;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class GetUserOAuthDto {\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n}\n\nexport class GetUserOAuthResponseDto extends GetAccountResponseDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Config.html":{"url":"classes/Config.html","title":"class - Config","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Config\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                aMethod\n                            \n                            \n                                    Static\n                                getBooleanSetting\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    aProp\n                                \n                                \n                                    useTls\n                                \n                                \n                                    useCors\n                                \n                                \n                                    detectPackageInfo\n                                \n                                \n                                    mnemonicPhrase\n                                \n                                \n                                    beatsCoinPackageId\n                                \n                                \n                                    beatsNftPackageId\n                                \n                                \n                                    beatmapsNftPackageId\n                                \n                                \n                                    treasuryCap\n                                \n                                \n                                    beatsNftOwnerCap\n                                \n                                \n                                    beatmapsNftOwnerCap\n                                \n                                \n                                    coinCap\n                                \n                                \n                                    sprintsTableName\n                                \n                                \n                                    scoresTableName\n                                \n                                \n                                    authTableName\n                                \n                                \n                                    authSessionTableName\n                                \n                                \n                                    allowedCorsOrigin\n                                \n                                \n                                    listenPort\n                                \n                                \n                                    suiNetwork\n                                \n                                \n                                    certFilePath\n                                \n                                \n                                    keyFilePath\n                                \n                                \n                                    httpPort\n                                \n                                \n                                    httpsPort\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        aMethod\n                        \n                    \n                \n            \n            \n                \n                        \n                    aMethod()\n                \n            \n\n\n                    \n                        \n                            Defined in src/config.ts:3\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        getBooleanSetting\n                        \n                    \n                \n            \n            \n                \n                        \n                    getBooleanSetting(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/config.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        aProp\n                    \n                \n\n                \n                    \n                        getaProp()\n                    \n                \n                            \n                                \n                                    Defined in src/config.ts:2\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        useTls\n                    \n                \n\n                \n                    \n                        getuseTls()\n                    \n                \n                            \n                                \n                                    Defined in src/config.ts:4\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        useCors\n                    \n                \n\n                \n                    \n                        getuseCors()\n                    \n                \n                            \n                                \n                                    Defined in src/config.ts:7\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        detectPackageInfo\n                    \n                \n\n                \n                    \n                        getdetectPackageInfo()\n                    \n                \n                            \n                                \n                                    Defined in src/config.ts:10\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        mnemonicPhrase\n                    \n                \n\n                \n                    \n                        getmnemonicPhrase()\n                    \n                \n                            \n                                \n                                    Defined in src/config.ts:13\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        beatsCoinPackageId\n                    \n                \n\n                \n                    \n                        getbeatsCoinPackageId()\n                    \n                \n                            \n                                \n                                    Defined in src/config.ts:16\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        beatsNftPackageId\n                    \n                \n\n                \n                    \n                        getbeatsNftPackageId()\n                    \n                \n                            \n                                \n                                    Defined in src/config.ts:19\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        beatmapsNftPackageId\n                    \n                \n\n                \n                    \n                        getbeatmapsNftPackageId()\n                    \n                \n                            \n                                \n                                    Defined in src/config.ts:22\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        treasuryCap\n                    \n                \n\n                \n                    \n                        gettreasuryCap()\n                    \n                \n                            \n                                \n                                    Defined in src/config.ts:25\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        beatsNftOwnerCap\n                    \n                \n\n                \n                    \n                        getbeatsNftOwnerCap()\n                    \n                \n                            \n                                \n                                    Defined in src/config.ts:28\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        beatmapsNftOwnerCap\n                    \n                \n\n                \n                    \n                        getbeatmapsNftOwnerCap()\n                    \n                \n                            \n                                \n                                    Defined in src/config.ts:31\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        coinCap\n                    \n                \n\n                \n                    \n                        getcoinCap()\n                    \n                \n                            \n                                \n                                    Defined in src/config.ts:34\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        sprintsTableName\n                    \n                \n\n                \n                    \n                        getsprintsTableName()\n                    \n                \n                            \n                                \n                                    Defined in src/config.ts:37\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        scoresTableName\n                    \n                \n\n                \n                    \n                        getscoresTableName()\n                    \n                \n                            \n                                \n                                    Defined in src/config.ts:40\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        authTableName\n                    \n                \n\n                \n                    \n                        getauthTableName()\n                    \n                \n                            \n                                \n                                    Defined in src/config.ts:43\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        authSessionTableName\n                    \n                \n\n                \n                    \n                        getauthSessionTableName()\n                    \n                \n                            \n                                \n                                    Defined in src/config.ts:46\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        allowedCorsOrigin\n                    \n                \n\n                \n                    \n                        getallowedCorsOrigin()\n                    \n                \n                            \n                                \n                                    Defined in src/config.ts:49\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        listenPort\n                    \n                \n\n                \n                    \n                        getlistenPort()\n                    \n                \n                            \n                                \n                                    Defined in src/config.ts:52\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        suiNetwork\n                    \n                \n\n                \n                    \n                        getsuiNetwork()\n                    \n                \n                            \n                                \n                                    Defined in src/config.ts:65\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        certFilePath\n                    \n                \n\n                \n                    \n                        getcertFilePath()\n                    \n                \n                            \n                                \n                                    Defined in src/config.ts:68\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        keyFilePath\n                    \n                \n\n                \n                    \n                        getkeyFilePath()\n                    \n                \n                            \n                                \n                                    Defined in src/config.ts:71\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        httpPort\n                    \n                \n\n                \n                    \n                        gethttpPort()\n                    \n                \n                            \n                                \n                                    Defined in src/config.ts:74\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        httpsPort\n                    \n                \n\n                \n                    \n                        gethttpsPort()\n                    \n                \n                            \n                                \n                                    Defined in src/config.ts:77\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        export class Config {\n    static get aProp(): string { return \"no:\" }\n    static aMethod(): string { return \"no:\" }\n    static get useTls(): boolean {\n        return Config.getBooleanSetting(process.env.USE_TLS);\n    }\n    static get useCors(): boolean {\n        return Config.getBooleanSetting(process.env.USE_CORS);\n    }\n    static get detectPackageInfo(): boolean {\n        return Config.getBooleanSetting(process.env.DETECT_PACKAGE_INFO);\n    }\n    static get mnemonicPhrase(): string {\n        return process.env.MNEMONIC_PHRASE;\n    }\n    static get beatsCoinPackageId(): string {\n        return process.env.BEATS_COIN_PACKAGE_ID;\n    }\n    static get beatsNftPackageId(): string {\n        return process.env.BEATS_NFT_PACKAGE_ID;\n    }\n    static get beatmapsNftPackageId(): string {\n        return process.env.BEATMAPS_NFT_PACKAGE_ID;\n    }\n    static get treasuryCap(): string {\n        return process.env.TREASURY_CAP;\n    }\n    static get beatsNftOwnerCap(): string {\n        return process.env.BEATS_NFT_OWNER_CAP;\n    }\n    static get beatmapsNftOwnerCap(): string {\n        return process.env.BEATMAPS_NFT_OWNER_CAP;\n    }\n    static get coinCap(): string {\n        return process.env.COIN_CAP;\n    }\n    static get sprintsTableName(): string {\n        return process.env.DBTABLE_NAME_SPRINTS;\n    }\n    static get scoresTableName(): string {\n        return process.env.DBTABLE_NAME_SCORES;\n    }\n    static get authTableName(): string {\n        return process.env.DBTABLE_NAME_AUTH || \"auth-dev\";\n    }\n    static get authSessionTableName(): string {\n        return process.env.DBTABLE_NAME_AUTH_SESSION || \"auth-session-dev\";\n    }\n    static get allowedCorsOrigin(): string {\n        return `${process.env.GAME_SERVER_DOMAIN}`;\n    }\n    static get listenPort(): number {\n        return Config.useTls ? Config.httpsPort : Config.httpPort;\n    }\n    \n    static getBooleanSetting(value: string) : boolean {\n        if (value) {\n            value = value.trim().toLowerCase();\n            return (value == \"true\" || value == \"1\" || value == \"t\" || value == \"y\" || value == \"yes\");\n        }\n        \n        return false;\n    }\n\n    static get suiNetwork(): string {\n        return process.env.SUI_NETWORK;\n    }\n    static get certFilePath(): string {\n        return process.env.CERT_FILE_PATH;\n    }\n    static get keyFilePath(): string {\n        return process.env.KEY_FILE_PATH;\n    }\n    static get httpPort(): number {\n        return parseInt(process.env.HTTP_PORT);\n    }\n    static get httpsPort(): number {\n        return parseInt(process.env.HTTPS_PORT);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DynamoDbAccess.html":{"url":"classes/DynamoDbAccess.html","title":"class - DynamoDbAccess","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DynamoDbAccess\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dataAccess/DynamoDbAccess.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dynamoDb\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteItem\n                            \n                            \n                                    Async\n                                getItem\n                            \n                            \n                                    Async\n                                putItem\n                            \n                            \n                                    Async\n                                query\n                            \n                            \n                                    Async\n                                scanTable\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/dataAccess/DynamoDbAccess.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        dynamoDb\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/dataAccess/DynamoDbAccess.ts:6\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteItem(params: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/dataAccess/DynamoDbAccess.ts:112\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    getItem(params: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/dataAccess/DynamoDbAccess.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        putItem\n                        \n                    \n                \n            \n            \n                \n                        \n                    putItem(params: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/dataAccess/DynamoDbAccess.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        query\n                        \n                    \n                \n            \n            \n                \n                        \n                    query(params: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/dataAccess/DynamoDbAccess.ts:89\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                params\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        scanTable\n                        \n                    \n                \n            \n            \n                \n                        \n                    scanTable(tableName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/dataAccess/DynamoDbAccess.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tableName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Config } from '../config';\nimport { IDynamoResult } from './IDynamoResult';\nconst AWS = require(\"aws-sdk\");\n\nexport class DynamoDbAccess  {\n    dynamoDb: any;\n\n    constructor() {\n        AWS.config.update({\n            accessKeyId: process.env.AWS_ACCESS_KEY,\n            secretAccessKey: process.env.AWS_ACCESS_SECRET,\n            region: process.env.AWS_REGION\n        });\n        this.dynamoDb = new AWS.DynamoDB({ apiVersion: '2012-08-10' });\n    }\n\n    async getItem(params: any): Promise {\n        const result: IDynamoResult = await new Promise((resolve, reject) => {\n            this.dynamoDb.getItem(params, (err, data) => {\n                if (err) {\n                    console.error(err);\n                    resolve({\n                        success: false,\n                        error: err,\n                        data: null\n                    });\n                } else {\n                    resolve({\n                        success: true,\n                        error: null,\n                        data: data.Item\n                    });\n                }\n            });\n        });\n\n        return result;\n    }\n\n    async putItem(params: any): Promise {\n        const result: IDynamoResult = await new Promise((resolve, reject) => {\n            this.dynamoDb.putItem(params, (err, data) => {\n                if (err) {\n                    console.error(err);\n                    resolve({\n                        success: false,\n                        error: err,\n                        data: params\n                    });\n                } else {\n                    resolve({\n                        success: true,\n                        error: null,\n                        data: params\n                    });\n                }\n            });\n        });\n        return result;\n    }\n\n    async scanTable(tableName: string): Promise {\n        const params = {\n            TableName: tableName\n        };\n\n        const results: any = await new Promise((resolve, reject) => {\n            this.dynamoDb.scan(params, (error, data) => {\n                if (error) {\n                    console.error(\"Unable to scan the table. Error JSON:\", JSON.stringify(error, null, 2));\n                    resolve({\n                        success: false,\n                        error: error,\n                        data: null\n                    });\n                } else {\n                    resolve({\n                        success: true,\n                        error: null,\n                        data: data.Items\n                    });\n                }\n            });\n        });\n\n        return results;\n    }\n    \n    async query(params: any): Promise {\n        const results: any = await new Promise((resolve, reject) => {\n            this.dynamoDb.query(params, (error, data) => {\n                if (error) {\n                    console.error(\"Unable to scan the table. Error JSON:\", JSON.stringify(error, null, 2));\n                    resolve({\n                        success: false,\n                        error: error,\n                        data: null\n                    });\n                } else {\n                    resolve({\n                        success: true,\n                        error: null,\n                        data: data.Items\n                    });\n                }\n            });\n        });\n\n        return results;\n    }\n    \n    async deleteItem(params: any): Promise {\n        const result: IDynamoResult = await new Promise((resolve, reject) => {\n            this.dynamoDb.deleteItem(params, (err, data) => {\n                if (err) {\n                    console.error(err);\n                    resolve({\n                        success: false,\n                        error: err,\n                        data: params\n                    });\n                } else {\n                    resolve({\n                        success: true,\n                        error: null,\n                        data: params\n                    });\n                }\n            });\n        });\n        return result;\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetAccountDto.html":{"url":"classes/GetAccountDto.html","title":"class - GetAccountDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetAccountDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/req.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authId\n                            \n                            \n                                    \n                                authType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Auth ID, e.g. EVM wallet address or username'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:191\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authType\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"evm\" | \"sui\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Auth type, e.g. \"evm\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:193\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass ResponseDtoBase {\n    @ApiProperty({ description: 'The current network (e.g. devnet)' })\n    network: string;\n}\n\nexport class MintBeatsNftDto {\n    @ApiProperty({ description: 'Name of the NFT' })\n    name: string;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'URL of the NFT image' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintBeatmapsNftDto {\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'Username of the beatmap creator' })\n    username: string;\n    @ApiProperty({ description: 'Song title or beatmap title' })\n    title: string;\n    @ApiProperty({ description: 'Song artist' })\n    artist: string;\n    @ApiProperty({ description: 'Beatmap json' })\n    beatmapJson: string;\n    @ApiProperty({ description: 'NFT image url' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintTokenDto {\n    @ApiProperty({ description: 'The amount of the token' })\n    amount: number;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n}\n\nexport class GetTokenBalanceDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class GetBeatsNftsDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class MintNftResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n    @ApiProperty({ description: 'The list of NFT addresses minted' })\n    addresses: string[];\n}\n\nexport class RequestNFTResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class MintTokenResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class GetTokenBalanceResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The balance of the wallet' })\n    balance: number;\n}\n\nexport class BeatsNftDto {\n    name: string;\n    url: string;\n}\n\nexport class BeatmapsNftDto {\n    username: string;\n    title: string;\n    artist: string;\n    beatmapJson: string;\n}\n\nexport class GetBeatsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The unique BEATS NFTs owned' })\n    nfts: BeatsNftDto[];\n}\n\nexport class GetBeatmapsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The BEATMAPS NFTs owned' })\n    nfts: BeatmapsNftDto[];\n}\n\nexport class VerifySignatureDto {\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'The expected signature' })\n    signature: string;\n    @ApiProperty({ description: 'The original message that was signed' })\n    message: string;\n}\n\nexport class VerifySignatureResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n}\n\n/// --- LEADERBOARD --- ///\n\nexport class GetLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The max number of records to include in the response' })\n    limit: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class LeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The total score of the users' })\n    score: number;\n    @ApiProperty({ description: 'The username of the user' })\n    username: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class GetLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of each user' })\n    scores: LeaderboardDto[];\n}\n\nexport class AddLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    authId: string;\n    @ApiProperty({ description: 'The auth type of the user login' })\n    authType: string;\n    @ApiProperty({ description: 'The score to add' })\n    score: number;\n    @ApiProperty({ description: 'The present username of the user being added' })\n    username: string;\n}\n\nexport class AddLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of the user' })\n    score: number;\n}\n\nexport class GetLeaderboardSprintDto {\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n    @ApiProperty({ description: 'Optional max number of records to return' })\n    limit: number;\n}\n\nexport class GetLeaderboardSprintResponseDto {\n    @ApiProperty({ description: 'Unique id of sprint' })\n    sprintId: string;\n    @ApiProperty({ description: 'Whether or not sprint is currently active' })\n    active: boolean;\n    @ApiProperty({ description: 'Sprint start date' })\n    startDate: number;\n    @ApiProperty({ description: 'Sprint end date' })\n    endDate: number;\n}\n\n/// --- AUTH --- ///\n\nexport class CheckUsernameDto {\n    @ApiProperty({ description: 'Username to check' })\n    username: string;\n}\n\nexport class CheckUsernameResponseDto {\n    @ApiProperty({ description: 'Username exists or not' })\n    exists: boolean;\n}\n\n//TODO: need this?\nexport class GetAccountDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n}\n\nexport class GetAccountResponseDto {\n    @ApiProperty({ description: 'SUI wallet address' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Account unique username' })\n    username: string;\n    @ApiProperty({ description: 'Player level' })\n    level: number;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class StartAuthSessionDto {\n    @ApiProperty({ description: 'EVM wallet address' })\n    evmWallet: string;\n}\n\nexport class StartAuthSessionResponseDto {\n    @ApiProperty({ description: 'The unique id of the created session' })\n    sessionId: string;\n    @ApiProperty({ description: 'A message for the client to sign as a challenge' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The username of the specified account, if it exists' })\n    username: string;\n}\n\nexport class AuthVerifyDto {\n    @ApiProperty({ description: 'Wallet address' })\n    wallet: string;\n    @ApiProperty({ description: 'Wallet type can be evm or sui' })\n    walletType: 'sui' | 'evm';\n    @ApiProperty({ description: 'The action being taken; verify signature, or update account' })\n    action: 'verify' | 'update';\n    @ApiProperty({ description: 'The unique id of this session' })\n    sessionId: string;\n    @ApiProperty({ description: 'The message that was signed by the client' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The message signature as signed by caller' })\n    signature: string;\n    @ApiProperty({ description: 'A unique user-chosen username' })\n    username: string;\n}\n\nexport class AuthVerifyResponseDto {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    wallet: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n    @ApiProperty({ description: 'Sui wallet address (if any)' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Username of user' })\n    username: string;\n}\n\nexport class UpdateUserLevelDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n    @ApiProperty({ description: 'Level of player' })\n    level: number;\n}\n\nexport class UpdateUserOAuthDto {\n    @ApiProperty({ description: 'Sui wallet address' })\n    suiAddress: string;\n    @ApiProperty({ description: 'Token from OAuth login' })\n    oauthToken: string;\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n    @ApiProperty({ description: 'Normally, the email' })\n    username: string;\n}\n\nexport class UpdateUserOAuthResponseDto {\n    @ApiProperty({ description: '' })\n    authId: string;\n    @ApiProperty({ description: '' })\n    username: string;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class GetUserOAuthDto {\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n}\n\nexport class GetUserOAuthResponseDto extends GetAccountResponseDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetAccountResponseDto.html":{"url":"classes/GetAccountResponseDto.html","title":"class - GetAccountResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetAccountResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/req.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                level\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                suiWallet\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Player level'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:202\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Success or failure of the operation'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:204\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        suiWallet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'SUI wallet address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:198\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Account unique username'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:200\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass ResponseDtoBase {\n    @ApiProperty({ description: 'The current network (e.g. devnet)' })\n    network: string;\n}\n\nexport class MintBeatsNftDto {\n    @ApiProperty({ description: 'Name of the NFT' })\n    name: string;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'URL of the NFT image' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintBeatmapsNftDto {\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'Username of the beatmap creator' })\n    username: string;\n    @ApiProperty({ description: 'Song title or beatmap title' })\n    title: string;\n    @ApiProperty({ description: 'Song artist' })\n    artist: string;\n    @ApiProperty({ description: 'Beatmap json' })\n    beatmapJson: string;\n    @ApiProperty({ description: 'NFT image url' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintTokenDto {\n    @ApiProperty({ description: 'The amount of the token' })\n    amount: number;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n}\n\nexport class GetTokenBalanceDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class GetBeatsNftsDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class MintNftResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n    @ApiProperty({ description: 'The list of NFT addresses minted' })\n    addresses: string[];\n}\n\nexport class RequestNFTResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class MintTokenResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class GetTokenBalanceResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The balance of the wallet' })\n    balance: number;\n}\n\nexport class BeatsNftDto {\n    name: string;\n    url: string;\n}\n\nexport class BeatmapsNftDto {\n    username: string;\n    title: string;\n    artist: string;\n    beatmapJson: string;\n}\n\nexport class GetBeatsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The unique BEATS NFTs owned' })\n    nfts: BeatsNftDto[];\n}\n\nexport class GetBeatmapsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The BEATMAPS NFTs owned' })\n    nfts: BeatmapsNftDto[];\n}\n\nexport class VerifySignatureDto {\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'The expected signature' })\n    signature: string;\n    @ApiProperty({ description: 'The original message that was signed' })\n    message: string;\n}\n\nexport class VerifySignatureResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n}\n\n/// --- LEADERBOARD --- ///\n\nexport class GetLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The max number of records to include in the response' })\n    limit: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class LeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The total score of the users' })\n    score: number;\n    @ApiProperty({ description: 'The username of the user' })\n    username: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class GetLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of each user' })\n    scores: LeaderboardDto[];\n}\n\nexport class AddLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    authId: string;\n    @ApiProperty({ description: 'The auth type of the user login' })\n    authType: string;\n    @ApiProperty({ description: 'The score to add' })\n    score: number;\n    @ApiProperty({ description: 'The present username of the user being added' })\n    username: string;\n}\n\nexport class AddLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of the user' })\n    score: number;\n}\n\nexport class GetLeaderboardSprintDto {\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n    @ApiProperty({ description: 'Optional max number of records to return' })\n    limit: number;\n}\n\nexport class GetLeaderboardSprintResponseDto {\n    @ApiProperty({ description: 'Unique id of sprint' })\n    sprintId: string;\n    @ApiProperty({ description: 'Whether or not sprint is currently active' })\n    active: boolean;\n    @ApiProperty({ description: 'Sprint start date' })\n    startDate: number;\n    @ApiProperty({ description: 'Sprint end date' })\n    endDate: number;\n}\n\n/// --- AUTH --- ///\n\nexport class CheckUsernameDto {\n    @ApiProperty({ description: 'Username to check' })\n    username: string;\n}\n\nexport class CheckUsernameResponseDto {\n    @ApiProperty({ description: 'Username exists or not' })\n    exists: boolean;\n}\n\n//TODO: need this?\nexport class GetAccountDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n}\n\nexport class GetAccountResponseDto {\n    @ApiProperty({ description: 'SUI wallet address' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Account unique username' })\n    username: string;\n    @ApiProperty({ description: 'Player level' })\n    level: number;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class StartAuthSessionDto {\n    @ApiProperty({ description: 'EVM wallet address' })\n    evmWallet: string;\n}\n\nexport class StartAuthSessionResponseDto {\n    @ApiProperty({ description: 'The unique id of the created session' })\n    sessionId: string;\n    @ApiProperty({ description: 'A message for the client to sign as a challenge' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The username of the specified account, if it exists' })\n    username: string;\n}\n\nexport class AuthVerifyDto {\n    @ApiProperty({ description: 'Wallet address' })\n    wallet: string;\n    @ApiProperty({ description: 'Wallet type can be evm or sui' })\n    walletType: 'sui' | 'evm';\n    @ApiProperty({ description: 'The action being taken; verify signature, or update account' })\n    action: 'verify' | 'update';\n    @ApiProperty({ description: 'The unique id of this session' })\n    sessionId: string;\n    @ApiProperty({ description: 'The message that was signed by the client' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The message signature as signed by caller' })\n    signature: string;\n    @ApiProperty({ description: 'A unique user-chosen username' })\n    username: string;\n}\n\nexport class AuthVerifyResponseDto {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    wallet: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n    @ApiProperty({ description: 'Sui wallet address (if any)' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Username of user' })\n    username: string;\n}\n\nexport class UpdateUserLevelDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n    @ApiProperty({ description: 'Level of player' })\n    level: number;\n}\n\nexport class UpdateUserOAuthDto {\n    @ApiProperty({ description: 'Sui wallet address' })\n    suiAddress: string;\n    @ApiProperty({ description: 'Token from OAuth login' })\n    oauthToken: string;\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n    @ApiProperty({ description: 'Normally, the email' })\n    username: string;\n}\n\nexport class UpdateUserOAuthResponseDto {\n    @ApiProperty({ description: '' })\n    authId: string;\n    @ApiProperty({ description: '' })\n    username: string;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class GetUserOAuthDto {\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n}\n\nexport class GetUserOAuthResponseDto extends GetAccountResponseDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetBeatmapsNftsResponseDto.html":{"url":"classes/GetBeatmapsNftsResponseDto.html","title":"class - GetBeatmapsNftsResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetBeatmapsNftsResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/req.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ResponseDtoBase\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                nfts\n                            \n                            \n                                    \n                                network\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        nfts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BeatmapsNftDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The BEATMAPS NFTs owned'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        network\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The current network (e.g. devnet)'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ResponseDtoBase\n\n                            \n                        \n                    \n                        \n                                Defined in         ResponseDtoBase:5\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass ResponseDtoBase {\n    @ApiProperty({ description: 'The current network (e.g. devnet)' })\n    network: string;\n}\n\nexport class MintBeatsNftDto {\n    @ApiProperty({ description: 'Name of the NFT' })\n    name: string;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'URL of the NFT image' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintBeatmapsNftDto {\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'Username of the beatmap creator' })\n    username: string;\n    @ApiProperty({ description: 'Song title or beatmap title' })\n    title: string;\n    @ApiProperty({ description: 'Song artist' })\n    artist: string;\n    @ApiProperty({ description: 'Beatmap json' })\n    beatmapJson: string;\n    @ApiProperty({ description: 'NFT image url' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintTokenDto {\n    @ApiProperty({ description: 'The amount of the token' })\n    amount: number;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n}\n\nexport class GetTokenBalanceDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class GetBeatsNftsDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class MintNftResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n    @ApiProperty({ description: 'The list of NFT addresses minted' })\n    addresses: string[];\n}\n\nexport class RequestNFTResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class MintTokenResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class GetTokenBalanceResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The balance of the wallet' })\n    balance: number;\n}\n\nexport class BeatsNftDto {\n    name: string;\n    url: string;\n}\n\nexport class BeatmapsNftDto {\n    username: string;\n    title: string;\n    artist: string;\n    beatmapJson: string;\n}\n\nexport class GetBeatsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The unique BEATS NFTs owned' })\n    nfts: BeatsNftDto[];\n}\n\nexport class GetBeatmapsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The BEATMAPS NFTs owned' })\n    nfts: BeatmapsNftDto[];\n}\n\nexport class VerifySignatureDto {\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'The expected signature' })\n    signature: string;\n    @ApiProperty({ description: 'The original message that was signed' })\n    message: string;\n}\n\nexport class VerifySignatureResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n}\n\n/// --- LEADERBOARD --- ///\n\nexport class GetLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The max number of records to include in the response' })\n    limit: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class LeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The total score of the users' })\n    score: number;\n    @ApiProperty({ description: 'The username of the user' })\n    username: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class GetLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of each user' })\n    scores: LeaderboardDto[];\n}\n\nexport class AddLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    authId: string;\n    @ApiProperty({ description: 'The auth type of the user login' })\n    authType: string;\n    @ApiProperty({ description: 'The score to add' })\n    score: number;\n    @ApiProperty({ description: 'The present username of the user being added' })\n    username: string;\n}\n\nexport class AddLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of the user' })\n    score: number;\n}\n\nexport class GetLeaderboardSprintDto {\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n    @ApiProperty({ description: 'Optional max number of records to return' })\n    limit: number;\n}\n\nexport class GetLeaderboardSprintResponseDto {\n    @ApiProperty({ description: 'Unique id of sprint' })\n    sprintId: string;\n    @ApiProperty({ description: 'Whether or not sprint is currently active' })\n    active: boolean;\n    @ApiProperty({ description: 'Sprint start date' })\n    startDate: number;\n    @ApiProperty({ description: 'Sprint end date' })\n    endDate: number;\n}\n\n/// --- AUTH --- ///\n\nexport class CheckUsernameDto {\n    @ApiProperty({ description: 'Username to check' })\n    username: string;\n}\n\nexport class CheckUsernameResponseDto {\n    @ApiProperty({ description: 'Username exists or not' })\n    exists: boolean;\n}\n\n//TODO: need this?\nexport class GetAccountDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n}\n\nexport class GetAccountResponseDto {\n    @ApiProperty({ description: 'SUI wallet address' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Account unique username' })\n    username: string;\n    @ApiProperty({ description: 'Player level' })\n    level: number;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class StartAuthSessionDto {\n    @ApiProperty({ description: 'EVM wallet address' })\n    evmWallet: string;\n}\n\nexport class StartAuthSessionResponseDto {\n    @ApiProperty({ description: 'The unique id of the created session' })\n    sessionId: string;\n    @ApiProperty({ description: 'A message for the client to sign as a challenge' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The username of the specified account, if it exists' })\n    username: string;\n}\n\nexport class AuthVerifyDto {\n    @ApiProperty({ description: 'Wallet address' })\n    wallet: string;\n    @ApiProperty({ description: 'Wallet type can be evm or sui' })\n    walletType: 'sui' | 'evm';\n    @ApiProperty({ description: 'The action being taken; verify signature, or update account' })\n    action: 'verify' | 'update';\n    @ApiProperty({ description: 'The unique id of this session' })\n    sessionId: string;\n    @ApiProperty({ description: 'The message that was signed by the client' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The message signature as signed by caller' })\n    signature: string;\n    @ApiProperty({ description: 'A unique user-chosen username' })\n    username: string;\n}\n\nexport class AuthVerifyResponseDto {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    wallet: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n    @ApiProperty({ description: 'Sui wallet address (if any)' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Username of user' })\n    username: string;\n}\n\nexport class UpdateUserLevelDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n    @ApiProperty({ description: 'Level of player' })\n    level: number;\n}\n\nexport class UpdateUserOAuthDto {\n    @ApiProperty({ description: 'Sui wallet address' })\n    suiAddress: string;\n    @ApiProperty({ description: 'Token from OAuth login' })\n    oauthToken: string;\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n    @ApiProperty({ description: 'Normally, the email' })\n    username: string;\n}\n\nexport class UpdateUserOAuthResponseDto {\n    @ApiProperty({ description: '' })\n    authId: string;\n    @ApiProperty({ description: '' })\n    username: string;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class GetUserOAuthDto {\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n}\n\nexport class GetUserOAuthResponseDto extends GetAccountResponseDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetBeatsNftsDto.html":{"url":"classes/GetBeatsNftsDto.html","title":"class - GetBeatsNftsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetBeatsNftsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/req.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                wallet\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        wallet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The address of the wallet'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:50\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass ResponseDtoBase {\n    @ApiProperty({ description: 'The current network (e.g. devnet)' })\n    network: string;\n}\n\nexport class MintBeatsNftDto {\n    @ApiProperty({ description: 'Name of the NFT' })\n    name: string;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'URL of the NFT image' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintBeatmapsNftDto {\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'Username of the beatmap creator' })\n    username: string;\n    @ApiProperty({ description: 'Song title or beatmap title' })\n    title: string;\n    @ApiProperty({ description: 'Song artist' })\n    artist: string;\n    @ApiProperty({ description: 'Beatmap json' })\n    beatmapJson: string;\n    @ApiProperty({ description: 'NFT image url' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintTokenDto {\n    @ApiProperty({ description: 'The amount of the token' })\n    amount: number;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n}\n\nexport class GetTokenBalanceDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class GetBeatsNftsDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class MintNftResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n    @ApiProperty({ description: 'The list of NFT addresses minted' })\n    addresses: string[];\n}\n\nexport class RequestNFTResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class MintTokenResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class GetTokenBalanceResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The balance of the wallet' })\n    balance: number;\n}\n\nexport class BeatsNftDto {\n    name: string;\n    url: string;\n}\n\nexport class BeatmapsNftDto {\n    username: string;\n    title: string;\n    artist: string;\n    beatmapJson: string;\n}\n\nexport class GetBeatsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The unique BEATS NFTs owned' })\n    nfts: BeatsNftDto[];\n}\n\nexport class GetBeatmapsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The BEATMAPS NFTs owned' })\n    nfts: BeatmapsNftDto[];\n}\n\nexport class VerifySignatureDto {\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'The expected signature' })\n    signature: string;\n    @ApiProperty({ description: 'The original message that was signed' })\n    message: string;\n}\n\nexport class VerifySignatureResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n}\n\n/// --- LEADERBOARD --- ///\n\nexport class GetLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The max number of records to include in the response' })\n    limit: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class LeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The total score of the users' })\n    score: number;\n    @ApiProperty({ description: 'The username of the user' })\n    username: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class GetLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of each user' })\n    scores: LeaderboardDto[];\n}\n\nexport class AddLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    authId: string;\n    @ApiProperty({ description: 'The auth type of the user login' })\n    authType: string;\n    @ApiProperty({ description: 'The score to add' })\n    score: number;\n    @ApiProperty({ description: 'The present username of the user being added' })\n    username: string;\n}\n\nexport class AddLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of the user' })\n    score: number;\n}\n\nexport class GetLeaderboardSprintDto {\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n    @ApiProperty({ description: 'Optional max number of records to return' })\n    limit: number;\n}\n\nexport class GetLeaderboardSprintResponseDto {\n    @ApiProperty({ description: 'Unique id of sprint' })\n    sprintId: string;\n    @ApiProperty({ description: 'Whether or not sprint is currently active' })\n    active: boolean;\n    @ApiProperty({ description: 'Sprint start date' })\n    startDate: number;\n    @ApiProperty({ description: 'Sprint end date' })\n    endDate: number;\n}\n\n/// --- AUTH --- ///\n\nexport class CheckUsernameDto {\n    @ApiProperty({ description: 'Username to check' })\n    username: string;\n}\n\nexport class CheckUsernameResponseDto {\n    @ApiProperty({ description: 'Username exists or not' })\n    exists: boolean;\n}\n\n//TODO: need this?\nexport class GetAccountDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n}\n\nexport class GetAccountResponseDto {\n    @ApiProperty({ description: 'SUI wallet address' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Account unique username' })\n    username: string;\n    @ApiProperty({ description: 'Player level' })\n    level: number;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class StartAuthSessionDto {\n    @ApiProperty({ description: 'EVM wallet address' })\n    evmWallet: string;\n}\n\nexport class StartAuthSessionResponseDto {\n    @ApiProperty({ description: 'The unique id of the created session' })\n    sessionId: string;\n    @ApiProperty({ description: 'A message for the client to sign as a challenge' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The username of the specified account, if it exists' })\n    username: string;\n}\n\nexport class AuthVerifyDto {\n    @ApiProperty({ description: 'Wallet address' })\n    wallet: string;\n    @ApiProperty({ description: 'Wallet type can be evm or sui' })\n    walletType: 'sui' | 'evm';\n    @ApiProperty({ description: 'The action being taken; verify signature, or update account' })\n    action: 'verify' | 'update';\n    @ApiProperty({ description: 'The unique id of this session' })\n    sessionId: string;\n    @ApiProperty({ description: 'The message that was signed by the client' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The message signature as signed by caller' })\n    signature: string;\n    @ApiProperty({ description: 'A unique user-chosen username' })\n    username: string;\n}\n\nexport class AuthVerifyResponseDto {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    wallet: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n    @ApiProperty({ description: 'Sui wallet address (if any)' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Username of user' })\n    username: string;\n}\n\nexport class UpdateUserLevelDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n    @ApiProperty({ description: 'Level of player' })\n    level: number;\n}\n\nexport class UpdateUserOAuthDto {\n    @ApiProperty({ description: 'Sui wallet address' })\n    suiAddress: string;\n    @ApiProperty({ description: 'Token from OAuth login' })\n    oauthToken: string;\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n    @ApiProperty({ description: 'Normally, the email' })\n    username: string;\n}\n\nexport class UpdateUserOAuthResponseDto {\n    @ApiProperty({ description: '' })\n    authId: string;\n    @ApiProperty({ description: '' })\n    username: string;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class GetUserOAuthDto {\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n}\n\nexport class GetUserOAuthResponseDto extends GetAccountResponseDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetBeatsNftsResponseDto.html":{"url":"classes/GetBeatsNftsResponseDto.html","title":"class - GetBeatsNftsResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetBeatsNftsResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/req.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ResponseDtoBase\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                nfts\n                            \n                            \n                                    \n                                network\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        nfts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BeatsNftDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The unique BEATS NFTs owned'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        network\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The current network (e.g. devnet)'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ResponseDtoBase\n\n                            \n                        \n                    \n                        \n                                Defined in         ResponseDtoBase:5\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass ResponseDtoBase {\n    @ApiProperty({ description: 'The current network (e.g. devnet)' })\n    network: string;\n}\n\nexport class MintBeatsNftDto {\n    @ApiProperty({ description: 'Name of the NFT' })\n    name: string;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'URL of the NFT image' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintBeatmapsNftDto {\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'Username of the beatmap creator' })\n    username: string;\n    @ApiProperty({ description: 'Song title or beatmap title' })\n    title: string;\n    @ApiProperty({ description: 'Song artist' })\n    artist: string;\n    @ApiProperty({ description: 'Beatmap json' })\n    beatmapJson: string;\n    @ApiProperty({ description: 'NFT image url' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintTokenDto {\n    @ApiProperty({ description: 'The amount of the token' })\n    amount: number;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n}\n\nexport class GetTokenBalanceDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class GetBeatsNftsDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class MintNftResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n    @ApiProperty({ description: 'The list of NFT addresses minted' })\n    addresses: string[];\n}\n\nexport class RequestNFTResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class MintTokenResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class GetTokenBalanceResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The balance of the wallet' })\n    balance: number;\n}\n\nexport class BeatsNftDto {\n    name: string;\n    url: string;\n}\n\nexport class BeatmapsNftDto {\n    username: string;\n    title: string;\n    artist: string;\n    beatmapJson: string;\n}\n\nexport class GetBeatsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The unique BEATS NFTs owned' })\n    nfts: BeatsNftDto[];\n}\n\nexport class GetBeatmapsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The BEATMAPS NFTs owned' })\n    nfts: BeatmapsNftDto[];\n}\n\nexport class VerifySignatureDto {\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'The expected signature' })\n    signature: string;\n    @ApiProperty({ description: 'The original message that was signed' })\n    message: string;\n}\n\nexport class VerifySignatureResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n}\n\n/// --- LEADERBOARD --- ///\n\nexport class GetLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The max number of records to include in the response' })\n    limit: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class LeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The total score of the users' })\n    score: number;\n    @ApiProperty({ description: 'The username of the user' })\n    username: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class GetLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of each user' })\n    scores: LeaderboardDto[];\n}\n\nexport class AddLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    authId: string;\n    @ApiProperty({ description: 'The auth type of the user login' })\n    authType: string;\n    @ApiProperty({ description: 'The score to add' })\n    score: number;\n    @ApiProperty({ description: 'The present username of the user being added' })\n    username: string;\n}\n\nexport class AddLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of the user' })\n    score: number;\n}\n\nexport class GetLeaderboardSprintDto {\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n    @ApiProperty({ description: 'Optional max number of records to return' })\n    limit: number;\n}\n\nexport class GetLeaderboardSprintResponseDto {\n    @ApiProperty({ description: 'Unique id of sprint' })\n    sprintId: string;\n    @ApiProperty({ description: 'Whether or not sprint is currently active' })\n    active: boolean;\n    @ApiProperty({ description: 'Sprint start date' })\n    startDate: number;\n    @ApiProperty({ description: 'Sprint end date' })\n    endDate: number;\n}\n\n/// --- AUTH --- ///\n\nexport class CheckUsernameDto {\n    @ApiProperty({ description: 'Username to check' })\n    username: string;\n}\n\nexport class CheckUsernameResponseDto {\n    @ApiProperty({ description: 'Username exists or not' })\n    exists: boolean;\n}\n\n//TODO: need this?\nexport class GetAccountDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n}\n\nexport class GetAccountResponseDto {\n    @ApiProperty({ description: 'SUI wallet address' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Account unique username' })\n    username: string;\n    @ApiProperty({ description: 'Player level' })\n    level: number;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class StartAuthSessionDto {\n    @ApiProperty({ description: 'EVM wallet address' })\n    evmWallet: string;\n}\n\nexport class StartAuthSessionResponseDto {\n    @ApiProperty({ description: 'The unique id of the created session' })\n    sessionId: string;\n    @ApiProperty({ description: 'A message for the client to sign as a challenge' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The username of the specified account, if it exists' })\n    username: string;\n}\n\nexport class AuthVerifyDto {\n    @ApiProperty({ description: 'Wallet address' })\n    wallet: string;\n    @ApiProperty({ description: 'Wallet type can be evm or sui' })\n    walletType: 'sui' | 'evm';\n    @ApiProperty({ description: 'The action being taken; verify signature, or update account' })\n    action: 'verify' | 'update';\n    @ApiProperty({ description: 'The unique id of this session' })\n    sessionId: string;\n    @ApiProperty({ description: 'The message that was signed by the client' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The message signature as signed by caller' })\n    signature: string;\n    @ApiProperty({ description: 'A unique user-chosen username' })\n    username: string;\n}\n\nexport class AuthVerifyResponseDto {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    wallet: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n    @ApiProperty({ description: 'Sui wallet address (if any)' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Username of user' })\n    username: string;\n}\n\nexport class UpdateUserLevelDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n    @ApiProperty({ description: 'Level of player' })\n    level: number;\n}\n\nexport class UpdateUserOAuthDto {\n    @ApiProperty({ description: 'Sui wallet address' })\n    suiAddress: string;\n    @ApiProperty({ description: 'Token from OAuth login' })\n    oauthToken: string;\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n    @ApiProperty({ description: 'Normally, the email' })\n    username: string;\n}\n\nexport class UpdateUserOAuthResponseDto {\n    @ApiProperty({ description: '' })\n    authId: string;\n    @ApiProperty({ description: '' })\n    username: string;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class GetUserOAuthDto {\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n}\n\nexport class GetUserOAuthResponseDto extends GetAccountResponseDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetLeaderboardDto.html":{"url":"classes/GetLeaderboardDto.html","title":"class - GetLeaderboardDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetLeaderboardDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/req.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                limit\n                            \n                            \n                                    \n                                sprint\n                            \n                            \n                                    \n                                wallet\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The max number of records to include in the response'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:121\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sprint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Optional unique id of sprint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:123\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        wallet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The address of the wallet of the user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:119\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass ResponseDtoBase {\n    @ApiProperty({ description: 'The current network (e.g. devnet)' })\n    network: string;\n}\n\nexport class MintBeatsNftDto {\n    @ApiProperty({ description: 'Name of the NFT' })\n    name: string;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'URL of the NFT image' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintBeatmapsNftDto {\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'Username of the beatmap creator' })\n    username: string;\n    @ApiProperty({ description: 'Song title or beatmap title' })\n    title: string;\n    @ApiProperty({ description: 'Song artist' })\n    artist: string;\n    @ApiProperty({ description: 'Beatmap json' })\n    beatmapJson: string;\n    @ApiProperty({ description: 'NFT image url' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintTokenDto {\n    @ApiProperty({ description: 'The amount of the token' })\n    amount: number;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n}\n\nexport class GetTokenBalanceDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class GetBeatsNftsDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class MintNftResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n    @ApiProperty({ description: 'The list of NFT addresses minted' })\n    addresses: string[];\n}\n\nexport class RequestNFTResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class MintTokenResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class GetTokenBalanceResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The balance of the wallet' })\n    balance: number;\n}\n\nexport class BeatsNftDto {\n    name: string;\n    url: string;\n}\n\nexport class BeatmapsNftDto {\n    username: string;\n    title: string;\n    artist: string;\n    beatmapJson: string;\n}\n\nexport class GetBeatsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The unique BEATS NFTs owned' })\n    nfts: BeatsNftDto[];\n}\n\nexport class GetBeatmapsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The BEATMAPS NFTs owned' })\n    nfts: BeatmapsNftDto[];\n}\n\nexport class VerifySignatureDto {\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'The expected signature' })\n    signature: string;\n    @ApiProperty({ description: 'The original message that was signed' })\n    message: string;\n}\n\nexport class VerifySignatureResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n}\n\n/// --- LEADERBOARD --- ///\n\nexport class GetLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The max number of records to include in the response' })\n    limit: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class LeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The total score of the users' })\n    score: number;\n    @ApiProperty({ description: 'The username of the user' })\n    username: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class GetLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of each user' })\n    scores: LeaderboardDto[];\n}\n\nexport class AddLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    authId: string;\n    @ApiProperty({ description: 'The auth type of the user login' })\n    authType: string;\n    @ApiProperty({ description: 'The score to add' })\n    score: number;\n    @ApiProperty({ description: 'The present username of the user being added' })\n    username: string;\n}\n\nexport class AddLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of the user' })\n    score: number;\n}\n\nexport class GetLeaderboardSprintDto {\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n    @ApiProperty({ description: 'Optional max number of records to return' })\n    limit: number;\n}\n\nexport class GetLeaderboardSprintResponseDto {\n    @ApiProperty({ description: 'Unique id of sprint' })\n    sprintId: string;\n    @ApiProperty({ description: 'Whether or not sprint is currently active' })\n    active: boolean;\n    @ApiProperty({ description: 'Sprint start date' })\n    startDate: number;\n    @ApiProperty({ description: 'Sprint end date' })\n    endDate: number;\n}\n\n/// --- AUTH --- ///\n\nexport class CheckUsernameDto {\n    @ApiProperty({ description: 'Username to check' })\n    username: string;\n}\n\nexport class CheckUsernameResponseDto {\n    @ApiProperty({ description: 'Username exists or not' })\n    exists: boolean;\n}\n\n//TODO: need this?\nexport class GetAccountDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n}\n\nexport class GetAccountResponseDto {\n    @ApiProperty({ description: 'SUI wallet address' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Account unique username' })\n    username: string;\n    @ApiProperty({ description: 'Player level' })\n    level: number;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class StartAuthSessionDto {\n    @ApiProperty({ description: 'EVM wallet address' })\n    evmWallet: string;\n}\n\nexport class StartAuthSessionResponseDto {\n    @ApiProperty({ description: 'The unique id of the created session' })\n    sessionId: string;\n    @ApiProperty({ description: 'A message for the client to sign as a challenge' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The username of the specified account, if it exists' })\n    username: string;\n}\n\nexport class AuthVerifyDto {\n    @ApiProperty({ description: 'Wallet address' })\n    wallet: string;\n    @ApiProperty({ description: 'Wallet type can be evm or sui' })\n    walletType: 'sui' | 'evm';\n    @ApiProperty({ description: 'The action being taken; verify signature, or update account' })\n    action: 'verify' | 'update';\n    @ApiProperty({ description: 'The unique id of this session' })\n    sessionId: string;\n    @ApiProperty({ description: 'The message that was signed by the client' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The message signature as signed by caller' })\n    signature: string;\n    @ApiProperty({ description: 'A unique user-chosen username' })\n    username: string;\n}\n\nexport class AuthVerifyResponseDto {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    wallet: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n    @ApiProperty({ description: 'Sui wallet address (if any)' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Username of user' })\n    username: string;\n}\n\nexport class UpdateUserLevelDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n    @ApiProperty({ description: 'Level of player' })\n    level: number;\n}\n\nexport class UpdateUserOAuthDto {\n    @ApiProperty({ description: 'Sui wallet address' })\n    suiAddress: string;\n    @ApiProperty({ description: 'Token from OAuth login' })\n    oauthToken: string;\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n    @ApiProperty({ description: 'Normally, the email' })\n    username: string;\n}\n\nexport class UpdateUserOAuthResponseDto {\n    @ApiProperty({ description: '' })\n    authId: string;\n    @ApiProperty({ description: '' })\n    username: string;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class GetUserOAuthDto {\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n}\n\nexport class GetUserOAuthResponseDto extends GetAccountResponseDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetLeaderboardResponseDto.html":{"url":"classes/GetLeaderboardResponseDto.html","title":"class - GetLeaderboardResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetLeaderboardResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/req.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ResponseDtoBase\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                scores\n                            \n                            \n                                    \n                                network\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        scores\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LeaderboardDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The total score of each user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:139\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        network\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The current network (e.g. devnet)'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ResponseDtoBase\n\n                            \n                        \n                    \n                        \n                                Defined in         ResponseDtoBase:5\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass ResponseDtoBase {\n    @ApiProperty({ description: 'The current network (e.g. devnet)' })\n    network: string;\n}\n\nexport class MintBeatsNftDto {\n    @ApiProperty({ description: 'Name of the NFT' })\n    name: string;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'URL of the NFT image' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintBeatmapsNftDto {\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'Username of the beatmap creator' })\n    username: string;\n    @ApiProperty({ description: 'Song title or beatmap title' })\n    title: string;\n    @ApiProperty({ description: 'Song artist' })\n    artist: string;\n    @ApiProperty({ description: 'Beatmap json' })\n    beatmapJson: string;\n    @ApiProperty({ description: 'NFT image url' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintTokenDto {\n    @ApiProperty({ description: 'The amount of the token' })\n    amount: number;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n}\n\nexport class GetTokenBalanceDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class GetBeatsNftsDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class MintNftResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n    @ApiProperty({ description: 'The list of NFT addresses minted' })\n    addresses: string[];\n}\n\nexport class RequestNFTResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class MintTokenResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class GetTokenBalanceResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The balance of the wallet' })\n    balance: number;\n}\n\nexport class BeatsNftDto {\n    name: string;\n    url: string;\n}\n\nexport class BeatmapsNftDto {\n    username: string;\n    title: string;\n    artist: string;\n    beatmapJson: string;\n}\n\nexport class GetBeatsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The unique BEATS NFTs owned' })\n    nfts: BeatsNftDto[];\n}\n\nexport class GetBeatmapsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The BEATMAPS NFTs owned' })\n    nfts: BeatmapsNftDto[];\n}\n\nexport class VerifySignatureDto {\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'The expected signature' })\n    signature: string;\n    @ApiProperty({ description: 'The original message that was signed' })\n    message: string;\n}\n\nexport class VerifySignatureResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n}\n\n/// --- LEADERBOARD --- ///\n\nexport class GetLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The max number of records to include in the response' })\n    limit: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class LeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The total score of the users' })\n    score: number;\n    @ApiProperty({ description: 'The username of the user' })\n    username: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class GetLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of each user' })\n    scores: LeaderboardDto[];\n}\n\nexport class AddLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    authId: string;\n    @ApiProperty({ description: 'The auth type of the user login' })\n    authType: string;\n    @ApiProperty({ description: 'The score to add' })\n    score: number;\n    @ApiProperty({ description: 'The present username of the user being added' })\n    username: string;\n}\n\nexport class AddLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of the user' })\n    score: number;\n}\n\nexport class GetLeaderboardSprintDto {\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n    @ApiProperty({ description: 'Optional max number of records to return' })\n    limit: number;\n}\n\nexport class GetLeaderboardSprintResponseDto {\n    @ApiProperty({ description: 'Unique id of sprint' })\n    sprintId: string;\n    @ApiProperty({ description: 'Whether or not sprint is currently active' })\n    active: boolean;\n    @ApiProperty({ description: 'Sprint start date' })\n    startDate: number;\n    @ApiProperty({ description: 'Sprint end date' })\n    endDate: number;\n}\n\n/// --- AUTH --- ///\n\nexport class CheckUsernameDto {\n    @ApiProperty({ description: 'Username to check' })\n    username: string;\n}\n\nexport class CheckUsernameResponseDto {\n    @ApiProperty({ description: 'Username exists or not' })\n    exists: boolean;\n}\n\n//TODO: need this?\nexport class GetAccountDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n}\n\nexport class GetAccountResponseDto {\n    @ApiProperty({ description: 'SUI wallet address' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Account unique username' })\n    username: string;\n    @ApiProperty({ description: 'Player level' })\n    level: number;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class StartAuthSessionDto {\n    @ApiProperty({ description: 'EVM wallet address' })\n    evmWallet: string;\n}\n\nexport class StartAuthSessionResponseDto {\n    @ApiProperty({ description: 'The unique id of the created session' })\n    sessionId: string;\n    @ApiProperty({ description: 'A message for the client to sign as a challenge' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The username of the specified account, if it exists' })\n    username: string;\n}\n\nexport class AuthVerifyDto {\n    @ApiProperty({ description: 'Wallet address' })\n    wallet: string;\n    @ApiProperty({ description: 'Wallet type can be evm or sui' })\n    walletType: 'sui' | 'evm';\n    @ApiProperty({ description: 'The action being taken; verify signature, or update account' })\n    action: 'verify' | 'update';\n    @ApiProperty({ description: 'The unique id of this session' })\n    sessionId: string;\n    @ApiProperty({ description: 'The message that was signed by the client' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The message signature as signed by caller' })\n    signature: string;\n    @ApiProperty({ description: 'A unique user-chosen username' })\n    username: string;\n}\n\nexport class AuthVerifyResponseDto {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    wallet: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n    @ApiProperty({ description: 'Sui wallet address (if any)' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Username of user' })\n    username: string;\n}\n\nexport class UpdateUserLevelDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n    @ApiProperty({ description: 'Level of player' })\n    level: number;\n}\n\nexport class UpdateUserOAuthDto {\n    @ApiProperty({ description: 'Sui wallet address' })\n    suiAddress: string;\n    @ApiProperty({ description: 'Token from OAuth login' })\n    oauthToken: string;\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n    @ApiProperty({ description: 'Normally, the email' })\n    username: string;\n}\n\nexport class UpdateUserOAuthResponseDto {\n    @ApiProperty({ description: '' })\n    authId: string;\n    @ApiProperty({ description: '' })\n    username: string;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class GetUserOAuthDto {\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n}\n\nexport class GetUserOAuthResponseDto extends GetAccountResponseDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetLeaderboardSprintDto.html":{"url":"classes/GetLeaderboardSprintDto.html","title":"class - GetLeaderboardSprintDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetLeaderboardSprintDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/req.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                limit\n                            \n                            \n                                    \n                                sprint\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Optional max number of records to return'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:162\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sprint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Optional unique id of sprint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:160\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass ResponseDtoBase {\n    @ApiProperty({ description: 'The current network (e.g. devnet)' })\n    network: string;\n}\n\nexport class MintBeatsNftDto {\n    @ApiProperty({ description: 'Name of the NFT' })\n    name: string;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'URL of the NFT image' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintBeatmapsNftDto {\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'Username of the beatmap creator' })\n    username: string;\n    @ApiProperty({ description: 'Song title or beatmap title' })\n    title: string;\n    @ApiProperty({ description: 'Song artist' })\n    artist: string;\n    @ApiProperty({ description: 'Beatmap json' })\n    beatmapJson: string;\n    @ApiProperty({ description: 'NFT image url' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintTokenDto {\n    @ApiProperty({ description: 'The amount of the token' })\n    amount: number;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n}\n\nexport class GetTokenBalanceDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class GetBeatsNftsDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class MintNftResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n    @ApiProperty({ description: 'The list of NFT addresses minted' })\n    addresses: string[];\n}\n\nexport class RequestNFTResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class MintTokenResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class GetTokenBalanceResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The balance of the wallet' })\n    balance: number;\n}\n\nexport class BeatsNftDto {\n    name: string;\n    url: string;\n}\n\nexport class BeatmapsNftDto {\n    username: string;\n    title: string;\n    artist: string;\n    beatmapJson: string;\n}\n\nexport class GetBeatsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The unique BEATS NFTs owned' })\n    nfts: BeatsNftDto[];\n}\n\nexport class GetBeatmapsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The BEATMAPS NFTs owned' })\n    nfts: BeatmapsNftDto[];\n}\n\nexport class VerifySignatureDto {\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'The expected signature' })\n    signature: string;\n    @ApiProperty({ description: 'The original message that was signed' })\n    message: string;\n}\n\nexport class VerifySignatureResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n}\n\n/// --- LEADERBOARD --- ///\n\nexport class GetLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The max number of records to include in the response' })\n    limit: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class LeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The total score of the users' })\n    score: number;\n    @ApiProperty({ description: 'The username of the user' })\n    username: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class GetLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of each user' })\n    scores: LeaderboardDto[];\n}\n\nexport class AddLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    authId: string;\n    @ApiProperty({ description: 'The auth type of the user login' })\n    authType: string;\n    @ApiProperty({ description: 'The score to add' })\n    score: number;\n    @ApiProperty({ description: 'The present username of the user being added' })\n    username: string;\n}\n\nexport class AddLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of the user' })\n    score: number;\n}\n\nexport class GetLeaderboardSprintDto {\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n    @ApiProperty({ description: 'Optional max number of records to return' })\n    limit: number;\n}\n\nexport class GetLeaderboardSprintResponseDto {\n    @ApiProperty({ description: 'Unique id of sprint' })\n    sprintId: string;\n    @ApiProperty({ description: 'Whether or not sprint is currently active' })\n    active: boolean;\n    @ApiProperty({ description: 'Sprint start date' })\n    startDate: number;\n    @ApiProperty({ description: 'Sprint end date' })\n    endDate: number;\n}\n\n/// --- AUTH --- ///\n\nexport class CheckUsernameDto {\n    @ApiProperty({ description: 'Username to check' })\n    username: string;\n}\n\nexport class CheckUsernameResponseDto {\n    @ApiProperty({ description: 'Username exists or not' })\n    exists: boolean;\n}\n\n//TODO: need this?\nexport class GetAccountDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n}\n\nexport class GetAccountResponseDto {\n    @ApiProperty({ description: 'SUI wallet address' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Account unique username' })\n    username: string;\n    @ApiProperty({ description: 'Player level' })\n    level: number;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class StartAuthSessionDto {\n    @ApiProperty({ description: 'EVM wallet address' })\n    evmWallet: string;\n}\n\nexport class StartAuthSessionResponseDto {\n    @ApiProperty({ description: 'The unique id of the created session' })\n    sessionId: string;\n    @ApiProperty({ description: 'A message for the client to sign as a challenge' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The username of the specified account, if it exists' })\n    username: string;\n}\n\nexport class AuthVerifyDto {\n    @ApiProperty({ description: 'Wallet address' })\n    wallet: string;\n    @ApiProperty({ description: 'Wallet type can be evm or sui' })\n    walletType: 'sui' | 'evm';\n    @ApiProperty({ description: 'The action being taken; verify signature, or update account' })\n    action: 'verify' | 'update';\n    @ApiProperty({ description: 'The unique id of this session' })\n    sessionId: string;\n    @ApiProperty({ description: 'The message that was signed by the client' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The message signature as signed by caller' })\n    signature: string;\n    @ApiProperty({ description: 'A unique user-chosen username' })\n    username: string;\n}\n\nexport class AuthVerifyResponseDto {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    wallet: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n    @ApiProperty({ description: 'Sui wallet address (if any)' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Username of user' })\n    username: string;\n}\n\nexport class UpdateUserLevelDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n    @ApiProperty({ description: 'Level of player' })\n    level: number;\n}\n\nexport class UpdateUserOAuthDto {\n    @ApiProperty({ description: 'Sui wallet address' })\n    suiAddress: string;\n    @ApiProperty({ description: 'Token from OAuth login' })\n    oauthToken: string;\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n    @ApiProperty({ description: 'Normally, the email' })\n    username: string;\n}\n\nexport class UpdateUserOAuthResponseDto {\n    @ApiProperty({ description: '' })\n    authId: string;\n    @ApiProperty({ description: '' })\n    username: string;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class GetUserOAuthDto {\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n}\n\nexport class GetUserOAuthResponseDto extends GetAccountResponseDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetLeaderboardSprintResponseDto.html":{"url":"classes/GetLeaderboardSprintResponseDto.html","title":"class - GetLeaderboardSprintResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetLeaderboardSprintResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/req.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                active\n                            \n                            \n                                    \n                                endDate\n                            \n                            \n                                    \n                                sprintId\n                            \n                            \n                                    \n                                startDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        active\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Whether or not sprint is currently active'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:169\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Sprint end date'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:173\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sprintId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Unique id of sprint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:167\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Sprint start date'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:171\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass ResponseDtoBase {\n    @ApiProperty({ description: 'The current network (e.g. devnet)' })\n    network: string;\n}\n\nexport class MintBeatsNftDto {\n    @ApiProperty({ description: 'Name of the NFT' })\n    name: string;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'URL of the NFT image' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintBeatmapsNftDto {\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'Username of the beatmap creator' })\n    username: string;\n    @ApiProperty({ description: 'Song title or beatmap title' })\n    title: string;\n    @ApiProperty({ description: 'Song artist' })\n    artist: string;\n    @ApiProperty({ description: 'Beatmap json' })\n    beatmapJson: string;\n    @ApiProperty({ description: 'NFT image url' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintTokenDto {\n    @ApiProperty({ description: 'The amount of the token' })\n    amount: number;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n}\n\nexport class GetTokenBalanceDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class GetBeatsNftsDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class MintNftResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n    @ApiProperty({ description: 'The list of NFT addresses minted' })\n    addresses: string[];\n}\n\nexport class RequestNFTResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class MintTokenResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class GetTokenBalanceResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The balance of the wallet' })\n    balance: number;\n}\n\nexport class BeatsNftDto {\n    name: string;\n    url: string;\n}\n\nexport class BeatmapsNftDto {\n    username: string;\n    title: string;\n    artist: string;\n    beatmapJson: string;\n}\n\nexport class GetBeatsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The unique BEATS NFTs owned' })\n    nfts: BeatsNftDto[];\n}\n\nexport class GetBeatmapsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The BEATMAPS NFTs owned' })\n    nfts: BeatmapsNftDto[];\n}\n\nexport class VerifySignatureDto {\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'The expected signature' })\n    signature: string;\n    @ApiProperty({ description: 'The original message that was signed' })\n    message: string;\n}\n\nexport class VerifySignatureResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n}\n\n/// --- LEADERBOARD --- ///\n\nexport class GetLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The max number of records to include in the response' })\n    limit: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class LeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The total score of the users' })\n    score: number;\n    @ApiProperty({ description: 'The username of the user' })\n    username: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class GetLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of each user' })\n    scores: LeaderboardDto[];\n}\n\nexport class AddLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    authId: string;\n    @ApiProperty({ description: 'The auth type of the user login' })\n    authType: string;\n    @ApiProperty({ description: 'The score to add' })\n    score: number;\n    @ApiProperty({ description: 'The present username of the user being added' })\n    username: string;\n}\n\nexport class AddLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of the user' })\n    score: number;\n}\n\nexport class GetLeaderboardSprintDto {\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n    @ApiProperty({ description: 'Optional max number of records to return' })\n    limit: number;\n}\n\nexport class GetLeaderboardSprintResponseDto {\n    @ApiProperty({ description: 'Unique id of sprint' })\n    sprintId: string;\n    @ApiProperty({ description: 'Whether or not sprint is currently active' })\n    active: boolean;\n    @ApiProperty({ description: 'Sprint start date' })\n    startDate: number;\n    @ApiProperty({ description: 'Sprint end date' })\n    endDate: number;\n}\n\n/// --- AUTH --- ///\n\nexport class CheckUsernameDto {\n    @ApiProperty({ description: 'Username to check' })\n    username: string;\n}\n\nexport class CheckUsernameResponseDto {\n    @ApiProperty({ description: 'Username exists or not' })\n    exists: boolean;\n}\n\n//TODO: need this?\nexport class GetAccountDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n}\n\nexport class GetAccountResponseDto {\n    @ApiProperty({ description: 'SUI wallet address' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Account unique username' })\n    username: string;\n    @ApiProperty({ description: 'Player level' })\n    level: number;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class StartAuthSessionDto {\n    @ApiProperty({ description: 'EVM wallet address' })\n    evmWallet: string;\n}\n\nexport class StartAuthSessionResponseDto {\n    @ApiProperty({ description: 'The unique id of the created session' })\n    sessionId: string;\n    @ApiProperty({ description: 'A message for the client to sign as a challenge' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The username of the specified account, if it exists' })\n    username: string;\n}\n\nexport class AuthVerifyDto {\n    @ApiProperty({ description: 'Wallet address' })\n    wallet: string;\n    @ApiProperty({ description: 'Wallet type can be evm or sui' })\n    walletType: 'sui' | 'evm';\n    @ApiProperty({ description: 'The action being taken; verify signature, or update account' })\n    action: 'verify' | 'update';\n    @ApiProperty({ description: 'The unique id of this session' })\n    sessionId: string;\n    @ApiProperty({ description: 'The message that was signed by the client' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The message signature as signed by caller' })\n    signature: string;\n    @ApiProperty({ description: 'A unique user-chosen username' })\n    username: string;\n}\n\nexport class AuthVerifyResponseDto {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    wallet: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n    @ApiProperty({ description: 'Sui wallet address (if any)' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Username of user' })\n    username: string;\n}\n\nexport class UpdateUserLevelDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n    @ApiProperty({ description: 'Level of player' })\n    level: number;\n}\n\nexport class UpdateUserOAuthDto {\n    @ApiProperty({ description: 'Sui wallet address' })\n    suiAddress: string;\n    @ApiProperty({ description: 'Token from OAuth login' })\n    oauthToken: string;\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n    @ApiProperty({ description: 'Normally, the email' })\n    username: string;\n}\n\nexport class UpdateUserOAuthResponseDto {\n    @ApiProperty({ description: '' })\n    authId: string;\n    @ApiProperty({ description: '' })\n    username: string;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class GetUserOAuthDto {\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n}\n\nexport class GetUserOAuthResponseDto extends GetAccountResponseDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetTokenBalanceDto.html":{"url":"classes/GetTokenBalanceDto.html","title":"class - GetTokenBalanceDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetTokenBalanceDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/req.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                wallet\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        wallet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The address of the wallet'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:45\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass ResponseDtoBase {\n    @ApiProperty({ description: 'The current network (e.g. devnet)' })\n    network: string;\n}\n\nexport class MintBeatsNftDto {\n    @ApiProperty({ description: 'Name of the NFT' })\n    name: string;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'URL of the NFT image' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintBeatmapsNftDto {\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'Username of the beatmap creator' })\n    username: string;\n    @ApiProperty({ description: 'Song title or beatmap title' })\n    title: string;\n    @ApiProperty({ description: 'Song artist' })\n    artist: string;\n    @ApiProperty({ description: 'Beatmap json' })\n    beatmapJson: string;\n    @ApiProperty({ description: 'NFT image url' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintTokenDto {\n    @ApiProperty({ description: 'The amount of the token' })\n    amount: number;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n}\n\nexport class GetTokenBalanceDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class GetBeatsNftsDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class MintNftResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n    @ApiProperty({ description: 'The list of NFT addresses minted' })\n    addresses: string[];\n}\n\nexport class RequestNFTResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class MintTokenResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class GetTokenBalanceResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The balance of the wallet' })\n    balance: number;\n}\n\nexport class BeatsNftDto {\n    name: string;\n    url: string;\n}\n\nexport class BeatmapsNftDto {\n    username: string;\n    title: string;\n    artist: string;\n    beatmapJson: string;\n}\n\nexport class GetBeatsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The unique BEATS NFTs owned' })\n    nfts: BeatsNftDto[];\n}\n\nexport class GetBeatmapsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The BEATMAPS NFTs owned' })\n    nfts: BeatmapsNftDto[];\n}\n\nexport class VerifySignatureDto {\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'The expected signature' })\n    signature: string;\n    @ApiProperty({ description: 'The original message that was signed' })\n    message: string;\n}\n\nexport class VerifySignatureResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n}\n\n/// --- LEADERBOARD --- ///\n\nexport class GetLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The max number of records to include in the response' })\n    limit: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class LeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The total score of the users' })\n    score: number;\n    @ApiProperty({ description: 'The username of the user' })\n    username: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class GetLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of each user' })\n    scores: LeaderboardDto[];\n}\n\nexport class AddLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    authId: string;\n    @ApiProperty({ description: 'The auth type of the user login' })\n    authType: string;\n    @ApiProperty({ description: 'The score to add' })\n    score: number;\n    @ApiProperty({ description: 'The present username of the user being added' })\n    username: string;\n}\n\nexport class AddLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of the user' })\n    score: number;\n}\n\nexport class GetLeaderboardSprintDto {\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n    @ApiProperty({ description: 'Optional max number of records to return' })\n    limit: number;\n}\n\nexport class GetLeaderboardSprintResponseDto {\n    @ApiProperty({ description: 'Unique id of sprint' })\n    sprintId: string;\n    @ApiProperty({ description: 'Whether or not sprint is currently active' })\n    active: boolean;\n    @ApiProperty({ description: 'Sprint start date' })\n    startDate: number;\n    @ApiProperty({ description: 'Sprint end date' })\n    endDate: number;\n}\n\n/// --- AUTH --- ///\n\nexport class CheckUsernameDto {\n    @ApiProperty({ description: 'Username to check' })\n    username: string;\n}\n\nexport class CheckUsernameResponseDto {\n    @ApiProperty({ description: 'Username exists or not' })\n    exists: boolean;\n}\n\n//TODO: need this?\nexport class GetAccountDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n}\n\nexport class GetAccountResponseDto {\n    @ApiProperty({ description: 'SUI wallet address' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Account unique username' })\n    username: string;\n    @ApiProperty({ description: 'Player level' })\n    level: number;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class StartAuthSessionDto {\n    @ApiProperty({ description: 'EVM wallet address' })\n    evmWallet: string;\n}\n\nexport class StartAuthSessionResponseDto {\n    @ApiProperty({ description: 'The unique id of the created session' })\n    sessionId: string;\n    @ApiProperty({ description: 'A message for the client to sign as a challenge' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The username of the specified account, if it exists' })\n    username: string;\n}\n\nexport class AuthVerifyDto {\n    @ApiProperty({ description: 'Wallet address' })\n    wallet: string;\n    @ApiProperty({ description: 'Wallet type can be evm or sui' })\n    walletType: 'sui' | 'evm';\n    @ApiProperty({ description: 'The action being taken; verify signature, or update account' })\n    action: 'verify' | 'update';\n    @ApiProperty({ description: 'The unique id of this session' })\n    sessionId: string;\n    @ApiProperty({ description: 'The message that was signed by the client' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The message signature as signed by caller' })\n    signature: string;\n    @ApiProperty({ description: 'A unique user-chosen username' })\n    username: string;\n}\n\nexport class AuthVerifyResponseDto {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    wallet: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n    @ApiProperty({ description: 'Sui wallet address (if any)' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Username of user' })\n    username: string;\n}\n\nexport class UpdateUserLevelDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n    @ApiProperty({ description: 'Level of player' })\n    level: number;\n}\n\nexport class UpdateUserOAuthDto {\n    @ApiProperty({ description: 'Sui wallet address' })\n    suiAddress: string;\n    @ApiProperty({ description: 'Token from OAuth login' })\n    oauthToken: string;\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n    @ApiProperty({ description: 'Normally, the email' })\n    username: string;\n}\n\nexport class UpdateUserOAuthResponseDto {\n    @ApiProperty({ description: '' })\n    authId: string;\n    @ApiProperty({ description: '' })\n    username: string;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class GetUserOAuthDto {\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n}\n\nexport class GetUserOAuthResponseDto extends GetAccountResponseDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetTokenBalanceResponseDto.html":{"url":"classes/GetTokenBalanceResponseDto.html","title":"class - GetTokenBalanceResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetTokenBalanceResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/req.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ResponseDtoBase\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                balance\n                            \n                            \n                                    \n                                network\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        balance\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The balance of the wallet'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        network\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The current network (e.g. devnet)'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ResponseDtoBase\n\n                            \n                        \n                    \n                        \n                                Defined in         ResponseDtoBase:5\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass ResponseDtoBase {\n    @ApiProperty({ description: 'The current network (e.g. devnet)' })\n    network: string;\n}\n\nexport class MintBeatsNftDto {\n    @ApiProperty({ description: 'Name of the NFT' })\n    name: string;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'URL of the NFT image' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintBeatmapsNftDto {\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'Username of the beatmap creator' })\n    username: string;\n    @ApiProperty({ description: 'Song title or beatmap title' })\n    title: string;\n    @ApiProperty({ description: 'Song artist' })\n    artist: string;\n    @ApiProperty({ description: 'Beatmap json' })\n    beatmapJson: string;\n    @ApiProperty({ description: 'NFT image url' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintTokenDto {\n    @ApiProperty({ description: 'The amount of the token' })\n    amount: number;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n}\n\nexport class GetTokenBalanceDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class GetBeatsNftsDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class MintNftResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n    @ApiProperty({ description: 'The list of NFT addresses minted' })\n    addresses: string[];\n}\n\nexport class RequestNFTResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class MintTokenResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class GetTokenBalanceResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The balance of the wallet' })\n    balance: number;\n}\n\nexport class BeatsNftDto {\n    name: string;\n    url: string;\n}\n\nexport class BeatmapsNftDto {\n    username: string;\n    title: string;\n    artist: string;\n    beatmapJson: string;\n}\n\nexport class GetBeatsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The unique BEATS NFTs owned' })\n    nfts: BeatsNftDto[];\n}\n\nexport class GetBeatmapsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The BEATMAPS NFTs owned' })\n    nfts: BeatmapsNftDto[];\n}\n\nexport class VerifySignatureDto {\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'The expected signature' })\n    signature: string;\n    @ApiProperty({ description: 'The original message that was signed' })\n    message: string;\n}\n\nexport class VerifySignatureResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n}\n\n/// --- LEADERBOARD --- ///\n\nexport class GetLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The max number of records to include in the response' })\n    limit: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class LeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The total score of the users' })\n    score: number;\n    @ApiProperty({ description: 'The username of the user' })\n    username: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class GetLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of each user' })\n    scores: LeaderboardDto[];\n}\n\nexport class AddLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    authId: string;\n    @ApiProperty({ description: 'The auth type of the user login' })\n    authType: string;\n    @ApiProperty({ description: 'The score to add' })\n    score: number;\n    @ApiProperty({ description: 'The present username of the user being added' })\n    username: string;\n}\n\nexport class AddLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of the user' })\n    score: number;\n}\n\nexport class GetLeaderboardSprintDto {\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n    @ApiProperty({ description: 'Optional max number of records to return' })\n    limit: number;\n}\n\nexport class GetLeaderboardSprintResponseDto {\n    @ApiProperty({ description: 'Unique id of sprint' })\n    sprintId: string;\n    @ApiProperty({ description: 'Whether or not sprint is currently active' })\n    active: boolean;\n    @ApiProperty({ description: 'Sprint start date' })\n    startDate: number;\n    @ApiProperty({ description: 'Sprint end date' })\n    endDate: number;\n}\n\n/// --- AUTH --- ///\n\nexport class CheckUsernameDto {\n    @ApiProperty({ description: 'Username to check' })\n    username: string;\n}\n\nexport class CheckUsernameResponseDto {\n    @ApiProperty({ description: 'Username exists or not' })\n    exists: boolean;\n}\n\n//TODO: need this?\nexport class GetAccountDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n}\n\nexport class GetAccountResponseDto {\n    @ApiProperty({ description: 'SUI wallet address' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Account unique username' })\n    username: string;\n    @ApiProperty({ description: 'Player level' })\n    level: number;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class StartAuthSessionDto {\n    @ApiProperty({ description: 'EVM wallet address' })\n    evmWallet: string;\n}\n\nexport class StartAuthSessionResponseDto {\n    @ApiProperty({ description: 'The unique id of the created session' })\n    sessionId: string;\n    @ApiProperty({ description: 'A message for the client to sign as a challenge' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The username of the specified account, if it exists' })\n    username: string;\n}\n\nexport class AuthVerifyDto {\n    @ApiProperty({ description: 'Wallet address' })\n    wallet: string;\n    @ApiProperty({ description: 'Wallet type can be evm or sui' })\n    walletType: 'sui' | 'evm';\n    @ApiProperty({ description: 'The action being taken; verify signature, or update account' })\n    action: 'verify' | 'update';\n    @ApiProperty({ description: 'The unique id of this session' })\n    sessionId: string;\n    @ApiProperty({ description: 'The message that was signed by the client' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The message signature as signed by caller' })\n    signature: string;\n    @ApiProperty({ description: 'A unique user-chosen username' })\n    username: string;\n}\n\nexport class AuthVerifyResponseDto {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    wallet: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n    @ApiProperty({ description: 'Sui wallet address (if any)' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Username of user' })\n    username: string;\n}\n\nexport class UpdateUserLevelDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n    @ApiProperty({ description: 'Level of player' })\n    level: number;\n}\n\nexport class UpdateUserOAuthDto {\n    @ApiProperty({ description: 'Sui wallet address' })\n    suiAddress: string;\n    @ApiProperty({ description: 'Token from OAuth login' })\n    oauthToken: string;\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n    @ApiProperty({ description: 'Normally, the email' })\n    username: string;\n}\n\nexport class UpdateUserOAuthResponseDto {\n    @ApiProperty({ description: '' })\n    authId: string;\n    @ApiProperty({ description: '' })\n    username: string;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class GetUserOAuthDto {\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n}\n\nexport class GetUserOAuthResponseDto extends GetAccountResponseDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUserOAuthDto.html":{"url":"classes/GetUserOAuthDto.html","title":"class - GetUserOAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUserOAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/req.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                nonceToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        nonceToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'A secret number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:282\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass ResponseDtoBase {\n    @ApiProperty({ description: 'The current network (e.g. devnet)' })\n    network: string;\n}\n\nexport class MintBeatsNftDto {\n    @ApiProperty({ description: 'Name of the NFT' })\n    name: string;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'URL of the NFT image' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintBeatmapsNftDto {\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'Username of the beatmap creator' })\n    username: string;\n    @ApiProperty({ description: 'Song title or beatmap title' })\n    title: string;\n    @ApiProperty({ description: 'Song artist' })\n    artist: string;\n    @ApiProperty({ description: 'Beatmap json' })\n    beatmapJson: string;\n    @ApiProperty({ description: 'NFT image url' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintTokenDto {\n    @ApiProperty({ description: 'The amount of the token' })\n    amount: number;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n}\n\nexport class GetTokenBalanceDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class GetBeatsNftsDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class MintNftResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n    @ApiProperty({ description: 'The list of NFT addresses minted' })\n    addresses: string[];\n}\n\nexport class RequestNFTResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class MintTokenResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class GetTokenBalanceResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The balance of the wallet' })\n    balance: number;\n}\n\nexport class BeatsNftDto {\n    name: string;\n    url: string;\n}\n\nexport class BeatmapsNftDto {\n    username: string;\n    title: string;\n    artist: string;\n    beatmapJson: string;\n}\n\nexport class GetBeatsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The unique BEATS NFTs owned' })\n    nfts: BeatsNftDto[];\n}\n\nexport class GetBeatmapsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The BEATMAPS NFTs owned' })\n    nfts: BeatmapsNftDto[];\n}\n\nexport class VerifySignatureDto {\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'The expected signature' })\n    signature: string;\n    @ApiProperty({ description: 'The original message that was signed' })\n    message: string;\n}\n\nexport class VerifySignatureResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n}\n\n/// --- LEADERBOARD --- ///\n\nexport class GetLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The max number of records to include in the response' })\n    limit: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class LeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The total score of the users' })\n    score: number;\n    @ApiProperty({ description: 'The username of the user' })\n    username: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class GetLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of each user' })\n    scores: LeaderboardDto[];\n}\n\nexport class AddLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    authId: string;\n    @ApiProperty({ description: 'The auth type of the user login' })\n    authType: string;\n    @ApiProperty({ description: 'The score to add' })\n    score: number;\n    @ApiProperty({ description: 'The present username of the user being added' })\n    username: string;\n}\n\nexport class AddLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of the user' })\n    score: number;\n}\n\nexport class GetLeaderboardSprintDto {\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n    @ApiProperty({ description: 'Optional max number of records to return' })\n    limit: number;\n}\n\nexport class GetLeaderboardSprintResponseDto {\n    @ApiProperty({ description: 'Unique id of sprint' })\n    sprintId: string;\n    @ApiProperty({ description: 'Whether or not sprint is currently active' })\n    active: boolean;\n    @ApiProperty({ description: 'Sprint start date' })\n    startDate: number;\n    @ApiProperty({ description: 'Sprint end date' })\n    endDate: number;\n}\n\n/// --- AUTH --- ///\n\nexport class CheckUsernameDto {\n    @ApiProperty({ description: 'Username to check' })\n    username: string;\n}\n\nexport class CheckUsernameResponseDto {\n    @ApiProperty({ description: 'Username exists or not' })\n    exists: boolean;\n}\n\n//TODO: need this?\nexport class GetAccountDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n}\n\nexport class GetAccountResponseDto {\n    @ApiProperty({ description: 'SUI wallet address' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Account unique username' })\n    username: string;\n    @ApiProperty({ description: 'Player level' })\n    level: number;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class StartAuthSessionDto {\n    @ApiProperty({ description: 'EVM wallet address' })\n    evmWallet: string;\n}\n\nexport class StartAuthSessionResponseDto {\n    @ApiProperty({ description: 'The unique id of the created session' })\n    sessionId: string;\n    @ApiProperty({ description: 'A message for the client to sign as a challenge' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The username of the specified account, if it exists' })\n    username: string;\n}\n\nexport class AuthVerifyDto {\n    @ApiProperty({ description: 'Wallet address' })\n    wallet: string;\n    @ApiProperty({ description: 'Wallet type can be evm or sui' })\n    walletType: 'sui' | 'evm';\n    @ApiProperty({ description: 'The action being taken; verify signature, or update account' })\n    action: 'verify' | 'update';\n    @ApiProperty({ description: 'The unique id of this session' })\n    sessionId: string;\n    @ApiProperty({ description: 'The message that was signed by the client' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The message signature as signed by caller' })\n    signature: string;\n    @ApiProperty({ description: 'A unique user-chosen username' })\n    username: string;\n}\n\nexport class AuthVerifyResponseDto {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    wallet: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n    @ApiProperty({ description: 'Sui wallet address (if any)' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Username of user' })\n    username: string;\n}\n\nexport class UpdateUserLevelDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n    @ApiProperty({ description: 'Level of player' })\n    level: number;\n}\n\nexport class UpdateUserOAuthDto {\n    @ApiProperty({ description: 'Sui wallet address' })\n    suiAddress: string;\n    @ApiProperty({ description: 'Token from OAuth login' })\n    oauthToken: string;\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n    @ApiProperty({ description: 'Normally, the email' })\n    username: string;\n}\n\nexport class UpdateUserOAuthResponseDto {\n    @ApiProperty({ description: '' })\n    authId: string;\n    @ApiProperty({ description: '' })\n    username: string;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class GetUserOAuthDto {\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n}\n\nexport class GetUserOAuthResponseDto extends GetAccountResponseDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUserOAuthResponseDto.html":{"url":"classes/GetUserOAuthResponseDto.html","title":"class - GetUserOAuthResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUserOAuthResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/req.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            GetAccountResponseDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                level\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                suiWallet\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Player level'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         GetAccountResponseDto\n\n                            \n                        \n                    \n                        \n                                Defined in         GetAccountResponseDto:202\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Success or failure of the operation'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         GetAccountResponseDto\n\n                            \n                        \n                    \n                        \n                                Defined in         GetAccountResponseDto:204\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        suiWallet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'SUI wallet address'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         GetAccountResponseDto\n\n                            \n                        \n                    \n                        \n                                Defined in         GetAccountResponseDto:198\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Account unique username'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         GetAccountResponseDto\n\n                            \n                        \n                    \n                        \n                                Defined in         GetAccountResponseDto:200\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass ResponseDtoBase {\n    @ApiProperty({ description: 'The current network (e.g. devnet)' })\n    network: string;\n}\n\nexport class MintBeatsNftDto {\n    @ApiProperty({ description: 'Name of the NFT' })\n    name: string;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'URL of the NFT image' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintBeatmapsNftDto {\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'Username of the beatmap creator' })\n    username: string;\n    @ApiProperty({ description: 'Song title or beatmap title' })\n    title: string;\n    @ApiProperty({ description: 'Song artist' })\n    artist: string;\n    @ApiProperty({ description: 'Beatmap json' })\n    beatmapJson: string;\n    @ApiProperty({ description: 'NFT image url' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintTokenDto {\n    @ApiProperty({ description: 'The amount of the token' })\n    amount: number;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n}\n\nexport class GetTokenBalanceDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class GetBeatsNftsDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class MintNftResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n    @ApiProperty({ description: 'The list of NFT addresses minted' })\n    addresses: string[];\n}\n\nexport class RequestNFTResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class MintTokenResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class GetTokenBalanceResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The balance of the wallet' })\n    balance: number;\n}\n\nexport class BeatsNftDto {\n    name: string;\n    url: string;\n}\n\nexport class BeatmapsNftDto {\n    username: string;\n    title: string;\n    artist: string;\n    beatmapJson: string;\n}\n\nexport class GetBeatsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The unique BEATS NFTs owned' })\n    nfts: BeatsNftDto[];\n}\n\nexport class GetBeatmapsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The BEATMAPS NFTs owned' })\n    nfts: BeatmapsNftDto[];\n}\n\nexport class VerifySignatureDto {\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'The expected signature' })\n    signature: string;\n    @ApiProperty({ description: 'The original message that was signed' })\n    message: string;\n}\n\nexport class VerifySignatureResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n}\n\n/// --- LEADERBOARD --- ///\n\nexport class GetLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The max number of records to include in the response' })\n    limit: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class LeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The total score of the users' })\n    score: number;\n    @ApiProperty({ description: 'The username of the user' })\n    username: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class GetLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of each user' })\n    scores: LeaderboardDto[];\n}\n\nexport class AddLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    authId: string;\n    @ApiProperty({ description: 'The auth type of the user login' })\n    authType: string;\n    @ApiProperty({ description: 'The score to add' })\n    score: number;\n    @ApiProperty({ description: 'The present username of the user being added' })\n    username: string;\n}\n\nexport class AddLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of the user' })\n    score: number;\n}\n\nexport class GetLeaderboardSprintDto {\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n    @ApiProperty({ description: 'Optional max number of records to return' })\n    limit: number;\n}\n\nexport class GetLeaderboardSprintResponseDto {\n    @ApiProperty({ description: 'Unique id of sprint' })\n    sprintId: string;\n    @ApiProperty({ description: 'Whether or not sprint is currently active' })\n    active: boolean;\n    @ApiProperty({ description: 'Sprint start date' })\n    startDate: number;\n    @ApiProperty({ description: 'Sprint end date' })\n    endDate: number;\n}\n\n/// --- AUTH --- ///\n\nexport class CheckUsernameDto {\n    @ApiProperty({ description: 'Username to check' })\n    username: string;\n}\n\nexport class CheckUsernameResponseDto {\n    @ApiProperty({ description: 'Username exists or not' })\n    exists: boolean;\n}\n\n//TODO: need this?\nexport class GetAccountDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n}\n\nexport class GetAccountResponseDto {\n    @ApiProperty({ description: 'SUI wallet address' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Account unique username' })\n    username: string;\n    @ApiProperty({ description: 'Player level' })\n    level: number;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class StartAuthSessionDto {\n    @ApiProperty({ description: 'EVM wallet address' })\n    evmWallet: string;\n}\n\nexport class StartAuthSessionResponseDto {\n    @ApiProperty({ description: 'The unique id of the created session' })\n    sessionId: string;\n    @ApiProperty({ description: 'A message for the client to sign as a challenge' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The username of the specified account, if it exists' })\n    username: string;\n}\n\nexport class AuthVerifyDto {\n    @ApiProperty({ description: 'Wallet address' })\n    wallet: string;\n    @ApiProperty({ description: 'Wallet type can be evm or sui' })\n    walletType: 'sui' | 'evm';\n    @ApiProperty({ description: 'The action being taken; verify signature, or update account' })\n    action: 'verify' | 'update';\n    @ApiProperty({ description: 'The unique id of this session' })\n    sessionId: string;\n    @ApiProperty({ description: 'The message that was signed by the client' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The message signature as signed by caller' })\n    signature: string;\n    @ApiProperty({ description: 'A unique user-chosen username' })\n    username: string;\n}\n\nexport class AuthVerifyResponseDto {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    wallet: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n    @ApiProperty({ description: 'Sui wallet address (if any)' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Username of user' })\n    username: string;\n}\n\nexport class UpdateUserLevelDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n    @ApiProperty({ description: 'Level of player' })\n    level: number;\n}\n\nexport class UpdateUserOAuthDto {\n    @ApiProperty({ description: 'Sui wallet address' })\n    suiAddress: string;\n    @ApiProperty({ description: 'Token from OAuth login' })\n    oauthToken: string;\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n    @ApiProperty({ description: 'Normally, the email' })\n    username: string;\n}\n\nexport class UpdateUserOAuthResponseDto {\n    @ApiProperty({ description: '' })\n    authId: string;\n    @ApiProperty({ description: '' })\n    username: string;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class GetUserOAuthDto {\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n}\n\nexport class GetUserOAuthResponseDto extends GetAccountResponseDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAuthManager.html":{"url":"interfaces/IAuthManager.html","title":"interface - IAuthManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAuthManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/IAuthManager.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        exists\n                                    \n                                \n                                \n                                    \n                                        getAuthRecord\n                                    \n                                \n                                \n                                    \n                                        getAuthRecords\n                                    \n                                \n                                \n                                    \n                                        getAuthSession\n                                    \n                                \n                                \n                                    \n                                        register\n                                    \n                                \n                                \n                                    \n                                        setSuiWalletAddress\n                                    \n                                \n                                \n                                    \n                                        startAuthSession\n                                    \n                                \n                                \n                                    \n                                        updateAuthRecord\n                                    \n                                \n                                \n                                    \n                                        updateAuthSession\n                                    \n                                \n                                \n                                    \n                                        usernameExists\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        exists\n                        \n                    \n                \n            \n            \n                \nexists(authId: string, authType: \"evm\" | \"sui\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/IAuthManager.ts:39\n                        \n                    \n\n\n            \n                \n                        Returns true if an auth record with the given id and type are in the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authType\n                                            \n                                                        \"evm\" | \"sui\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAuthRecord\n                        \n                    \n                \n            \n            \n                \ngetAuthRecord(authId: string, authType: \"evm\" | \"sui\")\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/IAuthManager.ts:54\n                        \n                    \n\n\n            \n                \n                        Gets the record identified by the auth id and auth type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authType\n                                            \n                                                        \"evm\" | \"sui\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAuthRecords\n                        \n                    \n                \n            \n            \n                \ngetAuthRecords()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/IAuthManager.ts:59\n                        \n                    \n\n\n            \n                \n                        Gets all auth records in the database.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAuthSession\n                        \n                    \n                \n            \n            \n                \ngetAuthSession(sessionId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/IAuthManager.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sessionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(authId: string, authType: \"evm\" | \"sui\", suiWallet: string, username: string, extraData: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/IAuthManager.ts:31\n                        \n                    \n\n\n            \n                \n                        Adds a new auth record to the database, if it doesn't already exist.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authType\n                                            \n                                                        \"evm\" | \"sui\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                suiWallet\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                extraData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setSuiWalletAddress\n                        \n                    \n                \n            \n            \n                \nsetSuiWalletAddress(authId: string, authType: \"evm\" | \"sui\", suiAddress: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/IAuthManager.ts:72\n                        \n                    \n\n\n            \n                \n                        Sets the SUI wallet address associated with the identified auth record, identified\nby auth id and auth type.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authType\n                                            \n                                                        \"evm\" | \"sui\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                suiAddress\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startAuthSession\n                        \n                    \n                \n            \n            \n                \nstartAuthSession(evmWallet: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/IAuthManager.ts:80\n                        \n                    \n\n\n            \n                \n                        Starts a record of an authentication attempt, creating a challenge and other data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                evmWallet\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A challenge for the authenticator.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateAuthRecord\n                        \n                    \n                \n            \n            \n                \nupdateAuthRecord(authId: string, authType: \"evm\" | \"sui\", suiWallet: string, level: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/IAuthManager.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authType\n                                            \n                                                        \"evm\" | \"sui\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                suiWallet\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                level\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateAuthSession\n                        \n                    \n                \n            \n            \n                \nupdateAuthSession(sessionId: string, evmWallet: string, suiWallet: string, success: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/IAuthManager.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sessionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                evmWallet\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                suiWallet\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                success\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        usernameExists\n                        \n                    \n                \n            \n            \n                \nusernameExists(username: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/IAuthManager.ts:46\n                        \n                    \n\n\n            \n                \n                        Returns true if an auth record with the given username exists in the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface IAuthRecord {\n    authId: string;\n    authType: 'evm' | 'sui';\n    suiWallet: string;\n    level: number;\n    username: string;\n    extraData: any;\n}\n\nexport interface IAuthSession {\n    sessionId: string;\n    message: string;\n    evmWallet: string;\n    suiWallet: string;\n    success: boolean;\n    startTimestamp: number, \n    updateTimestamp: number\n}\n\nexport interface IAuthManager {\n    /**\n     * Adds a new auth record to the database, if it doesn't already exist.\n     * \n     * @param authId \n     * @param authType \n     * @param suiWallet \n     * @param username \n     * @param extraData \n     */\n    register(authId: string, authType: 'evm' | 'sui', suiWallet: string, username: string, extraData: any): Promise;\n\n    /**\n     * Returns true if an auth record with the given id and type are in the database.\n     * \n     * @param authId \n     * @param authType \n     */\n    exists(authId: string, authType: 'evm' | 'sui') : Promise; \n\n    /**\n     * Returns true if an auth record with the given username exists in the database.\n     * \n     * @param username \n     */\n    usernameExists(username: string): Promise; \n\n    /**\n     * Gets the record identified by the auth id and auth type. \n     * \n     * @param authId \n     * @param authType \n     */\n    getAuthRecord(authId: string, authType: 'evm' | 'sui'): Promise;\n\n    /**\n     * Gets all auth records in the database. \n     */\n    getAuthRecords(): Promise;\n\n    //TODO: comment \n    updateAuthRecord(authId: string, authType: 'evm' | 'sui', suiWallet: string, level: number): Promise;\n    \n    /**\n     * Sets the SUI wallet address associated with the identified auth record, identified\n     * by auth id and auth type. \n     * \n     * @param authId \n     * @param authType \n     * @param suiAddress \n     */\n    setSuiWalletAddress(authId: string, authType: 'evm' | 'sui', suiAddress: string) : Promise;\n    \n    /**\n     * Starts a record of an authentication attempt, creating a challenge and other data. \n     * \n     * @param evmWallet\n     * @returns A challenge for the authenticator. \n     */\n    startAuthSession(evmWallet: string): Promise;\n\n    //TODO: comment \n    updateAuthSession(sessionId: string, evmWallet: string, suiWallet: string, success: boolean): Promise; \n    \n    //TODO: comment \n    getAuthSession(sessionId: string): Promise;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAuthRecord.html":{"url":"interfaces/IAuthRecord.html","title":"interface - IAuthRecord","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAuthRecord\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/IAuthManager.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            authId\n                                        \n                                \n                                \n                                        \n                                            authType\n                                        \n                                \n                                \n                                        \n                                            extraData\n                                        \n                                \n                                \n                                        \n                                            level\n                                        \n                                \n                                \n                                        \n                                            suiWallet\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        authId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        authId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        authType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        authType:     \"evm\" | \"sui\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"evm\" | \"sui\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        extraData\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        extraData:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        level\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        level:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        suiWallet\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        suiWallet:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IAuthRecord {\n    authId: string;\n    authType: 'evm' | 'sui';\n    suiWallet: string;\n    level: number;\n    username: string;\n    extraData: any;\n}\n\nexport interface IAuthSession {\n    sessionId: string;\n    message: string;\n    evmWallet: string;\n    suiWallet: string;\n    success: boolean;\n    startTimestamp: number, \n    updateTimestamp: number\n}\n\nexport interface IAuthManager {\n    /**\n     * Adds a new auth record to the database, if it doesn't already exist.\n     * \n     * @param authId \n     * @param authType \n     * @param suiWallet \n     * @param username \n     * @param extraData \n     */\n    register(authId: string, authType: 'evm' | 'sui', suiWallet: string, username: string, extraData: any): Promise;\n\n    /**\n     * Returns true if an auth record with the given id and type are in the database.\n     * \n     * @param authId \n     * @param authType \n     */\n    exists(authId: string, authType: 'evm' | 'sui') : Promise; \n\n    /**\n     * Returns true if an auth record with the given username exists in the database.\n     * \n     * @param username \n     */\n    usernameExists(username: string): Promise; \n\n    /**\n     * Gets the record identified by the auth id and auth type. \n     * \n     * @param authId \n     * @param authType \n     */\n    getAuthRecord(authId: string, authType: 'evm' | 'sui'): Promise;\n\n    /**\n     * Gets all auth records in the database. \n     */\n    getAuthRecords(): Promise;\n\n    //TODO: comment \n    updateAuthRecord(authId: string, authType: 'evm' | 'sui', suiWallet: string, level: number): Promise;\n    \n    /**\n     * Sets the SUI wallet address associated with the identified auth record, identified\n     * by auth id and auth type. \n     * \n     * @param authId \n     * @param authType \n     * @param suiAddress \n     */\n    setSuiWalletAddress(authId: string, authType: 'evm' | 'sui', suiAddress: string) : Promise;\n    \n    /**\n     * Starts a record of an authentication attempt, creating a challenge and other data. \n     * \n     * @param evmWallet\n     * @returns A challenge for the authenticator. \n     */\n    startAuthSession(evmWallet: string): Promise;\n\n    //TODO: comment \n    updateAuthSession(sessionId: string, evmWallet: string, suiWallet: string, success: boolean): Promise; \n    \n    //TODO: comment \n    getAuthSession(sessionId: string): Promise;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAuthSession.html":{"url":"interfaces/IAuthSession.html","title":"interface - IAuthSession","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAuthSession\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/IAuthManager.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            evmWallet\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            sessionId\n                                        \n                                \n                                \n                                        \n                                            startTimestamp\n                                        \n                                \n                                \n                                        \n                                            success\n                                        \n                                \n                                \n                                        \n                                            suiWallet\n                                        \n                                \n                                \n                                        \n                                            updateTimestamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        evmWallet\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        evmWallet:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sessionId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sessionId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startTimestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        startTimestamp:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        suiWallet\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        suiWallet:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateTimestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updateTimestamp:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IAuthRecord {\n    authId: string;\n    authType: 'evm' | 'sui';\n    suiWallet: string;\n    level: number;\n    username: string;\n    extraData: any;\n}\n\nexport interface IAuthSession {\n    sessionId: string;\n    message: string;\n    evmWallet: string;\n    suiWallet: string;\n    success: boolean;\n    startTimestamp: number, \n    updateTimestamp: number\n}\n\nexport interface IAuthManager {\n    /**\n     * Adds a new auth record to the database, if it doesn't already exist.\n     * \n     * @param authId \n     * @param authType \n     * @param suiWallet \n     * @param username \n     * @param extraData \n     */\n    register(authId: string, authType: 'evm' | 'sui', suiWallet: string, username: string, extraData: any): Promise;\n\n    /**\n     * Returns true if an auth record with the given id and type are in the database.\n     * \n     * @param authId \n     * @param authType \n     */\n    exists(authId: string, authType: 'evm' | 'sui') : Promise; \n\n    /**\n     * Returns true if an auth record with the given username exists in the database.\n     * \n     * @param username \n     */\n    usernameExists(username: string): Promise; \n\n    /**\n     * Gets the record identified by the auth id and auth type. \n     * \n     * @param authId \n     * @param authType \n     */\n    getAuthRecord(authId: string, authType: 'evm' | 'sui'): Promise;\n\n    /**\n     * Gets all auth records in the database. \n     */\n    getAuthRecords(): Promise;\n\n    //TODO: comment \n    updateAuthRecord(authId: string, authType: 'evm' | 'sui', suiWallet: string, level: number): Promise;\n    \n    /**\n     * Sets the SUI wallet address associated with the identified auth record, identified\n     * by auth id and auth type. \n     * \n     * @param authId \n     * @param authType \n     * @param suiAddress \n     */\n    setSuiWalletAddress(authId: string, authType: 'evm' | 'sui', suiAddress: string) : Promise;\n    \n    /**\n     * Starts a record of an authentication attempt, creating a challenge and other data. \n     * \n     * @param evmWallet\n     * @returns A challenge for the authenticator. \n     */\n    startAuthSession(evmWallet: string): Promise;\n\n    //TODO: comment \n    updateAuthSession(sessionId: string, evmWallet: string, suiWallet: string, success: boolean): Promise; \n    \n    //TODO: comment \n    getAuthSession(sessionId: string): Promise;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDynamoResult.html":{"url":"interfaces/IDynamoResult.html","title":"interface - IDynamoResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDynamoResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dataAccess/IDynamoResult.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            success\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IDynamoResult {\n    success: boolean;\n    data: any;\n    error: any;\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ILeaderboard.html":{"url":"interfaces/ILeaderboard.html","title":"interface - ILeaderboard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ILeaderboard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/leaderboard/ILeaderboard.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        addLeaderboardScore\n                                    \n                                \n                                \n                                    \n                                        createSprint\n                                    \n                                \n                                \n                                    \n                                        endSprint\n                                    \n                                \n                                \n                                    \n                                        getLeaderboardScore\n                                    \n                                \n                                \n                                    \n                                        getLeaderboardScores\n                                    \n                                \n                                \n                                    \n                                        getSprint\n                                    \n                                \n                                \n                                    \n                                        getSprints\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addLeaderboardScore\n                        \n                    \n                \n            \n            \n                \naddLeaderboardScore(wallet: string, username: string, score: number, sprintId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/leaderboard/ILeaderboard.ts:35\n                        \n                    \n\n\n            \n                \n                        Accumulates the given score to the specified wallet.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                wallet\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    wallet to which to add the given score\n\n                                            \n                                        \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                score\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the score to add to the wallet's total\n\n                                            \n                                        \n                                        \n                                                sprintId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    unique sprint id (can be null)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createSprint\n                        \n                    \n                \n            \n            \n                \ncreateSprint(sprintId: string, startDate: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/leaderboard/ILeaderboard.ts:46\n                        \n                    \n\n\n            \n                \n                        Creates a new sprint. If the startDate is now, the currently active sprint will be\ndeactivated and this new one will be set to active.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                sprintId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    unique sprint id, the sprint to create\n\n                                            \n                                        \n                                        \n                                                startDate\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the start date of the sprint\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        endSprint\n                        \n                    \n                \n            \n            \n                \nendSprint(sprintId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/leaderboard/ILeaderboard.ts:53\n                        \n                    \n\n\n            \n                \n                        Sets the given sprint's 'active' property to false, sets the endDate to now.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                sprintId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    unique sprint id, the sprint to end\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLeaderboardScore\n                        \n                    \n                \n            \n            \n                \ngetLeaderboardScore(wallet: string, sprintId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/leaderboard/ILeaderboard.ts:17\n                        \n                    \n\n\n            \n                \n                        Gets the current score for the given wallet. If no sprint is specified, gets\nthe default leaderboard.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                wallet\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the wallet for which to get the score\n\n                                            \n                                        \n                                        \n                                                sprintId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    unique sprint id (can be null)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLeaderboardScores\n                        \n                    \n                \n            \n            \n                \ngetLeaderboardScores(limit: number, sprintId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/leaderboard/ILeaderboard.ts:26\n                        \n                    \n\n\n            \n                \n                        Gets a list of scores for the given leaderboard. If no sprint is specified, gets\nthe default leaderboard.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    the max number of records to return\n\n                                            \n                                        \n                                        \n                                                sprintId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    unique sprint id (can be null)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSprint\n                        \n                    \n                \n            \n            \n                \ngetSprint(sprintId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/leaderboard/ILeaderboard.ts:60\n                        \n                    \n\n\n            \n                \n                        Gets the given sprint.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sprintId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSprints\n                        \n                    \n                \n            \n            \n                \ngetSprints(limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/leaderboard/ILeaderboard.ts:67\n                        \n                    \n\n\n            \n                \n                        Gets all sprints that exist.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Max number of records to return; \n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface ISprint {\n    sprintId: string;\n    active: boolean;\n    startDate: number;\n    endDate: number;\n}\n\nexport interface ILeaderboard {\n    /**\n     * Gets the current score for the given wallet. If no sprint is specified, gets\n     * the default leaderboard. \n     * \n     * @param wallet the wallet for which to get the score\n     * @param sprintId unique sprint id (can be null)\n     */\n    getLeaderboardScore(wallet: string, sprintId: string): Promise;\n    \n    /**\n     * Gets a list of scores for the given leaderboard. If no sprint is specified, gets\n     * the default leaderboard. \n     * \n     * @param limit the max number of records to return\n     * @param sprintId unique sprint id (can be null)\n     */\n    getLeaderboardScores(limit: number, sprintId: string): Promise\n    \n    /**\n     * Accumulates the given score to the specified wallet.\n     * \n     * @param wallet wallet to which to add the given score\n     * @param score the score to add to the wallet's total \n     * @param sprintId unique sprint id (can be null)\n     */\n    addLeaderboardScore(wallet: string, username: string, score: number, sprintId: string): Promise\n    \n    //admin methods \n\n    /**\n     * Creates a new sprint. If the startDate is now, the currently active sprint will be \n     * deactivated and this new one will be set to active.  \n     * \n     * @param sprintId unique sprint id, the sprint to create\n     * @param startDate the start date of the sprint\n     */\n    createSprint(sprintId: string, startDate: number): Promise; \n    \n    /**\n     * Sets the given sprint's 'active' property to false, sets the endDate to now. \n     * \n     * @param sprintId unique sprint id, the sprint to end\n     */\n    endSprint(sprintId: string): Promise;\n    \n    /**\n     * Gets the given sprint. \n     * \n     * @param sprintId \n     */\n    getSprint(sprintId: string): Promise; \n    \n    /**\n     * Gets all sprints that exist. \n     * \n     * @param limit Max number of records to return; ; \n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IScore.html":{"url":"interfaces/IScore.html","title":"interface - IScore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IScore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/leaderboard/LeaderboardDynamoDb.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            score\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                                \n                                        \n                                            wallet\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        score\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        score:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        wallet\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        wallet:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ILeaderboard, ISprint } from './ILeaderboard';\nimport { IDynamoResult } from '../dataAccess/IDynamoResult';\nimport { Config } from '../config';\nimport { DynamoDbAccess } from '../dataAccess/DynamoDbAccess';\nimport { String } from 'aws-sdk/clients/batch';\n\nconst DEFAULT_SPRINT_KEY = \"default\";\nconst GSI_SPRINT_NAME = \"GSI_SPRINT\";\nconst GSI_ACTIVE_NAME = \"GSI_ACTIVE\";\nconst DEFAULT_SPRINT_LENGTH = 86400 * 14; \n\n//TODO: add logging \n//TODO: exception handling \n//TODO: log warning or error if any data access call is not successful \n\nfunction unixDate() {\n    return Math.floor(Date.now()/1000);\n}\n\ninterface IScore {\n    wallet: string; \n    username: string;\n    score: number;\n}\n\nclass LocalScoreCache {\n    expirationSeconds: number; \n    lastRefresh: number; \n    count: number; \n    data: { [wallet: string]: IScore };\n\n    constructor(expirationSeconds: number = 600) {\n        this.expirationSeconds = expirationSeconds;\n        this.count = 0;\n        this.lastRefresh = 0;\n        this.data = {};\n    }\n    \n    getAsArray(limit: number = 0, sort: boolean = false): IScore[] {\n        const output = Object.values(this.data).slice(0, limit);\n        if (sort)\n            output.sort((a, b) => b.score - a.score);\n        return output;\n    }\n    \n    ageSeconds(): number {\n        return Math.floor(Date.now()/1000) - this.lastRefresh;\n    }\n    \n    isExpired(): boolean {\n        return this.ageSeconds() > this.expirationSeconds;\n    }\n    \n    update(wallet: string, username: string, score: number) {\n        if (this.data[wallet]) {\n            this.data[wallet].score = score;\n            this.data[wallet].username = username\n        }\n        else {\n            this.data[wallet] = { wallet, score, username}\n        }\n    }\n    \n    refresh(scores: IScore[]) {\n        this.lastRefresh = unixDate();\n        for(let n=0; n {\n        if (!sprintId || !sprintId.length) \n            sprintId = DEFAULT_SPRINT_KEY;\n        if (sprintId == \"current\") \n            sprintId = await this._getActiveSprintName(); \n            \n        \n        const output = {\n            wallet: wallet, \n            score: 0, \n            username: '',\n            network: this.network\n        };\n        \n        const result = await this._dataAccess_getScore(wallet, sprintId);\n        \n        if (result.success && result.data) {\n            output.score = parseInt(result.data.score.N);\n            output.username = result.data.username.S;\n        }\n        \n        return output;\n    }\n\n    async getLeaderboardScores(limit: number = 100, sprintId: string = \"\"): Promise {\n        if (!sprintId || !sprintId.length) \n            sprintId = DEFAULT_SPRINT_KEY;\n        if (sprintId == \"current\")\n            sprintId = await this._getActiveSprintName(); \n\n        let output = { scores: [], network: this.network, fromCache: false };\n        \n        //if default, get from local cache \n        if (sprintId == DEFAULT_SPRINT_KEY) {\n            const cache = await this._getScoresFromCache(localScoreCache_default, DEFAULT_SPRINT_KEY, limit); \n            output.scores = cache.scores;\n            output.fromCache = cache.fromCache;\n        }\n        else {\n            output.fromCache = false; \n            \n            //check: is it current sprint? \n            if (await this._isCurrentSprint(sprintId)) {\n                const cache = await this._getScoresFromCache(localScoreCache_sprint, sprintId, limit); \n                output.scores = cache.scores;\n                output.fromCache = cache.fromCache;\n            }\n            else {\n                //default: scan table for scores \n                output.scores = await this._scanForScores(sprintId);\n                \n                //sort and limit\n                output.scores.sort((a, b) => parseInt(b.score.N) - parseInt(a.score.N)).slice(0, limit);\n            }\n        }\n\n        return output;\n    }\n\n    async addLeaderboardScore(wallet: string, username: string, score: number, sprintId: string = \"\"): Promise {\n        if (!sprintId || !sprintId.length) \n            sprintId = DEFAULT_SPRINT_KEY;\n        if (sprintId == \"current\")\n            sprintId = await this._getActiveSprintName(); \n            \n        score = parseInt(score.toString());\n            \n        const output = { score: score, username: username, network: this.network }\n        \n        //get current score first \n        const result = await this._dataAccess_getScore(wallet, sprintId); \n        if (result.success && result.data) {\n            output.score = parseInt(result.data.score.N) + score;\n            output.username = result.data.username?.S ?? '';\n        }\n        \n        //write accumulated score \n        await this._dataAccess_putScore(wallet, username, output.score, sprintId) \n        \n        //add to default too, if adding to sprint \n        if (sprintId != DEFAULT_SPRINT_KEY) {\n            await this.addLeaderboardScore(wallet, username, score, sprintId); \n        }\n        \n        //update the cache \n        await this._updateCacheItem(wallet, username, output.score, sprintId)\n        \n        return output; \n    }\n\n    //admin methods \n    async createSprint(sprintId: string, startDate: number = 0): Promise {\n        if (startDate == 0) \n            startDate = unixDate();\n\n        //disallow values 'default' and 'current'\n        if (sprintId.trim().toLowerCase() == \"default\" || sprintId.trim().toLowerCase() == \"current\")\n            throw new Error(`Invalid sprintId identifier: ${sprintId}`); \n\n        //validation: check that date is ok \n        if (startDate  {\n        //validation: check that sprint exists \n        const sprint = await this.getSprint(sprintId);\n        if (!sprint) {\n            //TODO: log warning\n            return false;\n        }\n        \n        //validation: check that sprint not already ended \n        if (!sprint.active) {\n            //TODO: log warning\n            return false;\n        }\n        \n        //write record: set active=false and endDate = now\n        sprint.endDate = unixDate(); \n        await this._dataAccess_putSprint(sprintId, sprint.startDate, sprint.endDate, 0);\n        \n        return !(await this._isCurrentSprint(sprintId));\n    }\n    \n    async getSprint(sprintId: string): Promise {\n        let output: ISprint = null;\n        const sprint = await this._dataAccess_getSprint(sprintId); \n        if (sprint.success && sprint.data) {\n            output = {\n                sprintId : sprintId,\n                active: parseInt(sprint.data.active.N) > 0,\n                startDate: parseInt(sprint.data.startDate.N),\n                endDate: parseInt(sprint.data.endDate.N)\n            }\n        }\n        \n        return output; \n    }\n    \n    async getSprints(limit: number) : Promise {\n        const result = await this._dataAccess_scanSprints();\n        const items = result.success ? result.data : [];\n        const sprints = [];\n        \n        items.forEach(s => {\n            sprints.push({\n                sprintId: s.sprintId.S,\n                startDate: parseInt(s.startDate.N),\n                endDate: parseInt(s.endDate.N),\n                active: parseInt(s.active.N) > 0\n            });\n        });\n        \n        return sprints;\n    }\n    \n    async setActiveSprint(sprintId: string) : Promise {\n        const sprint = await this._dataAccess_getSprint(sprintId); \n        \n        //if sprint not found, return false \n        if (!sprint.success || !sprint.data) \n            return false; \n            \n        //if sprint not active, set active \n        if (parseInt(sprint.data.active.N)  {\n        const activeSprintId = await this._getActiveSprintName(); \n        if (activeSprintId == \"default\")\n            return false; \n            \n        const activeSprint = await this.getSprint(activeSprintId); \n        if (activeSprint) {\n            await this._dataAccess_putSprint(\n                activeSprintId, \n                activeSprint.startDate, \n                unixDate(),\n                0\n            )\n        }\n    }\n    \n    //private methods \n    async _sprintExists(sprintId: string): Promise {\n        const result = await this._dataAccess_getSprint(sprintId);\n        return (result.success && result.data) ? true: false;\n    }\n    \n    async _getActiveSprintName(): Promise {\n        const activeSprints = await this._dataAccess_getActiveSprints(); \n        if (activeSprints.success && activeSprints.data && activeSprints.data.length) {\n            const sprint = activeSprints.data[0]; \n            \n            //if no end date, or end date is in future, it's ok\n            if (sprint.endDate && sprint.endDate.N) {\n                const endDate = parseInt(sprint.endDate.N);\n                if (!endDate || endDate > unixDate())\n                    return sprint.sprintId.S;\n            } else {\n                return sprint.sprintId.S;\n            }\n        }\n        \n        return 'default';\n    }\n    \n    async _isCurrentSprint(sprintId: string): Promise {\n        const result = await this._dataAccess_getSprint(sprintId); \n        return result.success && result.data && (result.data.active.N > 0);\n    }\n    \n    async _getScoresFromCache(cache: LocalScoreCache, sprintId: string, limit: number = 100): Promise {\n        if (!cache.isExpired()) {\n            return {\n                fromCache: true,\n                scores: cache.getAsArray(limit, true)\n            };\n        }\n        \n        //TODO: if refreshing the cache, do it in separate thread \n        const data = await this._scanForScores(sprintId);\n        \n        //cache entire table\n        cache.refresh(data);\n\n        return {\n            fromCache: false,\n            scores: cache.getAsArray(limit, true)\n        };\n    }\n    \n    async _updateCacheItem(wallet: string, username: string, score:number, sprintId: string) {\n        let cache: LocalScoreCache = null;\n        if (sprintId == DEFAULT_SPRINT_KEY) {\n            cache = localScoreCache_default;\n        }\n        else {\n            if (await this._isCurrentSprint(sprintId)) {\n                cache = localScoreCache_sprint; \n            }\n        }\n        \n        if (cache) {\n            cache.update(wallet, username, score); \n        }\n    }\n    \n    async _scanForScores(sprintId: string): Promise {\n        const params = {\n            TableName: Config.scoresTableName,\n            IndexName: GSI_SPRINT_NAME,\n            KeyConditionExpression: \"sprintId = :sprintid_val\",\n            ExpressionAttributeValues: {\n                \":sprintid_val\": {'S': sprintId}\n            }\n        };\n        \n        const result = await this.dynamoDb.query(params); \n        if (result.success) {\n            const sortedItems = result.data.sort((a, b) => parseInt(b.score.N) - parseInt(a.score.N));\n            return sortedItems.map((i) => { return { wallet: i.wallet.S, username: i.username?.S ?? '', score: parseInt(i.score.N) } });\n        }\n\n        return [];\n    }\n    \n    //data access methods \n    \n    //TODO: not used\n    async _dataAccess_scanSprints(): Promise {\n        return await this.dynamoDb.scanTable(Config.sprintsTableName);\n    }\n\n    async _dataAccess_getScore(wallet: string, sprintId: string): Promise {\n        return await this.dynamoDb.getItem({\n            TableName: Config.scoresTableName,\n            Key: {\n                'wallet': { S: wallet },\n                'sprintId': { S: sprintId }\n            }\n        });\n    }\n\n    async _dataAccess_putScore(wallet: string, username: string, score: number, sprintId: string): Promise {\n        return await this.dynamoDb.putItem({\n            TableName: Config.scoresTableName,\n            Item: {\n                wallet: {'S': wallet },\n                username: {'S': username },\n                sprintId: { 'S': sprintId },\n                score: { 'N': score.toString() }\n            }\n        }); \n    }\n\n    async _dataAccess_getSprint(sprintId: string): Promise {\n        return await this.dynamoDb.getItem({\n            TableName: Config.sprintsTableName,\n            Key: {\n                'sprintId': { S: sprintId }\n            }\n        });\n    }\n\n    async _dataAccess_getActiveSprints(): Promise {\n        const params = {\n            TableName: Config.sprintsTableName,\n            IndexName: GSI_ACTIVE_NAME,\n            KeyConditionExpression: \"active = :active_val\",\n            ExpressionAttributeValues: {\n                \":active_val\": { 'N': \"1\" }\n            }\n        };\n        \n        return await this.dynamoDb.query(params);\n    }\n\n    async _dataAccess_putSprint(sprintId: string, startDate: number, endDate: number = 0, active: number = 0): Promise {\n        if (endDate == 0) \n            endDate = startDate + 365 * 3.154e+7;   //one year \n            \n        return await this.dynamoDb.putItem({ \n            TableName: Config.sprintsTableName,\n            Item: {\n                'sprintId': { 'S': sprintId },\n                'startDate': { 'N': startDate.toString() },\n                'endDate': { 'N': endDate.toString() },\n                'active': { 'N': active.toString() }\n            }\n        });\n    }\n    \n    async _dataAccess_deleteSprint(sprintId: string): Promise {\n        const params = {\n            TableName: Config.sprintsTableName,\n            Key: {\n                'sprintId': { S: sprintId }\n            }\n        }; \n\n        return await this.dynamoDb.deleteItem(params);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISprint.html":{"url":"interfaces/ISprint.html","title":"interface - ISprint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ISprint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/leaderboard/ILeaderboard.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            active\n                                        \n                                \n                                \n                                        \n                                            endDate\n                                        \n                                \n                                \n                                        \n                                            sprintId\n                                        \n                                \n                                \n                                        \n                                            startDate\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        active\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        active:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        endDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        endDate:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sprintId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sprintId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        startDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        startDate:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ISprint {\n    sprintId: string;\n    active: boolean;\n    startDate: number;\n    endDate: number;\n}\n\nexport interface ILeaderboard {\n    /**\n     * Gets the current score for the given wallet. If no sprint is specified, gets\n     * the default leaderboard. \n     * \n     * @param wallet the wallet for which to get the score\n     * @param sprintId unique sprint id (can be null)\n     */\n    getLeaderboardScore(wallet: string, sprintId: string): Promise;\n    \n    /**\n     * Gets a list of scores for the given leaderboard. If no sprint is specified, gets\n     * the default leaderboard. \n     * \n     * @param limit the max number of records to return\n     * @param sprintId unique sprint id (can be null)\n     */\n    getLeaderboardScores(limit: number, sprintId: string): Promise\n    \n    /**\n     * Accumulates the given score to the specified wallet.\n     * \n     * @param wallet wallet to which to add the given score\n     * @param score the score to add to the wallet's total \n     * @param sprintId unique sprint id (can be null)\n     */\n    addLeaderboardScore(wallet: string, username: string, score: number, sprintId: string): Promise\n    \n    //admin methods \n\n    /**\n     * Creates a new sprint. If the startDate is now, the currently active sprint will be \n     * deactivated and this new one will be set to active.  \n     * \n     * @param sprintId unique sprint id, the sprint to create\n     * @param startDate the start date of the sprint\n     */\n    createSprint(sprintId: string, startDate: number): Promise; \n    \n    /**\n     * Sets the given sprint's 'active' property to false, sets the endDate to now. \n     * \n     * @param sprintId unique sprint id, the sprint to end\n     */\n    endSprint(sprintId: string): Promise;\n    \n    /**\n     * Gets the given sprint. \n     * \n     * @param sprintId \n     */\n    getSprint(sprintId: string): Promise; \n    \n    /**\n     * Gets all sprints that exist. \n     * \n     * @param limit Max number of records to return; ; \n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LeaderboardDto.html":{"url":"classes/LeaderboardDto.html","title":"class - LeaderboardDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LeaderboardDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/req.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                score\n                            \n                            \n                                    \n                                sprint\n                            \n                            \n                                    \n                                username\n                            \n                            \n                                    \n                                wallet\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        score\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The total score of the users'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:130\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sprint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Optional unique id of sprint'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:134\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The username of the user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:132\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        wallet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The address of the wallet of the user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:128\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass ResponseDtoBase {\n    @ApiProperty({ description: 'The current network (e.g. devnet)' })\n    network: string;\n}\n\nexport class MintBeatsNftDto {\n    @ApiProperty({ description: 'Name of the NFT' })\n    name: string;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'URL of the NFT image' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintBeatmapsNftDto {\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'Username of the beatmap creator' })\n    username: string;\n    @ApiProperty({ description: 'Song title or beatmap title' })\n    title: string;\n    @ApiProperty({ description: 'Song artist' })\n    artist: string;\n    @ApiProperty({ description: 'Beatmap json' })\n    beatmapJson: string;\n    @ApiProperty({ description: 'NFT image url' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintTokenDto {\n    @ApiProperty({ description: 'The amount of the token' })\n    amount: number;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n}\n\nexport class GetTokenBalanceDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class GetBeatsNftsDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class MintNftResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n    @ApiProperty({ description: 'The list of NFT addresses minted' })\n    addresses: string[];\n}\n\nexport class RequestNFTResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class MintTokenResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class GetTokenBalanceResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The balance of the wallet' })\n    balance: number;\n}\n\nexport class BeatsNftDto {\n    name: string;\n    url: string;\n}\n\nexport class BeatmapsNftDto {\n    username: string;\n    title: string;\n    artist: string;\n    beatmapJson: string;\n}\n\nexport class GetBeatsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The unique BEATS NFTs owned' })\n    nfts: BeatsNftDto[];\n}\n\nexport class GetBeatmapsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The BEATMAPS NFTs owned' })\n    nfts: BeatmapsNftDto[];\n}\n\nexport class VerifySignatureDto {\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'The expected signature' })\n    signature: string;\n    @ApiProperty({ description: 'The original message that was signed' })\n    message: string;\n}\n\nexport class VerifySignatureResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n}\n\n/// --- LEADERBOARD --- ///\n\nexport class GetLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The max number of records to include in the response' })\n    limit: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class LeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The total score of the users' })\n    score: number;\n    @ApiProperty({ description: 'The username of the user' })\n    username: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class GetLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of each user' })\n    scores: LeaderboardDto[];\n}\n\nexport class AddLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    authId: string;\n    @ApiProperty({ description: 'The auth type of the user login' })\n    authType: string;\n    @ApiProperty({ description: 'The score to add' })\n    score: number;\n    @ApiProperty({ description: 'The present username of the user being added' })\n    username: string;\n}\n\nexport class AddLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of the user' })\n    score: number;\n}\n\nexport class GetLeaderboardSprintDto {\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n    @ApiProperty({ description: 'Optional max number of records to return' })\n    limit: number;\n}\n\nexport class GetLeaderboardSprintResponseDto {\n    @ApiProperty({ description: 'Unique id of sprint' })\n    sprintId: string;\n    @ApiProperty({ description: 'Whether or not sprint is currently active' })\n    active: boolean;\n    @ApiProperty({ description: 'Sprint start date' })\n    startDate: number;\n    @ApiProperty({ description: 'Sprint end date' })\n    endDate: number;\n}\n\n/// --- AUTH --- ///\n\nexport class CheckUsernameDto {\n    @ApiProperty({ description: 'Username to check' })\n    username: string;\n}\n\nexport class CheckUsernameResponseDto {\n    @ApiProperty({ description: 'Username exists or not' })\n    exists: boolean;\n}\n\n//TODO: need this?\nexport class GetAccountDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n}\n\nexport class GetAccountResponseDto {\n    @ApiProperty({ description: 'SUI wallet address' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Account unique username' })\n    username: string;\n    @ApiProperty({ description: 'Player level' })\n    level: number;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class StartAuthSessionDto {\n    @ApiProperty({ description: 'EVM wallet address' })\n    evmWallet: string;\n}\n\nexport class StartAuthSessionResponseDto {\n    @ApiProperty({ description: 'The unique id of the created session' })\n    sessionId: string;\n    @ApiProperty({ description: 'A message for the client to sign as a challenge' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The username of the specified account, if it exists' })\n    username: string;\n}\n\nexport class AuthVerifyDto {\n    @ApiProperty({ description: 'Wallet address' })\n    wallet: string;\n    @ApiProperty({ description: 'Wallet type can be evm or sui' })\n    walletType: 'sui' | 'evm';\n    @ApiProperty({ description: 'The action being taken; verify signature, or update account' })\n    action: 'verify' | 'update';\n    @ApiProperty({ description: 'The unique id of this session' })\n    sessionId: string;\n    @ApiProperty({ description: 'The message that was signed by the client' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The message signature as signed by caller' })\n    signature: string;\n    @ApiProperty({ description: 'A unique user-chosen username' })\n    username: string;\n}\n\nexport class AuthVerifyResponseDto {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    wallet: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n    @ApiProperty({ description: 'Sui wallet address (if any)' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Username of user' })\n    username: string;\n}\n\nexport class UpdateUserLevelDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n    @ApiProperty({ description: 'Level of player' })\n    level: number;\n}\n\nexport class UpdateUserOAuthDto {\n    @ApiProperty({ description: 'Sui wallet address' })\n    suiAddress: string;\n    @ApiProperty({ description: 'Token from OAuth login' })\n    oauthToken: string;\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n    @ApiProperty({ description: 'Normally, the email' })\n    username: string;\n}\n\nexport class UpdateUserOAuthResponseDto {\n    @ApiProperty({ description: '' })\n    authId: string;\n    @ApiProperty({ description: '' })\n    username: string;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class GetUserOAuthDto {\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n}\n\nexport class GetUserOAuthResponseDto extends GetAccountResponseDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LeaderboardJsonFile.html":{"url":"classes/LeaderboardJsonFile.html","title":"class - LeaderboardJsonFile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LeaderboardJsonFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/leaderboard/LeaderboardJsonFile.ts\n        \n\n\n            \n                Description\n            \n            \n                Implementation of ILeaderboard that stores data in local JSON files.\nWhile this is still used for testing, it's a step beyond LeaderboardMemory, as it persists\nthe data.\n\n            \n\n            \n                Extends\n            \n            \n                            LeaderboardMemory\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                leaderboardMap\n                            \n                            \n                                network\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                _readFromFiles\n                            \n                            \n                                _writeToFile\n                            \n                            \n                                    Async\n                                addLeaderboardScore\n                            \n                            \n                                    Async\n                                createSprint\n                            \n                            \n                                    Async\n                                endSprint\n                            \n                            \n                                    Async\n                                getLeaderboardScore\n                            \n                            \n                                    Async\n                                getLeaderboardScores\n                            \n                            \n                                    Async\n                                getSprint\n                            \n                            \n                                    Async\n                                getSprints\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(network: string)\n                    \n                \n                        \n                            \n                                Defined in src/leaderboard/LeaderboardJsonFile.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        network\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        leaderboardMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                        \n                            \n                                Inherited from         LeaderboardMemory\n\n                            \n                        \n                    \n                        \n                                Defined in         LeaderboardMemory:9\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        network\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         LeaderboardMemory\n\n                            \n                        \n                    \n                        \n                                Defined in         LeaderboardMemory:10\n\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        _readFromFiles\n                        \n                    \n                \n            \n            \n                \n_readFromFiles()\n                \n            \n\n\n                    \n                        \n                            Defined in src/leaderboard/LeaderboardJsonFile.ts:31\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        _writeToFile\n                        \n                    \n                \n            \n            \n                \n_writeToFile(wallet: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/leaderboard/LeaderboardJsonFile.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                wallet\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addLeaderboardScore\n                        \n                    \n                \n            \n            \n                \n                        \n                    addLeaderboardScore(wallet: string, username: string, score: number, sprintId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         LeaderboardMemory\n\n                        \n                    \n                    \n                        \n                                Defined in         LeaderboardMemory:17\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                wallet\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                score\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                sprintId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    \"\"\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createSprint\n                        \n                    \n                \n            \n            \n                \n                        \n                    createSprint(sprintName: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         LeaderboardMemory\n\n                        \n                    \n                    \n                        \n                                Defined in         LeaderboardMemory:56\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sprintName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        endSprint\n                        \n                    \n                \n            \n            \n                \n                        \n                    endSprint(sprintName: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         LeaderboardMemory\n\n                        \n                    \n                    \n                        \n                                Defined in         LeaderboardMemory:61\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sprintName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getLeaderboardScore\n                        \n                    \n                \n            \n            \n                \n                        \n                    getLeaderboardScore(wallet: string, sprintId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         LeaderboardMemory\n\n                        \n                    \n                    \n                        \n                                Defined in         LeaderboardMemory:17\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                wallet\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                sprintId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    \"\"\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getLeaderboardScores\n                        \n                    \n                \n            \n            \n                \n                        \n                    getLeaderboardScores(limit: number, sprintId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         LeaderboardMemory\n\n                        \n                    \n                    \n                        \n                                Defined in         LeaderboardMemory:26\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    100\n                                            \n\n                                        \n                                        \n                                                sprintId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    \"\"\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getSprint\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSprint(sprintId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         LeaderboardMemory\n\n                        \n                    \n                    \n                        \n                                Defined in         LeaderboardMemory:66\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sprintId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getSprints\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSprints(limit: number)\n                \n            \n\n\n                    \n                        \n                            Inherited from         LeaderboardMemory\n\n                        \n                    \n                    \n                        \n                                Defined in         LeaderboardMemory:70\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as fs from 'fs';\nimport { ILeaderboard } from './ILeaderboard';\nimport { LeaderboardMemory } from './LeaderboardMemory';\n\n/**\n * Implementation of ILeaderboard that stores data in local JSON files. \n * While this is still used for testing, it's a step beyond LeaderboardMemory, as it persists \n * the data. \n */\nexport class LeaderboardJsonFile extends LeaderboardMemory {\n\n    constructor(network: string) {\n        super(network);\n        this._readFromFiles();\n    }\n\n    async addLeaderboardScore(wallet: string, username: string, score: number, sprintId: string = \"\"): Promise {\n        const output = await super.addLeaderboardScore(wallet, username, score);\n\n        this._writeToFile(wallet);\n        return output;\n    }\n\n    _writeToFile(wallet: string) {\n        if (this.leaderboardMap.has(wallet)) {\n            const path = `data/${wallet}.json`;\n            fs.writeFileSync(path, this.leaderboardMap.get(wallet).toString());\n        }\n    }\n\n    _readFromFiles() {\n        const path = `data/`;\n        const files = fs.readdirSync(path);\n\n        files.forEach(filename => {\n            const wallet = filename.split('.')[0];\n            fs.readFile(`data/${filename}`, (err, data) => {\n                try {\n                    this.leaderboardMap.set(wallet, parseInt(data.toString()));\n                }\n                catch (e) {\n                    console.error(e);\n                }\n            });\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LeaderboardMemory.html":{"url":"classes/LeaderboardMemory.html","title":"class - LeaderboardMemory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LeaderboardMemory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/leaderboard/LeaderboardMemory.ts\n        \n\n\n            \n                Description\n            \n            \n                Implementation of ILeaderboard that just stores the data in memory (which is wiped out when\nthe application is restarted; so this is more used for testing)\n\n            \n\n\n            \n                Implements\n            \n            \n                            ILeaderboard\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                leaderboardMap\n                            \n                            \n                                network\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addLeaderboardScore\n                            \n                            \n                                    Async\n                                createSprint\n                            \n                            \n                                    Async\n                                endSprint\n                            \n                            \n                                    Async\n                                getLeaderboardScore\n                            \n                            \n                                    Async\n                                getLeaderboardScores\n                            \n                            \n                                    Async\n                                getSprint\n                            \n                            \n                                    Async\n                                getSprints\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(network: string)\n                    \n                \n                        \n                            \n                                Defined in src/leaderboard/LeaderboardMemory.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        network\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        leaderboardMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Map\n\n                    \n                \n                    \n                        \n                                Defined in src/leaderboard/LeaderboardMemory.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        network\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/leaderboard/LeaderboardMemory.ts:10\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addLeaderboardScore\n                        \n                    \n                \n            \n            \n                \n                        \n                    addLeaderboardScore(wallet: string, username: string, score: number, sprintId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/leaderboard/LeaderboardMemory.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                wallet\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                score\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                sprintId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    \"\"\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createSprint\n                        \n                    \n                \n            \n            \n                \n                        \n                    createSprint(sprintName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/leaderboard/LeaderboardMemory.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sprintName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        endSprint\n                        \n                    \n                \n            \n            \n                \n                        \n                    endSprint(sprintName: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/leaderboard/LeaderboardMemory.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sprintName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getLeaderboardScore\n                        \n                    \n                \n            \n            \n                \n                        \n                    getLeaderboardScore(wallet: string, sprintId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/leaderboard/LeaderboardMemory.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                wallet\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                sprintId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    \"\"\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getLeaderboardScores\n                        \n                    \n                \n            \n            \n                \n                        \n                    getLeaderboardScores(limit: number, sprintId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/leaderboard/LeaderboardMemory.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    100\n                                            \n\n                                        \n                                        \n                                                sprintId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    \"\"\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getSprint\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSprint(sprintId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/leaderboard/LeaderboardMemory.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sprintId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getSprints\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSprints(limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/leaderboard/LeaderboardMemory.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as fs from 'fs';\nimport { ILeaderboard, ISprint } from './ILeaderboard';\n\n/***\n * Implementation of ILeaderboard that just stores the data in memory (which is wiped out when \n * the application is restarted; so this is more used for testing)\n */\nexport class LeaderboardMemory implements ILeaderboard {\n    leaderboardMap: Map;\n    network: string;\n\n    constructor(network: string) {\n        this.leaderboardMap = new Map();\n        this.network = network;\n    }\n\n    async getLeaderboardScore(wallet: string, sprintId: string = \"\"): Promise {\n        const output = { wallet, score: 0, username: '', network: this.network };\n\n        if (this.leaderboardMap.has(wallet))\n            output.score = this.leaderboardMap.get(wallet);\n\n        return output;\n    }\n\n    async getLeaderboardScores(limit: number = 100, sprintId: string = \"\"): Promise {\n        let output = { scores: [], network: this.network };\n\n        this.leaderboardMap.forEach((value: number, key: string) => {\n            output.scores.push({ wallet: key, score: value });\n        });\n\n        //sort \n        output.scores.sort((a, b) => { return b.score - a.score });\n\n        if (limit > 0 && output.scores.length > limit) {\n            output.scores = output.scores.slice(0, limit);\n        }\n\n        return output;\n    }\n\n    async addLeaderboardScore(wallet: string, username: string, score: number, sprintId: string = \"\"): Promise {\n        const output = { score: 0, network: this.network, username: '' };\n\n        if (this.leaderboardMap.has(wallet))\n            output.score = this.leaderboardMap.get(wallet);\n\n        output.score = parseInt(output.score.toString()) + parseInt(score.toString());\n        this.leaderboardMap.set(wallet, output.score);\n\n        return output;\n    }\n\n    //admin methods \n    async createSprint(sprintName: string): Promise {\n        throw \"Not implemented\";\n        return false;\n    }\n    \n    async endSprint(sprintName: string): Promise {\n        throw \"Not implemented\";\n        return false;\n    }\n    \n    async getSprint(sprintId: string): Promise {\n        return null;\n    }\n\n    async getSprints(limit: number): Promise {\n        return [];\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LocalScoreCache.html":{"url":"classes/LocalScoreCache.html","title":"class - LocalScoreCache","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LocalScoreCache\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/leaderboard/LeaderboardDynamoDb.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                count\n                            \n                            \n                                data\n                            \n                            \n                                expirationSeconds\n                            \n                            \n                                lastRefresh\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ageSeconds\n                            \n                            \n                                clear\n                            \n                            \n                                getAsArray\n                            \n                            \n                                isExpired\n                            \n                            \n                                refresh\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(expirationSeconds: number)\n                    \n                \n                        \n                            \n                                Defined in src/leaderboard/LeaderboardDynamoDb.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expirationSeconds\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        count\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/leaderboard/LeaderboardDynamoDb.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/leaderboard/LeaderboardDynamoDb.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expirationSeconds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/leaderboard/LeaderboardDynamoDb.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastRefresh\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/leaderboard/LeaderboardDynamoDb.ts:28\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ageSeconds\n                        \n                    \n                \n            \n            \n                \nageSeconds()\n                \n            \n\n\n                    \n                        \n                            Defined in src/leaderboard/LeaderboardDynamoDb.ts:46\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         number\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clear\n                        \n                    \n                \n            \n            \n                \nclear()\n                \n            \n\n\n                    \n                        \n                            Defined in src/leaderboard/LeaderboardDynamoDb.ts:71\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAsArray\n                        \n                    \n                \n            \n            \n                \ngetAsArray(limit: number, sort: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/leaderboard/LeaderboardDynamoDb.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    0\n                                            \n\n                                        \n                                        \n                                                sort\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         IScore[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isExpired\n                        \n                    \n                \n            \n            \n                \nisExpired()\n                \n            \n\n\n                    \n                        \n                            Defined in src/leaderboard/LeaderboardDynamoDb.ts:50\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refresh\n                        \n                    \n                \n            \n            \n                \nrefresh(scores: IScore[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/leaderboard/LeaderboardDynamoDb.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                scores\n                                            \n                                                            IScore[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(wallet: string, username: string, score: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/leaderboard/LeaderboardDynamoDb.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                wallet\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                score\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ILeaderboard, ISprint } from './ILeaderboard';\nimport { IDynamoResult } from '../dataAccess/IDynamoResult';\nimport { Config } from '../config';\nimport { DynamoDbAccess } from '../dataAccess/DynamoDbAccess';\nimport { String } from 'aws-sdk/clients/batch';\n\nconst DEFAULT_SPRINT_KEY = \"default\";\nconst GSI_SPRINT_NAME = \"GSI_SPRINT\";\nconst GSI_ACTIVE_NAME = \"GSI_ACTIVE\";\nconst DEFAULT_SPRINT_LENGTH = 86400 * 14; \n\n//TODO: add logging \n//TODO: exception handling \n//TODO: log warning or error if any data access call is not successful \n\nfunction unixDate() {\n    return Math.floor(Date.now()/1000);\n}\n\ninterface IScore {\n    wallet: string; \n    username: string;\n    score: number;\n}\n\nclass LocalScoreCache {\n    expirationSeconds: number; \n    lastRefresh: number; \n    count: number; \n    data: { [wallet: string]: IScore };\n\n    constructor(expirationSeconds: number = 600) {\n        this.expirationSeconds = expirationSeconds;\n        this.count = 0;\n        this.lastRefresh = 0;\n        this.data = {};\n    }\n    \n    getAsArray(limit: number = 0, sort: boolean = false): IScore[] {\n        const output = Object.values(this.data).slice(0, limit);\n        if (sort)\n            output.sort((a, b) => b.score - a.score);\n        return output;\n    }\n    \n    ageSeconds(): number {\n        return Math.floor(Date.now()/1000) - this.lastRefresh;\n    }\n    \n    isExpired(): boolean {\n        return this.ageSeconds() > this.expirationSeconds;\n    }\n    \n    update(wallet: string, username: string, score: number) {\n        if (this.data[wallet]) {\n            this.data[wallet].score = score;\n            this.data[wallet].username = username\n        }\n        else {\n            this.data[wallet] = { wallet, score, username}\n        }\n    }\n    \n    refresh(scores: IScore[]) {\n        this.lastRefresh = unixDate();\n        for(let n=0; n {\n        if (!sprintId || !sprintId.length) \n            sprintId = DEFAULT_SPRINT_KEY;\n        if (sprintId == \"current\") \n            sprintId = await this._getActiveSprintName(); \n            \n        \n        const output = {\n            wallet: wallet, \n            score: 0, \n            username: '',\n            network: this.network\n        };\n        \n        const result = await this._dataAccess_getScore(wallet, sprintId);\n        \n        if (result.success && result.data) {\n            output.score = parseInt(result.data.score.N);\n            output.username = result.data.username.S;\n        }\n        \n        return output;\n    }\n\n    async getLeaderboardScores(limit: number = 100, sprintId: string = \"\"): Promise {\n        if (!sprintId || !sprintId.length) \n            sprintId = DEFAULT_SPRINT_KEY;\n        if (sprintId == \"current\")\n            sprintId = await this._getActiveSprintName(); \n\n        let output = { scores: [], network: this.network, fromCache: false };\n        \n        //if default, get from local cache \n        if (sprintId == DEFAULT_SPRINT_KEY) {\n            const cache = await this._getScoresFromCache(localScoreCache_default, DEFAULT_SPRINT_KEY, limit); \n            output.scores = cache.scores;\n            output.fromCache = cache.fromCache;\n        }\n        else {\n            output.fromCache = false; \n            \n            //check: is it current sprint? \n            if (await this._isCurrentSprint(sprintId)) {\n                const cache = await this._getScoresFromCache(localScoreCache_sprint, sprintId, limit); \n                output.scores = cache.scores;\n                output.fromCache = cache.fromCache;\n            }\n            else {\n                //default: scan table for scores \n                output.scores = await this._scanForScores(sprintId);\n                \n                //sort and limit\n                output.scores.sort((a, b) => parseInt(b.score.N) - parseInt(a.score.N)).slice(0, limit);\n            }\n        }\n\n        return output;\n    }\n\n    async addLeaderboardScore(wallet: string, username: string, score: number, sprintId: string = \"\"): Promise {\n        if (!sprintId || !sprintId.length) \n            sprintId = DEFAULT_SPRINT_KEY;\n        if (sprintId == \"current\")\n            sprintId = await this._getActiveSprintName(); \n            \n        score = parseInt(score.toString());\n            \n        const output = { score: score, username: username, network: this.network }\n        \n        //get current score first \n        const result = await this._dataAccess_getScore(wallet, sprintId); \n        if (result.success && result.data) {\n            output.score = parseInt(result.data.score.N) + score;\n            output.username = result.data.username?.S ?? '';\n        }\n        \n        //write accumulated score \n        await this._dataAccess_putScore(wallet, username, output.score, sprintId) \n        \n        //add to default too, if adding to sprint \n        if (sprintId != DEFAULT_SPRINT_KEY) {\n            await this.addLeaderboardScore(wallet, username, score, sprintId); \n        }\n        \n        //update the cache \n        await this._updateCacheItem(wallet, username, output.score, sprintId)\n        \n        return output; \n    }\n\n    //admin methods \n    async createSprint(sprintId: string, startDate: number = 0): Promise {\n        if (startDate == 0) \n            startDate = unixDate();\n\n        //disallow values 'default' and 'current'\n        if (sprintId.trim().toLowerCase() == \"default\" || sprintId.trim().toLowerCase() == \"current\")\n            throw new Error(`Invalid sprintId identifier: ${sprintId}`); \n\n        //validation: check that date is ok \n        if (startDate  {\n        //validation: check that sprint exists \n        const sprint = await this.getSprint(sprintId);\n        if (!sprint) {\n            //TODO: log warning\n            return false;\n        }\n        \n        //validation: check that sprint not already ended \n        if (!sprint.active) {\n            //TODO: log warning\n            return false;\n        }\n        \n        //write record: set active=false and endDate = now\n        sprint.endDate = unixDate(); \n        await this._dataAccess_putSprint(sprintId, sprint.startDate, sprint.endDate, 0);\n        \n        return !(await this._isCurrentSprint(sprintId));\n    }\n    \n    async getSprint(sprintId: string): Promise {\n        let output: ISprint = null;\n        const sprint = await this._dataAccess_getSprint(sprintId); \n        if (sprint.success && sprint.data) {\n            output = {\n                sprintId : sprintId,\n                active: parseInt(sprint.data.active.N) > 0,\n                startDate: parseInt(sprint.data.startDate.N),\n                endDate: parseInt(sprint.data.endDate.N)\n            }\n        }\n        \n        return output; \n    }\n    \n    async getSprints(limit: number) : Promise {\n        const result = await this._dataAccess_scanSprints();\n        const items = result.success ? result.data : [];\n        const sprints = [];\n        \n        items.forEach(s => {\n            sprints.push({\n                sprintId: s.sprintId.S,\n                startDate: parseInt(s.startDate.N),\n                endDate: parseInt(s.endDate.N),\n                active: parseInt(s.active.N) > 0\n            });\n        });\n        \n        return sprints;\n    }\n    \n    async setActiveSprint(sprintId: string) : Promise {\n        const sprint = await this._dataAccess_getSprint(sprintId); \n        \n        //if sprint not found, return false \n        if (!sprint.success || !sprint.data) \n            return false; \n            \n        //if sprint not active, set active \n        if (parseInt(sprint.data.active.N)  {\n        const activeSprintId = await this._getActiveSprintName(); \n        if (activeSprintId == \"default\")\n            return false; \n            \n        const activeSprint = await this.getSprint(activeSprintId); \n        if (activeSprint) {\n            await this._dataAccess_putSprint(\n                activeSprintId, \n                activeSprint.startDate, \n                unixDate(),\n                0\n            )\n        }\n    }\n    \n    //private methods \n    async _sprintExists(sprintId: string): Promise {\n        const result = await this._dataAccess_getSprint(sprintId);\n        return (result.success && result.data) ? true: false;\n    }\n    \n    async _getActiveSprintName(): Promise {\n        const activeSprints = await this._dataAccess_getActiveSprints(); \n        if (activeSprints.success && activeSprints.data && activeSprints.data.length) {\n            const sprint = activeSprints.data[0]; \n            \n            //if no end date, or end date is in future, it's ok\n            if (sprint.endDate && sprint.endDate.N) {\n                const endDate = parseInt(sprint.endDate.N);\n                if (!endDate || endDate > unixDate())\n                    return sprint.sprintId.S;\n            } else {\n                return sprint.sprintId.S;\n            }\n        }\n        \n        return 'default';\n    }\n    \n    async _isCurrentSprint(sprintId: string): Promise {\n        const result = await this._dataAccess_getSprint(sprintId); \n        return result.success && result.data && (result.data.active.N > 0);\n    }\n    \n    async _getScoresFromCache(cache: LocalScoreCache, sprintId: string, limit: number = 100): Promise {\n        if (!cache.isExpired()) {\n            return {\n                fromCache: true,\n                scores: cache.getAsArray(limit, true)\n            };\n        }\n        \n        //TODO: if refreshing the cache, do it in separate thread \n        const data = await this._scanForScores(sprintId);\n        \n        //cache entire table\n        cache.refresh(data);\n\n        return {\n            fromCache: false,\n            scores: cache.getAsArray(limit, true)\n        };\n    }\n    \n    async _updateCacheItem(wallet: string, username: string, score:number, sprintId: string) {\n        let cache: LocalScoreCache = null;\n        if (sprintId == DEFAULT_SPRINT_KEY) {\n            cache = localScoreCache_default;\n        }\n        else {\n            if (await this._isCurrentSprint(sprintId)) {\n                cache = localScoreCache_sprint; \n            }\n        }\n        \n        if (cache) {\n            cache.update(wallet, username, score); \n        }\n    }\n    \n    async _scanForScores(sprintId: string): Promise {\n        const params = {\n            TableName: Config.scoresTableName,\n            IndexName: GSI_SPRINT_NAME,\n            KeyConditionExpression: \"sprintId = :sprintid_val\",\n            ExpressionAttributeValues: {\n                \":sprintid_val\": {'S': sprintId}\n            }\n        };\n        \n        const result = await this.dynamoDb.query(params); \n        if (result.success) {\n            const sortedItems = result.data.sort((a, b) => parseInt(b.score.N) - parseInt(a.score.N));\n            return sortedItems.map((i) => { return { wallet: i.wallet.S, username: i.username?.S ?? '', score: parseInt(i.score.N) } });\n        }\n\n        return [];\n    }\n    \n    //data access methods \n    \n    //TODO: not used\n    async _dataAccess_scanSprints(): Promise {\n        return await this.dynamoDb.scanTable(Config.sprintsTableName);\n    }\n\n    async _dataAccess_getScore(wallet: string, sprintId: string): Promise {\n        return await this.dynamoDb.getItem({\n            TableName: Config.scoresTableName,\n            Key: {\n                'wallet': { S: wallet },\n                'sprintId': { S: sprintId }\n            }\n        });\n    }\n\n    async _dataAccess_putScore(wallet: string, username: string, score: number, sprintId: string): Promise {\n        return await this.dynamoDb.putItem({\n            TableName: Config.scoresTableName,\n            Item: {\n                wallet: {'S': wallet },\n                username: {'S': username },\n                sprintId: { 'S': sprintId },\n                score: { 'N': score.toString() }\n            }\n        }); \n    }\n\n    async _dataAccess_getSprint(sprintId: string): Promise {\n        return await this.dynamoDb.getItem({\n            TableName: Config.sprintsTableName,\n            Key: {\n                'sprintId': { S: sprintId }\n            }\n        });\n    }\n\n    async _dataAccess_getActiveSprints(): Promise {\n        const params = {\n            TableName: Config.sprintsTableName,\n            IndexName: GSI_ACTIVE_NAME,\n            KeyConditionExpression: \"active = :active_val\",\n            ExpressionAttributeValues: {\n                \":active_val\": { 'N': \"1\" }\n            }\n        };\n        \n        return await this.dynamoDb.query(params);\n    }\n\n    async _dataAccess_putSprint(sprintId: string, startDate: number, endDate: number = 0, active: number = 0): Promise {\n        if (endDate == 0) \n            endDate = startDate + 365 * 3.154e+7;   //one year \n            \n        return await this.dynamoDb.putItem({ \n            TableName: Config.sprintsTableName,\n            Item: {\n                'sprintId': { 'S': sprintId },\n                'startDate': { 'N': startDate.toString() },\n                'endDate': { 'N': endDate.toString() },\n                'active': { 'N': active.toString() }\n            }\n        });\n    }\n    \n    async _dataAccess_deleteSprint(sprintId: string): Promise {\n        const params = {\n            TableName: Config.sprintsTableName,\n            Key: {\n                'sprintId': { S: sprintId }\n            }\n        }; \n\n        return await this.dynamoDb.deleteItem(params);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MintBeatmapsNftDto.html":{"url":"classes/MintBeatmapsNftDto.html","title":"class - MintBeatmapsNftDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MintBeatmapsNftDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/req.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                artist\n                            \n                            \n                                    \n                                beatmapJson\n                            \n                            \n                                    \n                                imageUrl\n                            \n                            \n                                    \n                                    Optional\n                                quantity\n                            \n                            \n                                    \n                                recipient\n                            \n                            \n                                    \n                                title\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        artist\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Song artist'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        beatmapJson\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Beatmap json'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'NFT image url'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Number of NFT to be minted'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        recipient\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The address of the recipient'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Song title or beatmap title'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Username of the beatmap creator'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass ResponseDtoBase {\n    @ApiProperty({ description: 'The current network (e.g. devnet)' })\n    network: string;\n}\n\nexport class MintBeatsNftDto {\n    @ApiProperty({ description: 'Name of the NFT' })\n    name: string;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'URL of the NFT image' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintBeatmapsNftDto {\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'Username of the beatmap creator' })\n    username: string;\n    @ApiProperty({ description: 'Song title or beatmap title' })\n    title: string;\n    @ApiProperty({ description: 'Song artist' })\n    artist: string;\n    @ApiProperty({ description: 'Beatmap json' })\n    beatmapJson: string;\n    @ApiProperty({ description: 'NFT image url' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintTokenDto {\n    @ApiProperty({ description: 'The amount of the token' })\n    amount: number;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n}\n\nexport class GetTokenBalanceDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class GetBeatsNftsDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class MintNftResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n    @ApiProperty({ description: 'The list of NFT addresses minted' })\n    addresses: string[];\n}\n\nexport class RequestNFTResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class MintTokenResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class GetTokenBalanceResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The balance of the wallet' })\n    balance: number;\n}\n\nexport class BeatsNftDto {\n    name: string;\n    url: string;\n}\n\nexport class BeatmapsNftDto {\n    username: string;\n    title: string;\n    artist: string;\n    beatmapJson: string;\n}\n\nexport class GetBeatsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The unique BEATS NFTs owned' })\n    nfts: BeatsNftDto[];\n}\n\nexport class GetBeatmapsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The BEATMAPS NFTs owned' })\n    nfts: BeatmapsNftDto[];\n}\n\nexport class VerifySignatureDto {\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'The expected signature' })\n    signature: string;\n    @ApiProperty({ description: 'The original message that was signed' })\n    message: string;\n}\n\nexport class VerifySignatureResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n}\n\n/// --- LEADERBOARD --- ///\n\nexport class GetLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The max number of records to include in the response' })\n    limit: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class LeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The total score of the users' })\n    score: number;\n    @ApiProperty({ description: 'The username of the user' })\n    username: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class GetLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of each user' })\n    scores: LeaderboardDto[];\n}\n\nexport class AddLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    authId: string;\n    @ApiProperty({ description: 'The auth type of the user login' })\n    authType: string;\n    @ApiProperty({ description: 'The score to add' })\n    score: number;\n    @ApiProperty({ description: 'The present username of the user being added' })\n    username: string;\n}\n\nexport class AddLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of the user' })\n    score: number;\n}\n\nexport class GetLeaderboardSprintDto {\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n    @ApiProperty({ description: 'Optional max number of records to return' })\n    limit: number;\n}\n\nexport class GetLeaderboardSprintResponseDto {\n    @ApiProperty({ description: 'Unique id of sprint' })\n    sprintId: string;\n    @ApiProperty({ description: 'Whether or not sprint is currently active' })\n    active: boolean;\n    @ApiProperty({ description: 'Sprint start date' })\n    startDate: number;\n    @ApiProperty({ description: 'Sprint end date' })\n    endDate: number;\n}\n\n/// --- AUTH --- ///\n\nexport class CheckUsernameDto {\n    @ApiProperty({ description: 'Username to check' })\n    username: string;\n}\n\nexport class CheckUsernameResponseDto {\n    @ApiProperty({ description: 'Username exists or not' })\n    exists: boolean;\n}\n\n//TODO: need this?\nexport class GetAccountDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n}\n\nexport class GetAccountResponseDto {\n    @ApiProperty({ description: 'SUI wallet address' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Account unique username' })\n    username: string;\n    @ApiProperty({ description: 'Player level' })\n    level: number;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class StartAuthSessionDto {\n    @ApiProperty({ description: 'EVM wallet address' })\n    evmWallet: string;\n}\n\nexport class StartAuthSessionResponseDto {\n    @ApiProperty({ description: 'The unique id of the created session' })\n    sessionId: string;\n    @ApiProperty({ description: 'A message for the client to sign as a challenge' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The username of the specified account, if it exists' })\n    username: string;\n}\n\nexport class AuthVerifyDto {\n    @ApiProperty({ description: 'Wallet address' })\n    wallet: string;\n    @ApiProperty({ description: 'Wallet type can be evm or sui' })\n    walletType: 'sui' | 'evm';\n    @ApiProperty({ description: 'The action being taken; verify signature, or update account' })\n    action: 'verify' | 'update';\n    @ApiProperty({ description: 'The unique id of this session' })\n    sessionId: string;\n    @ApiProperty({ description: 'The message that was signed by the client' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The message signature as signed by caller' })\n    signature: string;\n    @ApiProperty({ description: 'A unique user-chosen username' })\n    username: string;\n}\n\nexport class AuthVerifyResponseDto {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    wallet: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n    @ApiProperty({ description: 'Sui wallet address (if any)' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Username of user' })\n    username: string;\n}\n\nexport class UpdateUserLevelDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n    @ApiProperty({ description: 'Level of player' })\n    level: number;\n}\n\nexport class UpdateUserOAuthDto {\n    @ApiProperty({ description: 'Sui wallet address' })\n    suiAddress: string;\n    @ApiProperty({ description: 'Token from OAuth login' })\n    oauthToken: string;\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n    @ApiProperty({ description: 'Normally, the email' })\n    username: string;\n}\n\nexport class UpdateUserOAuthResponseDto {\n    @ApiProperty({ description: '' })\n    authId: string;\n    @ApiProperty({ description: '' })\n    username: string;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class GetUserOAuthDto {\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n}\n\nexport class GetUserOAuthResponseDto extends GetAccountResponseDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MintBeatsNftDto.html":{"url":"classes/MintBeatsNftDto.html","title":"class - MintBeatsNftDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MintBeatsNftDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/req.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                imageUrl\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    Optional\n                                quantity\n                            \n                            \n                                    \n                                recipient\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        imageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'URL of the NFT image'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Name of the NFT'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Number of NFT to be minted'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        recipient\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The address of the recipient'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass ResponseDtoBase {\n    @ApiProperty({ description: 'The current network (e.g. devnet)' })\n    network: string;\n}\n\nexport class MintBeatsNftDto {\n    @ApiProperty({ description: 'Name of the NFT' })\n    name: string;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'URL of the NFT image' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintBeatmapsNftDto {\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'Username of the beatmap creator' })\n    username: string;\n    @ApiProperty({ description: 'Song title or beatmap title' })\n    title: string;\n    @ApiProperty({ description: 'Song artist' })\n    artist: string;\n    @ApiProperty({ description: 'Beatmap json' })\n    beatmapJson: string;\n    @ApiProperty({ description: 'NFT image url' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintTokenDto {\n    @ApiProperty({ description: 'The amount of the token' })\n    amount: number;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n}\n\nexport class GetTokenBalanceDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class GetBeatsNftsDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class MintNftResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n    @ApiProperty({ description: 'The list of NFT addresses minted' })\n    addresses: string[];\n}\n\nexport class RequestNFTResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class MintTokenResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class GetTokenBalanceResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The balance of the wallet' })\n    balance: number;\n}\n\nexport class BeatsNftDto {\n    name: string;\n    url: string;\n}\n\nexport class BeatmapsNftDto {\n    username: string;\n    title: string;\n    artist: string;\n    beatmapJson: string;\n}\n\nexport class GetBeatsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The unique BEATS NFTs owned' })\n    nfts: BeatsNftDto[];\n}\n\nexport class GetBeatmapsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The BEATMAPS NFTs owned' })\n    nfts: BeatmapsNftDto[];\n}\n\nexport class VerifySignatureDto {\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'The expected signature' })\n    signature: string;\n    @ApiProperty({ description: 'The original message that was signed' })\n    message: string;\n}\n\nexport class VerifySignatureResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n}\n\n/// --- LEADERBOARD --- ///\n\nexport class GetLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The max number of records to include in the response' })\n    limit: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class LeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The total score of the users' })\n    score: number;\n    @ApiProperty({ description: 'The username of the user' })\n    username: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class GetLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of each user' })\n    scores: LeaderboardDto[];\n}\n\nexport class AddLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    authId: string;\n    @ApiProperty({ description: 'The auth type of the user login' })\n    authType: string;\n    @ApiProperty({ description: 'The score to add' })\n    score: number;\n    @ApiProperty({ description: 'The present username of the user being added' })\n    username: string;\n}\n\nexport class AddLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of the user' })\n    score: number;\n}\n\nexport class GetLeaderboardSprintDto {\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n    @ApiProperty({ description: 'Optional max number of records to return' })\n    limit: number;\n}\n\nexport class GetLeaderboardSprintResponseDto {\n    @ApiProperty({ description: 'Unique id of sprint' })\n    sprintId: string;\n    @ApiProperty({ description: 'Whether or not sprint is currently active' })\n    active: boolean;\n    @ApiProperty({ description: 'Sprint start date' })\n    startDate: number;\n    @ApiProperty({ description: 'Sprint end date' })\n    endDate: number;\n}\n\n/// --- AUTH --- ///\n\nexport class CheckUsernameDto {\n    @ApiProperty({ description: 'Username to check' })\n    username: string;\n}\n\nexport class CheckUsernameResponseDto {\n    @ApiProperty({ description: 'Username exists or not' })\n    exists: boolean;\n}\n\n//TODO: need this?\nexport class GetAccountDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n}\n\nexport class GetAccountResponseDto {\n    @ApiProperty({ description: 'SUI wallet address' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Account unique username' })\n    username: string;\n    @ApiProperty({ description: 'Player level' })\n    level: number;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class StartAuthSessionDto {\n    @ApiProperty({ description: 'EVM wallet address' })\n    evmWallet: string;\n}\n\nexport class StartAuthSessionResponseDto {\n    @ApiProperty({ description: 'The unique id of the created session' })\n    sessionId: string;\n    @ApiProperty({ description: 'A message for the client to sign as a challenge' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The username of the specified account, if it exists' })\n    username: string;\n}\n\nexport class AuthVerifyDto {\n    @ApiProperty({ description: 'Wallet address' })\n    wallet: string;\n    @ApiProperty({ description: 'Wallet type can be evm or sui' })\n    walletType: 'sui' | 'evm';\n    @ApiProperty({ description: 'The action being taken; verify signature, or update account' })\n    action: 'verify' | 'update';\n    @ApiProperty({ description: 'The unique id of this session' })\n    sessionId: string;\n    @ApiProperty({ description: 'The message that was signed by the client' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The message signature as signed by caller' })\n    signature: string;\n    @ApiProperty({ description: 'A unique user-chosen username' })\n    username: string;\n}\n\nexport class AuthVerifyResponseDto {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    wallet: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n    @ApiProperty({ description: 'Sui wallet address (if any)' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Username of user' })\n    username: string;\n}\n\nexport class UpdateUserLevelDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n    @ApiProperty({ description: 'Level of player' })\n    level: number;\n}\n\nexport class UpdateUserOAuthDto {\n    @ApiProperty({ description: 'Sui wallet address' })\n    suiAddress: string;\n    @ApiProperty({ description: 'Token from OAuth login' })\n    oauthToken: string;\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n    @ApiProperty({ description: 'Normally, the email' })\n    username: string;\n}\n\nexport class UpdateUserOAuthResponseDto {\n    @ApiProperty({ description: '' })\n    authId: string;\n    @ApiProperty({ description: '' })\n    username: string;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class GetUserOAuthDto {\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n}\n\nexport class GetUserOAuthResponseDto extends GetAccountResponseDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MintNftResponseDto.html":{"url":"classes/MintNftResponseDto.html","title":"class - MintNftResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MintNftResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/req.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ResponseDtoBase\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                addresses\n                            \n                            \n                                    \n                                signature\n                            \n                            \n                                    \n                                network\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addresses\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The list of NFT addresses minted'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        signature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The signature of the transaction'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        network\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The current network (e.g. devnet)'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ResponseDtoBase\n\n                            \n                        \n                    \n                        \n                                Defined in         ResponseDtoBase:5\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass ResponseDtoBase {\n    @ApiProperty({ description: 'The current network (e.g. devnet)' })\n    network: string;\n}\n\nexport class MintBeatsNftDto {\n    @ApiProperty({ description: 'Name of the NFT' })\n    name: string;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'URL of the NFT image' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintBeatmapsNftDto {\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'Username of the beatmap creator' })\n    username: string;\n    @ApiProperty({ description: 'Song title or beatmap title' })\n    title: string;\n    @ApiProperty({ description: 'Song artist' })\n    artist: string;\n    @ApiProperty({ description: 'Beatmap json' })\n    beatmapJson: string;\n    @ApiProperty({ description: 'NFT image url' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintTokenDto {\n    @ApiProperty({ description: 'The amount of the token' })\n    amount: number;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n}\n\nexport class GetTokenBalanceDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class GetBeatsNftsDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class MintNftResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n    @ApiProperty({ description: 'The list of NFT addresses minted' })\n    addresses: string[];\n}\n\nexport class RequestNFTResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class MintTokenResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class GetTokenBalanceResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The balance of the wallet' })\n    balance: number;\n}\n\nexport class BeatsNftDto {\n    name: string;\n    url: string;\n}\n\nexport class BeatmapsNftDto {\n    username: string;\n    title: string;\n    artist: string;\n    beatmapJson: string;\n}\n\nexport class GetBeatsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The unique BEATS NFTs owned' })\n    nfts: BeatsNftDto[];\n}\n\nexport class GetBeatmapsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The BEATMAPS NFTs owned' })\n    nfts: BeatmapsNftDto[];\n}\n\nexport class VerifySignatureDto {\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'The expected signature' })\n    signature: string;\n    @ApiProperty({ description: 'The original message that was signed' })\n    message: string;\n}\n\nexport class VerifySignatureResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n}\n\n/// --- LEADERBOARD --- ///\n\nexport class GetLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The max number of records to include in the response' })\n    limit: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class LeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The total score of the users' })\n    score: number;\n    @ApiProperty({ description: 'The username of the user' })\n    username: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class GetLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of each user' })\n    scores: LeaderboardDto[];\n}\n\nexport class AddLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    authId: string;\n    @ApiProperty({ description: 'The auth type of the user login' })\n    authType: string;\n    @ApiProperty({ description: 'The score to add' })\n    score: number;\n    @ApiProperty({ description: 'The present username of the user being added' })\n    username: string;\n}\n\nexport class AddLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of the user' })\n    score: number;\n}\n\nexport class GetLeaderboardSprintDto {\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n    @ApiProperty({ description: 'Optional max number of records to return' })\n    limit: number;\n}\n\nexport class GetLeaderboardSprintResponseDto {\n    @ApiProperty({ description: 'Unique id of sprint' })\n    sprintId: string;\n    @ApiProperty({ description: 'Whether or not sprint is currently active' })\n    active: boolean;\n    @ApiProperty({ description: 'Sprint start date' })\n    startDate: number;\n    @ApiProperty({ description: 'Sprint end date' })\n    endDate: number;\n}\n\n/// --- AUTH --- ///\n\nexport class CheckUsernameDto {\n    @ApiProperty({ description: 'Username to check' })\n    username: string;\n}\n\nexport class CheckUsernameResponseDto {\n    @ApiProperty({ description: 'Username exists or not' })\n    exists: boolean;\n}\n\n//TODO: need this?\nexport class GetAccountDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n}\n\nexport class GetAccountResponseDto {\n    @ApiProperty({ description: 'SUI wallet address' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Account unique username' })\n    username: string;\n    @ApiProperty({ description: 'Player level' })\n    level: number;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class StartAuthSessionDto {\n    @ApiProperty({ description: 'EVM wallet address' })\n    evmWallet: string;\n}\n\nexport class StartAuthSessionResponseDto {\n    @ApiProperty({ description: 'The unique id of the created session' })\n    sessionId: string;\n    @ApiProperty({ description: 'A message for the client to sign as a challenge' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The username of the specified account, if it exists' })\n    username: string;\n}\n\nexport class AuthVerifyDto {\n    @ApiProperty({ description: 'Wallet address' })\n    wallet: string;\n    @ApiProperty({ description: 'Wallet type can be evm or sui' })\n    walletType: 'sui' | 'evm';\n    @ApiProperty({ description: 'The action being taken; verify signature, or update account' })\n    action: 'verify' | 'update';\n    @ApiProperty({ description: 'The unique id of this session' })\n    sessionId: string;\n    @ApiProperty({ description: 'The message that was signed by the client' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The message signature as signed by caller' })\n    signature: string;\n    @ApiProperty({ description: 'A unique user-chosen username' })\n    username: string;\n}\n\nexport class AuthVerifyResponseDto {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    wallet: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n    @ApiProperty({ description: 'Sui wallet address (if any)' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Username of user' })\n    username: string;\n}\n\nexport class UpdateUserLevelDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n    @ApiProperty({ description: 'Level of player' })\n    level: number;\n}\n\nexport class UpdateUserOAuthDto {\n    @ApiProperty({ description: 'Sui wallet address' })\n    suiAddress: string;\n    @ApiProperty({ description: 'Token from OAuth login' })\n    oauthToken: string;\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n    @ApiProperty({ description: 'Normally, the email' })\n    username: string;\n}\n\nexport class UpdateUserOAuthResponseDto {\n    @ApiProperty({ description: '' })\n    authId: string;\n    @ApiProperty({ description: '' })\n    username: string;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class GetUserOAuthDto {\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n}\n\nexport class GetUserOAuthResponseDto extends GetAccountResponseDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MintTokenDto.html":{"url":"classes/MintTokenDto.html","title":"class - MintTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MintTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/req.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                amount\n                            \n                            \n                                    \n                                recipient\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The amount of the token'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        recipient\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The address of the recipient'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:40\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass ResponseDtoBase {\n    @ApiProperty({ description: 'The current network (e.g. devnet)' })\n    network: string;\n}\n\nexport class MintBeatsNftDto {\n    @ApiProperty({ description: 'Name of the NFT' })\n    name: string;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'URL of the NFT image' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintBeatmapsNftDto {\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'Username of the beatmap creator' })\n    username: string;\n    @ApiProperty({ description: 'Song title or beatmap title' })\n    title: string;\n    @ApiProperty({ description: 'Song artist' })\n    artist: string;\n    @ApiProperty({ description: 'Beatmap json' })\n    beatmapJson: string;\n    @ApiProperty({ description: 'NFT image url' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintTokenDto {\n    @ApiProperty({ description: 'The amount of the token' })\n    amount: number;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n}\n\nexport class GetTokenBalanceDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class GetBeatsNftsDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class MintNftResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n    @ApiProperty({ description: 'The list of NFT addresses minted' })\n    addresses: string[];\n}\n\nexport class RequestNFTResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class MintTokenResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class GetTokenBalanceResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The balance of the wallet' })\n    balance: number;\n}\n\nexport class BeatsNftDto {\n    name: string;\n    url: string;\n}\n\nexport class BeatmapsNftDto {\n    username: string;\n    title: string;\n    artist: string;\n    beatmapJson: string;\n}\n\nexport class GetBeatsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The unique BEATS NFTs owned' })\n    nfts: BeatsNftDto[];\n}\n\nexport class GetBeatmapsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The BEATMAPS NFTs owned' })\n    nfts: BeatmapsNftDto[];\n}\n\nexport class VerifySignatureDto {\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'The expected signature' })\n    signature: string;\n    @ApiProperty({ description: 'The original message that was signed' })\n    message: string;\n}\n\nexport class VerifySignatureResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n}\n\n/// --- LEADERBOARD --- ///\n\nexport class GetLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The max number of records to include in the response' })\n    limit: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class LeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The total score of the users' })\n    score: number;\n    @ApiProperty({ description: 'The username of the user' })\n    username: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class GetLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of each user' })\n    scores: LeaderboardDto[];\n}\n\nexport class AddLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    authId: string;\n    @ApiProperty({ description: 'The auth type of the user login' })\n    authType: string;\n    @ApiProperty({ description: 'The score to add' })\n    score: number;\n    @ApiProperty({ description: 'The present username of the user being added' })\n    username: string;\n}\n\nexport class AddLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of the user' })\n    score: number;\n}\n\nexport class GetLeaderboardSprintDto {\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n    @ApiProperty({ description: 'Optional max number of records to return' })\n    limit: number;\n}\n\nexport class GetLeaderboardSprintResponseDto {\n    @ApiProperty({ description: 'Unique id of sprint' })\n    sprintId: string;\n    @ApiProperty({ description: 'Whether or not sprint is currently active' })\n    active: boolean;\n    @ApiProperty({ description: 'Sprint start date' })\n    startDate: number;\n    @ApiProperty({ description: 'Sprint end date' })\n    endDate: number;\n}\n\n/// --- AUTH --- ///\n\nexport class CheckUsernameDto {\n    @ApiProperty({ description: 'Username to check' })\n    username: string;\n}\n\nexport class CheckUsernameResponseDto {\n    @ApiProperty({ description: 'Username exists or not' })\n    exists: boolean;\n}\n\n//TODO: need this?\nexport class GetAccountDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n}\n\nexport class GetAccountResponseDto {\n    @ApiProperty({ description: 'SUI wallet address' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Account unique username' })\n    username: string;\n    @ApiProperty({ description: 'Player level' })\n    level: number;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class StartAuthSessionDto {\n    @ApiProperty({ description: 'EVM wallet address' })\n    evmWallet: string;\n}\n\nexport class StartAuthSessionResponseDto {\n    @ApiProperty({ description: 'The unique id of the created session' })\n    sessionId: string;\n    @ApiProperty({ description: 'A message for the client to sign as a challenge' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The username of the specified account, if it exists' })\n    username: string;\n}\n\nexport class AuthVerifyDto {\n    @ApiProperty({ description: 'Wallet address' })\n    wallet: string;\n    @ApiProperty({ description: 'Wallet type can be evm or sui' })\n    walletType: 'sui' | 'evm';\n    @ApiProperty({ description: 'The action being taken; verify signature, or update account' })\n    action: 'verify' | 'update';\n    @ApiProperty({ description: 'The unique id of this session' })\n    sessionId: string;\n    @ApiProperty({ description: 'The message that was signed by the client' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The message signature as signed by caller' })\n    signature: string;\n    @ApiProperty({ description: 'A unique user-chosen username' })\n    username: string;\n}\n\nexport class AuthVerifyResponseDto {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    wallet: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n    @ApiProperty({ description: 'Sui wallet address (if any)' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Username of user' })\n    username: string;\n}\n\nexport class UpdateUserLevelDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n    @ApiProperty({ description: 'Level of player' })\n    level: number;\n}\n\nexport class UpdateUserOAuthDto {\n    @ApiProperty({ description: 'Sui wallet address' })\n    suiAddress: string;\n    @ApiProperty({ description: 'Token from OAuth login' })\n    oauthToken: string;\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n    @ApiProperty({ description: 'Normally, the email' })\n    username: string;\n}\n\nexport class UpdateUserOAuthResponseDto {\n    @ApiProperty({ description: '' })\n    authId: string;\n    @ApiProperty({ description: '' })\n    username: string;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class GetUserOAuthDto {\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n}\n\nexport class GetUserOAuthResponseDto extends GetAccountResponseDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MintTokenResponseDto.html":{"url":"classes/MintTokenResponseDto.html","title":"class - MintTokenResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MintTokenResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/req.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ResponseDtoBase\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                signature\n                            \n                            \n                                    \n                                network\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        signature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The signature of the transaction'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        network\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The current network (e.g. devnet)'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ResponseDtoBase\n\n                            \n                        \n                    \n                        \n                                Defined in         ResponseDtoBase:5\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass ResponseDtoBase {\n    @ApiProperty({ description: 'The current network (e.g. devnet)' })\n    network: string;\n}\n\nexport class MintBeatsNftDto {\n    @ApiProperty({ description: 'Name of the NFT' })\n    name: string;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'URL of the NFT image' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintBeatmapsNftDto {\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'Username of the beatmap creator' })\n    username: string;\n    @ApiProperty({ description: 'Song title or beatmap title' })\n    title: string;\n    @ApiProperty({ description: 'Song artist' })\n    artist: string;\n    @ApiProperty({ description: 'Beatmap json' })\n    beatmapJson: string;\n    @ApiProperty({ description: 'NFT image url' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintTokenDto {\n    @ApiProperty({ description: 'The amount of the token' })\n    amount: number;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n}\n\nexport class GetTokenBalanceDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class GetBeatsNftsDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class MintNftResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n    @ApiProperty({ description: 'The list of NFT addresses minted' })\n    addresses: string[];\n}\n\nexport class RequestNFTResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class MintTokenResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class GetTokenBalanceResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The balance of the wallet' })\n    balance: number;\n}\n\nexport class BeatsNftDto {\n    name: string;\n    url: string;\n}\n\nexport class BeatmapsNftDto {\n    username: string;\n    title: string;\n    artist: string;\n    beatmapJson: string;\n}\n\nexport class GetBeatsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The unique BEATS NFTs owned' })\n    nfts: BeatsNftDto[];\n}\n\nexport class GetBeatmapsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The BEATMAPS NFTs owned' })\n    nfts: BeatmapsNftDto[];\n}\n\nexport class VerifySignatureDto {\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'The expected signature' })\n    signature: string;\n    @ApiProperty({ description: 'The original message that was signed' })\n    message: string;\n}\n\nexport class VerifySignatureResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n}\n\n/// --- LEADERBOARD --- ///\n\nexport class GetLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The max number of records to include in the response' })\n    limit: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class LeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The total score of the users' })\n    score: number;\n    @ApiProperty({ description: 'The username of the user' })\n    username: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class GetLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of each user' })\n    scores: LeaderboardDto[];\n}\n\nexport class AddLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    authId: string;\n    @ApiProperty({ description: 'The auth type of the user login' })\n    authType: string;\n    @ApiProperty({ description: 'The score to add' })\n    score: number;\n    @ApiProperty({ description: 'The present username of the user being added' })\n    username: string;\n}\n\nexport class AddLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of the user' })\n    score: number;\n}\n\nexport class GetLeaderboardSprintDto {\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n    @ApiProperty({ description: 'Optional max number of records to return' })\n    limit: number;\n}\n\nexport class GetLeaderboardSprintResponseDto {\n    @ApiProperty({ description: 'Unique id of sprint' })\n    sprintId: string;\n    @ApiProperty({ description: 'Whether or not sprint is currently active' })\n    active: boolean;\n    @ApiProperty({ description: 'Sprint start date' })\n    startDate: number;\n    @ApiProperty({ description: 'Sprint end date' })\n    endDate: number;\n}\n\n/// --- AUTH --- ///\n\nexport class CheckUsernameDto {\n    @ApiProperty({ description: 'Username to check' })\n    username: string;\n}\n\nexport class CheckUsernameResponseDto {\n    @ApiProperty({ description: 'Username exists or not' })\n    exists: boolean;\n}\n\n//TODO: need this?\nexport class GetAccountDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n}\n\nexport class GetAccountResponseDto {\n    @ApiProperty({ description: 'SUI wallet address' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Account unique username' })\n    username: string;\n    @ApiProperty({ description: 'Player level' })\n    level: number;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class StartAuthSessionDto {\n    @ApiProperty({ description: 'EVM wallet address' })\n    evmWallet: string;\n}\n\nexport class StartAuthSessionResponseDto {\n    @ApiProperty({ description: 'The unique id of the created session' })\n    sessionId: string;\n    @ApiProperty({ description: 'A message for the client to sign as a challenge' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The username of the specified account, if it exists' })\n    username: string;\n}\n\nexport class AuthVerifyDto {\n    @ApiProperty({ description: 'Wallet address' })\n    wallet: string;\n    @ApiProperty({ description: 'Wallet type can be evm or sui' })\n    walletType: 'sui' | 'evm';\n    @ApiProperty({ description: 'The action being taken; verify signature, or update account' })\n    action: 'verify' | 'update';\n    @ApiProperty({ description: 'The unique id of this session' })\n    sessionId: string;\n    @ApiProperty({ description: 'The message that was signed by the client' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The message signature as signed by caller' })\n    signature: string;\n    @ApiProperty({ description: 'A unique user-chosen username' })\n    username: string;\n}\n\nexport class AuthVerifyResponseDto {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    wallet: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n    @ApiProperty({ description: 'Sui wallet address (if any)' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Username of user' })\n    username: string;\n}\n\nexport class UpdateUserLevelDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n    @ApiProperty({ description: 'Level of player' })\n    level: number;\n}\n\nexport class UpdateUserOAuthDto {\n    @ApiProperty({ description: 'Sui wallet address' })\n    suiAddress: string;\n    @ApiProperty({ description: 'Token from OAuth login' })\n    oauthToken: string;\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n    @ApiProperty({ description: 'Normally, the email' })\n    username: string;\n}\n\nexport class UpdateUserOAuthResponseDto {\n    @ApiProperty({ description: '' })\n    authId: string;\n    @ApiProperty({ description: '' })\n    username: string;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class GetUserOAuthDto {\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n}\n\nexport class GetUserOAuthResponseDto extends GetAccountResponseDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MockService.html":{"url":"classes/MockService.html","title":"class - MockService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MockService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            test/test-auth.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authManager\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                _moveAssets\n                            \n                            \n                                    Async\n                                _verifyEvmSignature\n                            \n                            \n                                    Async\n                                _verifySessionId\n                            \n                            \n                                    Async\n                                changeSuiWalletAddress\n                            \n                            \n                                createWallet\n                            \n                            \n                                    Async\n                                registerAccountEvm\n                            \n                            \n                                    Async\n                                verifySignature2\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in test/test-auth.ts:48\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authManager\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IAuthManager\n\n                    \n                \n                    \n                        \n                                Defined in test/test-auth.ts:48\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        _moveAssets\n                        \n                    \n                \n            \n            \n                \n                        \n                    _moveAssets(source: IAuthRecord, dest: string)\n                \n            \n\n\n                    \n                        \n                            Defined in test/test-auth.ts:163\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                source\n                                            \n                                                            IAuthRecord\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dest\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        _verifyEvmSignature\n                        \n                    \n                \n            \n            \n                \n                        \n                    _verifyEvmSignature(expectedAddress: string, signature: string, message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in test/test-auth.ts:189\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                expectedAddress\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                signature\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        _verifySessionId\n                        \n                    \n                \n            \n            \n                \n                        \n                    _verifySessionId(sessionId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in test/test-auth.ts:184\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sessionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changeSuiWalletAddress\n                        \n                    \n                \n            \n            \n                \n                        \n                    changeSuiWalletAddress(authId: string, authType: \"evm\" | \"sui\", newSuiWallet: string)\n                \n            \n\n\n                    \n                        \n                            Defined in test/test-auth.ts:133\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                authId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                authType\n                                            \n                                                        \"evm\" | \"sui\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newSuiWallet\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createWallet\n                        \n                    \n                \n            \n            \n                \ncreateWallet()\n                \n            \n\n\n                    \n                        \n                            Defined in test/test-auth.ts:198\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     literal type\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        registerAccountEvm\n                        \n                    \n                \n            \n            \n                \n                        \n                    registerAccountEvm(evmWallet: string)\n                \n            \n\n\n                    \n                        \n                            Defined in test/test-auth.ts:208\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                evmWallet\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifySignature2\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifySignature2(sessionId: string, walletType: \"evm\" | \"sui\", walletPubKey: string, action: \"update\" | \"verify\", signature: string, message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in test/test-auth.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sessionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                walletType\n                                            \n                                                        \"evm\" | \"sui\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                walletPubKey\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                action\n                                            \n                                                            \"update\" | \"verify\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                signature\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        process.env.DBTABLE_NAME_AUTH = \"auth-dev\";\nprocess.env.DBTABLE_NAME_AUTH_SESSION = \"auth-session-dev\";\n\nimport { AuthManagerDynamoDb } from \"../src/auth/AuthManagerDynamoDb\";\nimport { config, DynamoDB } from \"aws-sdk\";\nimport { Config } from '../src/config';\nimport * as fs from 'fs';\nimport { Ed25519Keypair } from '@mysten/sui.js/keypairs/ed25519'\nimport { IAuthManager, IAuthRecord, IAuthSession } from \"../src/auth/IAuthManager\";\n\n\nconst AUTH_TABLE_NAME = \"auth-test\"; //process.env.DBTABLE_NAME_AUTH;\nconst AUTH_SESSION_TABLE_NAME = \"auth-session-test\"; //process.env.DBTABLE_NAME_AUTH_SESSION;\nconst GSI_USERNAME_NAME = \"GSI_USERNAME\";\n\nprocess.env.AWS_REGION = \"ap-northeast-1\"\n//process.env.AWS_ACCESS_KEY = \"AKIA3RQQOFZK7U7KTE2R\"\n//process.env.AWS_ACCESS_SECRET = \"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\";\nprocess.env.AWS_ACCESS_KEY = \"AKIA3RQQOFZKTR4YARHP\"\nprocess.env.AWS_ACCESS_SECRET = \"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\";\n\nconfig.update({\n    accessKeyId: \"AKIA3RQQOFZKTR4YARHP\",\n    secretAccessKey: \"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\",\n    region: \"ap-northeast-1\"\n});\n\nconst dynamoDb = new DynamoDB();\n//const web3 = new Web3(\"\");\n\nasync function deleteAuthTable() {\n    await deleteTable(AUTH_TABLE_NAME);\n}\n\nasync function verifySignature(message, signature, expectedAddress) {\n    /*\n    const msgHash = web3.utils.soliditySha3(message);\n    const signingAddress = await web3.eth.accounts.recover(msgHash, signature);\n\n    const verified = signingAddress.toLowerCase() === expectedAddress.toLowerCase();\n    console.log(verified);\n    console.log(expectedAddress);\n    console.log(signingAddress);\n    */\n}\n\nclass MockService {\n    authManager: IAuthManager\n    \n    constructor() {\n        this.authManager = new AuthManagerDynamoDb();\n    }\n\n    async verifySignature2(\n        sessionId: string,\n        walletType: 'evm' | 'sui',\n        walletPubKey: string,\n        action: 'update' | 'verify',\n        signature: string,\n        message: string): Promise {\n\n        const output = {\n            success: false,\n            failureReason: '',\n            wallet: '',\n            network: '',\n            verified: false\n        };\n\n        //first verify session id, if any\n        if (sessionId && sessionId.length) {\n            if (!(await this._verifySessionId(sessionId))) {\n                output.failureReason = 'sessionIdInvalid';\n                return output;\n            }\n        }\n\n        //EVM verification \n        if (walletType == 'evm') {\n            const { verified, address } = await this._verifyEvmSignature(walletPubKey, signature, message);\n            output.success = verified;\n            output.wallet = address;\n\n            if (!verified) {\n                output.failureReason = 'unknown';\n            }\n        }\n\n        //update the auth session record \n        let evmWallet: string = walletType == 'evm' ? output.wallet : null;\n        let suiWallet: string = walletType == 'sui' ? output.wallet : null;\n        this.authManager.updateAuthSession(sessionId, evmWallet, suiWallet, true);\n\n        //here we will create a sui wallet if necessary \n        if (action == 'update' && walletType == 'evm') {\n            //does the record exist? \n            const authRecord: IAuthRecord = await this.authManager.getAuthRecord(evmWallet, 'evm');\n\n            //if exixsts, update it \n            if (authRecord) {\n                if (authRecord.suiWallet != suiWallet) {\n                    await this.authManager.updateAuthRecord(evmWallet, \"evm\", suiWallet);\n                }\n            }\n            //otherwise, register it \n            else {\n                const register = await this.registerAccountEvm(evmWallet);\n                if (register.status == \"success\") {\n                    suiWallet = register.suiWallet;\n                    await this.authManager.updateAuthRecord(evmWallet, \"evm\", suiWallet);\n                }\n            }\n        }\n\n        //here we will change the sui wallet asssociated with an evm wallet\n        if (action == 'update' && walletType == 'sui') {\n            //get the evm wallet associated with the session\n            const session: IAuthSession = await this.authManager.getAuthSession(sessionId);\n            if (session.evmWallet) { //TODO: need to record/check if evm wallet verified\n                evmWallet = session.evmWallet;\n                await this.changeSuiWalletAddress(evmWallet, \"evm\", suiWallet); \n            }\n        }\n\n        return output;\n    }\n    \n    async changeSuiWalletAddress(authId: string, authType: 'evm' | 'sui', newSuiWallet: string): Promise {\n        const output = { status: \"\" }\n\n        //get existing auth record\n        const authRecord = await this.authManager.getAuthRecord(authId, authType);\n        if (authRecord == null) {\n            output.status = \"notfound\";\n        }\n        else {\n            newSuiWallet = newSuiWallet.trim();\n\n            //check that the new wallet doesn't match the old \n            if (newSuiWallet != authRecord.authId.trim()) {\n                output.status = \"duplicate\";\n            }\n            else {\n                //move assets from old wallet to new one \n                if (authRecord.extraData && authRecord.extraData.privateKey) {\n                    await this._moveAssets(authRecord, newSuiWallet);\n                }\n\n                //update the database \n                this.authManager.setSuiWalletAddress(authRecord.authId, authRecord.authType, newSuiWallet);\n                output.status = \"success\";\n            }\n        }\n\n        return output;\n    }\n    \n    async _moveAssets(source: IAuthRecord, dest: string) {\n        const privateKey = source.extraData.privateKey;\n        const walletAddr = source.authId;\n        const keypair: Ed25519Keypair = Ed25519Keypair.fromSecretKey(privateKey);\n\n        //TODO: check that the address of the keypair matches the stored address\n        /*\n        const tokenType = `${this.packageId}::beats::BEATS`;\n        const tokenBalance = await this.getTokenBalance(walletAddr);\n        const nftBalances = await this.getUserNFTs(walletAddr);\n\n        //mint equal number of token to new address\n        await this.mintTokens(dest, tokenBalance.balance);\n\n        //for each NFT owned\n        nftBalances.nfts.forEach(async nft => {\n            await this.mintBeatsNfts(dest, nft.name, \"Soundbeats NFT\", nft.url, 1);\n        });\n        */\n    }\n    \n    async _verifySessionId(sessionId: string): Promise {\n        const session: IAuthSession = await this.authManager.getAuthSession(sessionId);\n        return (session != null);\n    }\n\n    async _verifyEvmSignature(expectedAddress: string, signature: string, message: string): Promise {\n        //const msgHash = this.web3.utils.soliditySha3(message);\n        //const signingAddress = await this.web3.eth.accounts.recover(msgHash, signature);\n\n        //const verified = signingAddress.toLowerCase() === expectedAddress.toLowerCase();\n        //return { address: signingAddress, verified: verified };\n        return { address: expectedAddress, verified: true }\n    }\n\n    createWallet(): { address: string, privateKey: string } {\n        const keypair = new Ed25519Keypair();\n        const exported = keypair.export();\n\n        return {\n            address: keypair.toSuiAddress(),\n            privateKey: exported.privateKey\n        }\n    }\n    \n    async registerAccountEvm(evmWallet: string): Promise {\n        const output = {\n            authId: evmWallet,\n            authType: \"evm\",\n            suiWallet: \"\",\n            status: \"\"\n        };\n\n        //make sure first that the login doesn't already exist\n        const authRecord = await this.authManager.getAuthRecord(evmWallet, \"evm\");\n        if (authRecord != null) {\n            output.status = \"duplicate\";\n            output.suiWallet = authRecord.authId;\n        }\n        else {\n            //create a new wallet \n            const suiWallet = this.createWallet();\n            output.suiWallet = suiWallet.address;\n\n            //store the info in the database\n            const success = await this.authManager.register(evmWallet, \"evm\", suiWallet.address, \"\", {\n                privateKey: suiWallet.privateKey\n            });\n\n            if (success) {\n                output.status = \"success\";\n            }\n        }\n\n        return output;\n    }\n}\n\nasync function createAuthTable() {\n    const params = {\n        TableName: AUTH_TABLE_NAME,\n        KeySchema: [\n            { AttributeName: \"authId\", KeyType: \"HASH\" }, // Partition key\n            { AttributeName: \"authType\", KeyType: \"RANGE\" } // Sort key\n        ],\n        AttributeDefinitions: [\n            { AttributeName: \"authId\", AttributeType: \"S\" },\n            { AttributeName: \"authType\", AttributeType: \"S\" },\n            //{ AttributeName: \"extraData\", AttributeType: \"S\" },\n            //{ AttributeName: \"suiWallet\", AttributeType: \"S\" },\n            //{ AttributeName: \"sessionKey\", AttributeType: \"S\" }\n        ],\n        ProvisionedThroughput: {\n            ReadCapacityUnits: 5,\n            WriteCapacityUnits: 5\n        }\n    };\n\n    return await new Promise((resolve, reject) => {\n        dynamoDb.createTable(params, (error, data) => {\n            if (error) {\n                console.error(\"Unable to create table. Error JSON:\", JSON.stringify(error, null, 2));\n                reject(error);\n            } else {\n                console.log(\"Created table. Table description JSON:\", JSON.stringify(data, null, 2));\n                resolve(true);\n            }\n        });\n    });\n}\n\nasync function createAuthUsernameGSI() {\n    const params = {\n        TableName: AUTH_TABLE_NAME,\n        AttributeDefinitions: [\n            // This definition is for the new GSI's partition key.\n            {\n                AttributeName: 'username',\n                AttributeType: 'S' // N for Number\n            },\n            // Include any other attribute definitions for attributes used as keys in your GSI.\n        ],\n        GlobalSecondaryIndexUpdates: [\n            {\n                Create: {\n                    IndexName: GSI_USERNAME_NAME,\n                    KeySchema: [\n                        {\n                            AttributeName: 'username',\n                            KeyType: 'HASH' // Partition key for the GSI\n                        },\n                        // If you have a sort key for your GSI, add it here.\n                    ],\n                    Projection: {\n                        // Defines which attributes will be copied from the table to the index.\n                        ProjectionType: 'ALL' // Options are: 'ALL', 'KEYS_ONLY', 'INCLUDE'\n                    },\n                    ProvisionedThroughput: {\n                        // Set the read and write capacity for the GSI.\n                        ReadCapacityUnits: 5,\n                        WriteCapacityUnits: 5\n                    }\n                }\n            }\n        ]\n    };\n\n    return await new Promise((resolve, reject) => {\n        dynamoDb.updateTable(params, function (error, data) {\n            if (error) {\n                console.error('Unable to update table. Error JSON:', JSON.stringify(error, null, 2));\n                reject(error);\n            } else {\n                console.log('Updated table. Description JSON:', JSON.stringify(data, null, 2));\n                resolve(true);\n            }\n        });\n    });\n}\n\nasync function createAuthSessionTable() {\n    const params = {\n        TableName: AUTH_SESSION_TABLE_NAME,\n        KeySchema: [\n            { AttributeName: \"sessionId\", KeyType: \"HASH\" }, // Partition key\n        ],\n        AttributeDefinitions: [\n            { AttributeName: \"sessionId\", AttributeType: \"S\" },\n            //{ AttributeName: \"message\", AttributeType: \"S\" },\n            //{ AttributeName: \"evmWallet\", AttributeType: \"S\" },\n            //{ AttributeName: \"suiWallet\", AttributeType: \"S\" },\n            //{ AttributeName: \"success\", AttributeType: \"BOOL\" },\n        ],\n        ProvisionedThroughput: {\n            ReadCapacityUnits: 5,\n            WriteCapacityUnits: 5\n        }\n    };\n\n    return await new Promise((resolve, reject) => {\n        dynamoDb.createTable(params, (error, data) => {\n            if (error) {\n                console.error(\"Unable to create table. Error JSON:\", JSON.stringify(error, null, 2));\n                reject(error);\n            } else {\n                console.log(\"Created table. Table description JSON:\", JSON.stringify(data, null, 2));\n                resolve(true);\n            }\n        });\n    });\n}\n\nasync function deleteTable(tableName: string) {\n    const params = {\n        TableName: tableName\n    };\n\n    return new Promise((resolve, reject) => {\n        dynamoDb.deleteTable(params, (error, data) => {\n            if (error) {\n                console.error(\"Unable to delete table. Error JSON:\", JSON.stringify(error, null, 2));\n                resolve(error);\n            } else {\n                console.log(\"Deleted table. Table description JSON:\", JSON.stringify(data, null, 2));\n                resolve(true);\n            }\n        });\n    });\n}\n\nfunction createRandomAddress(len: number = 20): string {\n    const chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'a', 'b', 'c', 'd', 'e', 'f'];\n    let output = \"\";\n    for (let n = 0; n  0) {\n            throw Error(\"assertion failed\");\n        } else {\n            throw Error(\"assertion failed: \" + msg);\n        }\n    }\n}\n\nfunction unixDate() {\n    return Math.floor(Date.now() / 1000);\n}\n\nfunction readData() {\n    const scores = [];\n    const root = \"/home/acer/Desktop/blockchain/Soundbeats/api-server/data/\";\n    const files = fs.readdirSync(root);\n    for (let i = 0; i  0);\n        assert(keys.messageToSign.length > 0);\n\n        const session = await auth.getAuthSession(keys.sessionId);\n        assert(session != null);\n        assert(session.sessionId == keys.sessionId);\n        assert(session.message == keys.messageToSign);\n    }\n    \n    /*\n    {\n        const keypair = getRandomKeypair();\n        console.log(keypair);\n    }\n\n    //can register without extra data\n    {\n        const wallet = createRandomAddress();\n        const success = await auth.register(wallet, \"sui\", wallet); \n        assert(success);\n        const login = await auth.getAuthRecord(wallet, \"sui\"); \n        assert(login.authId == wallet);\n        assert(login.authType == \"sui\");\n        assert(!login.extraData);\n    }\n\n    //can register with extra data\n    {\n        const wallet = createRandomAddress();\n        const success = await auth.register(wallet, \"sui\", wallet, { username: \"username\"});\n        assert(success);\n        const login = await auth.getAuthRecord(wallet, \"sui\");\n        assert(login.authId == wallet);\n        assert(login.authType == \"sui\");\n        assert(login.extraData && login.extraData.username == \"username\");\n    } \n    \n    //can update auth record \n    {\n        const evmWallet = createRandomAddress();\n        const suiWallet1 = createRandomAddress(32);\n        const suiWallet2 = createRandomAddress(32);\n\n        const success = await auth.register(evmWallet, \"evm\", suiWallet1);\n        assert(success);\n        let login = await auth.getAuthRecord(evmWallet, \"evm\");\n        assert(login.authId == evmWallet);\n        assert(login.authType == \"evm\");\n        assert(login.suiWallet == suiWallet1);\n        \n        //update \n        await auth.updateAuthRecord(evmWallet, \"evm\", suiWallet2);\n        login = await auth.getAuthRecord(evmWallet, \"evm\");\n        assert(login.authId == evmWallet);\n        assert(login.authType == \"evm\");\n        assert(login.suiWallet == suiWallet2);\n    }\n\n    //can start and update auth session\n    {\n        const keys = await auth.startAuthSession(createRandomAddress());\n        assert(keys.sessionId.length > 0);\n        assert(keys.messageToSign.length > 0);\n\n        let session = await auth.getAuthSession(keys.sessionId);\n        assert(session != null);\n        assert(session.sessionId == keys.sessionId);\n        assert(session.message == keys.messageToSign);\n        assert(!session.success);\n        \n        const suiWallet = createRandomAddress(32);\n        const evmWallet = createRandomAddress(20);\n        session.success = true;\n        session.suiWallet = suiWallet;\n        session.evmWallet = evmWallet;\n        \n        //update\n        await auth.updateAuthSession(session.sessionId, session.evmWallet, session.suiWallet, true);\n        \n        session = await auth.getAuthSession(keys.sessionId);\n        assert(session != null);\n        assert(session.sessionId == keys.sessionId);\n        assert(session.message == keys.messageToSign);\n        assert(session.success);\n        assert(session.suiWallet == suiWallet);\n        assert(session.evmWallet == evmWallet);\n    }*/\n    \n    //create and later update auth account by verifying \n    {\n        //first, register a new account with EVM, by verifying \n        const service = new MockService();\n        const evmWallet: string = createRandomAddress(32);\n        const session1 = await auth.startAuthSession(evmWallet);\n        const signature1 = \"0x0\";\n        const output1 = await service.verifySignature2(session1.sessionId, 'evm', evmWallet, \"update\", signature1, session1.messageToSign); \n        assert(output1.success);\n        \n        //next, verify that account (again, by verifying) \n        const session2 = await auth.startAuthSession(evmWallet);\n        const signature2 = \"0x0\";\n        const output2 = await service.verifySignature2(session2.sessionId, 'evm', evmWallet, \"verify\", signature2, session2.messageToSign);\n        assert(output2.success);\n        \n        //finally, update the account associated to that auth, by verifying \n        const session3 = await auth.startAuthSession(evmWallet);\n        const signature3 = \"0x0\";\n        const suiWallet = createRandomAddress(32);\n        const output3a = await service.verifySignature2(session2.sessionId, 'evm', evmWallet, \"verify\", signature3, session3.messageToSign);\n        const output3b = await service.verifySignature2(session2.sessionId, 'sui', suiWallet, \"update\", signature3, session2.messageToSign);\n        assert(output3a.success);\n        assert(output3b.success);\n    }\n    \n    //attempt to verify with invalid session id \n    {\n    }\n}\n\nmain();\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RequestNFTResponseDto.html":{"url":"classes/RequestNFTResponseDto.html","title":"class - RequestNFTResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RequestNFTResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/req.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ResponseDtoBase\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                signature\n                            \n                            \n                                    \n                                network\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        signature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The signature of the transaction'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        network\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The current network (e.g. devnet)'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ResponseDtoBase\n\n                            \n                        \n                    \n                        \n                                Defined in         ResponseDtoBase:5\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass ResponseDtoBase {\n    @ApiProperty({ description: 'The current network (e.g. devnet)' })\n    network: string;\n}\n\nexport class MintBeatsNftDto {\n    @ApiProperty({ description: 'Name of the NFT' })\n    name: string;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'URL of the NFT image' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintBeatmapsNftDto {\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'Username of the beatmap creator' })\n    username: string;\n    @ApiProperty({ description: 'Song title or beatmap title' })\n    title: string;\n    @ApiProperty({ description: 'Song artist' })\n    artist: string;\n    @ApiProperty({ description: 'Beatmap json' })\n    beatmapJson: string;\n    @ApiProperty({ description: 'NFT image url' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintTokenDto {\n    @ApiProperty({ description: 'The amount of the token' })\n    amount: number;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n}\n\nexport class GetTokenBalanceDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class GetBeatsNftsDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class MintNftResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n    @ApiProperty({ description: 'The list of NFT addresses minted' })\n    addresses: string[];\n}\n\nexport class RequestNFTResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class MintTokenResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class GetTokenBalanceResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The balance of the wallet' })\n    balance: number;\n}\n\nexport class BeatsNftDto {\n    name: string;\n    url: string;\n}\n\nexport class BeatmapsNftDto {\n    username: string;\n    title: string;\n    artist: string;\n    beatmapJson: string;\n}\n\nexport class GetBeatsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The unique BEATS NFTs owned' })\n    nfts: BeatsNftDto[];\n}\n\nexport class GetBeatmapsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The BEATMAPS NFTs owned' })\n    nfts: BeatmapsNftDto[];\n}\n\nexport class VerifySignatureDto {\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'The expected signature' })\n    signature: string;\n    @ApiProperty({ description: 'The original message that was signed' })\n    message: string;\n}\n\nexport class VerifySignatureResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n}\n\n/// --- LEADERBOARD --- ///\n\nexport class GetLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The max number of records to include in the response' })\n    limit: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class LeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The total score of the users' })\n    score: number;\n    @ApiProperty({ description: 'The username of the user' })\n    username: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class GetLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of each user' })\n    scores: LeaderboardDto[];\n}\n\nexport class AddLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    authId: string;\n    @ApiProperty({ description: 'The auth type of the user login' })\n    authType: string;\n    @ApiProperty({ description: 'The score to add' })\n    score: number;\n    @ApiProperty({ description: 'The present username of the user being added' })\n    username: string;\n}\n\nexport class AddLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of the user' })\n    score: number;\n}\n\nexport class GetLeaderboardSprintDto {\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n    @ApiProperty({ description: 'Optional max number of records to return' })\n    limit: number;\n}\n\nexport class GetLeaderboardSprintResponseDto {\n    @ApiProperty({ description: 'Unique id of sprint' })\n    sprintId: string;\n    @ApiProperty({ description: 'Whether or not sprint is currently active' })\n    active: boolean;\n    @ApiProperty({ description: 'Sprint start date' })\n    startDate: number;\n    @ApiProperty({ description: 'Sprint end date' })\n    endDate: number;\n}\n\n/// --- AUTH --- ///\n\nexport class CheckUsernameDto {\n    @ApiProperty({ description: 'Username to check' })\n    username: string;\n}\n\nexport class CheckUsernameResponseDto {\n    @ApiProperty({ description: 'Username exists or not' })\n    exists: boolean;\n}\n\n//TODO: need this?\nexport class GetAccountDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n}\n\nexport class GetAccountResponseDto {\n    @ApiProperty({ description: 'SUI wallet address' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Account unique username' })\n    username: string;\n    @ApiProperty({ description: 'Player level' })\n    level: number;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class StartAuthSessionDto {\n    @ApiProperty({ description: 'EVM wallet address' })\n    evmWallet: string;\n}\n\nexport class StartAuthSessionResponseDto {\n    @ApiProperty({ description: 'The unique id of the created session' })\n    sessionId: string;\n    @ApiProperty({ description: 'A message for the client to sign as a challenge' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The username of the specified account, if it exists' })\n    username: string;\n}\n\nexport class AuthVerifyDto {\n    @ApiProperty({ description: 'Wallet address' })\n    wallet: string;\n    @ApiProperty({ description: 'Wallet type can be evm or sui' })\n    walletType: 'sui' | 'evm';\n    @ApiProperty({ description: 'The action being taken; verify signature, or update account' })\n    action: 'verify' | 'update';\n    @ApiProperty({ description: 'The unique id of this session' })\n    sessionId: string;\n    @ApiProperty({ description: 'The message that was signed by the client' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The message signature as signed by caller' })\n    signature: string;\n    @ApiProperty({ description: 'A unique user-chosen username' })\n    username: string;\n}\n\nexport class AuthVerifyResponseDto {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    wallet: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n    @ApiProperty({ description: 'Sui wallet address (if any)' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Username of user' })\n    username: string;\n}\n\nexport class UpdateUserLevelDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n    @ApiProperty({ description: 'Level of player' })\n    level: number;\n}\n\nexport class UpdateUserOAuthDto {\n    @ApiProperty({ description: 'Sui wallet address' })\n    suiAddress: string;\n    @ApiProperty({ description: 'Token from OAuth login' })\n    oauthToken: string;\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n    @ApiProperty({ description: 'Normally, the email' })\n    username: string;\n}\n\nexport class UpdateUserOAuthResponseDto {\n    @ApiProperty({ description: '' })\n    authId: string;\n    @ApiProperty({ description: '' })\n    username: string;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class GetUserOAuthDto {\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n}\n\nexport class GetUserOAuthResponseDto extends GetAccountResponseDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResponseDtoBase.html":{"url":"classes/ResponseDtoBase.html","title":"class - ResponseDtoBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResponseDtoBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/req.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                network\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        network\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The current network (e.g. devnet)'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass ResponseDtoBase {\n    @ApiProperty({ description: 'The current network (e.g. devnet)' })\n    network: string;\n}\n\nexport class MintBeatsNftDto {\n    @ApiProperty({ description: 'Name of the NFT' })\n    name: string;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'URL of the NFT image' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintBeatmapsNftDto {\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'Username of the beatmap creator' })\n    username: string;\n    @ApiProperty({ description: 'Song title or beatmap title' })\n    title: string;\n    @ApiProperty({ description: 'Song artist' })\n    artist: string;\n    @ApiProperty({ description: 'Beatmap json' })\n    beatmapJson: string;\n    @ApiProperty({ description: 'NFT image url' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintTokenDto {\n    @ApiProperty({ description: 'The amount of the token' })\n    amount: number;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n}\n\nexport class GetTokenBalanceDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class GetBeatsNftsDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class MintNftResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n    @ApiProperty({ description: 'The list of NFT addresses minted' })\n    addresses: string[];\n}\n\nexport class RequestNFTResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class MintTokenResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class GetTokenBalanceResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The balance of the wallet' })\n    balance: number;\n}\n\nexport class BeatsNftDto {\n    name: string;\n    url: string;\n}\n\nexport class BeatmapsNftDto {\n    username: string;\n    title: string;\n    artist: string;\n    beatmapJson: string;\n}\n\nexport class GetBeatsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The unique BEATS NFTs owned' })\n    nfts: BeatsNftDto[];\n}\n\nexport class GetBeatmapsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The BEATMAPS NFTs owned' })\n    nfts: BeatmapsNftDto[];\n}\n\nexport class VerifySignatureDto {\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'The expected signature' })\n    signature: string;\n    @ApiProperty({ description: 'The original message that was signed' })\n    message: string;\n}\n\nexport class VerifySignatureResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n}\n\n/// --- LEADERBOARD --- ///\n\nexport class GetLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The max number of records to include in the response' })\n    limit: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class LeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The total score of the users' })\n    score: number;\n    @ApiProperty({ description: 'The username of the user' })\n    username: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class GetLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of each user' })\n    scores: LeaderboardDto[];\n}\n\nexport class AddLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    authId: string;\n    @ApiProperty({ description: 'The auth type of the user login' })\n    authType: string;\n    @ApiProperty({ description: 'The score to add' })\n    score: number;\n    @ApiProperty({ description: 'The present username of the user being added' })\n    username: string;\n}\n\nexport class AddLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of the user' })\n    score: number;\n}\n\nexport class GetLeaderboardSprintDto {\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n    @ApiProperty({ description: 'Optional max number of records to return' })\n    limit: number;\n}\n\nexport class GetLeaderboardSprintResponseDto {\n    @ApiProperty({ description: 'Unique id of sprint' })\n    sprintId: string;\n    @ApiProperty({ description: 'Whether or not sprint is currently active' })\n    active: boolean;\n    @ApiProperty({ description: 'Sprint start date' })\n    startDate: number;\n    @ApiProperty({ description: 'Sprint end date' })\n    endDate: number;\n}\n\n/// --- AUTH --- ///\n\nexport class CheckUsernameDto {\n    @ApiProperty({ description: 'Username to check' })\n    username: string;\n}\n\nexport class CheckUsernameResponseDto {\n    @ApiProperty({ description: 'Username exists or not' })\n    exists: boolean;\n}\n\n//TODO: need this?\nexport class GetAccountDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n}\n\nexport class GetAccountResponseDto {\n    @ApiProperty({ description: 'SUI wallet address' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Account unique username' })\n    username: string;\n    @ApiProperty({ description: 'Player level' })\n    level: number;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class StartAuthSessionDto {\n    @ApiProperty({ description: 'EVM wallet address' })\n    evmWallet: string;\n}\n\nexport class StartAuthSessionResponseDto {\n    @ApiProperty({ description: 'The unique id of the created session' })\n    sessionId: string;\n    @ApiProperty({ description: 'A message for the client to sign as a challenge' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The username of the specified account, if it exists' })\n    username: string;\n}\n\nexport class AuthVerifyDto {\n    @ApiProperty({ description: 'Wallet address' })\n    wallet: string;\n    @ApiProperty({ description: 'Wallet type can be evm or sui' })\n    walletType: 'sui' | 'evm';\n    @ApiProperty({ description: 'The action being taken; verify signature, or update account' })\n    action: 'verify' | 'update';\n    @ApiProperty({ description: 'The unique id of this session' })\n    sessionId: string;\n    @ApiProperty({ description: 'The message that was signed by the client' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The message signature as signed by caller' })\n    signature: string;\n    @ApiProperty({ description: 'A unique user-chosen username' })\n    username: string;\n}\n\nexport class AuthVerifyResponseDto {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    wallet: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n    @ApiProperty({ description: 'Sui wallet address (if any)' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Username of user' })\n    username: string;\n}\n\nexport class UpdateUserLevelDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n    @ApiProperty({ description: 'Level of player' })\n    level: number;\n}\n\nexport class UpdateUserOAuthDto {\n    @ApiProperty({ description: 'Sui wallet address' })\n    suiAddress: string;\n    @ApiProperty({ description: 'Token from OAuth login' })\n    oauthToken: string;\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n    @ApiProperty({ description: 'Normally, the email' })\n    username: string;\n}\n\nexport class UpdateUserOAuthResponseDto {\n    @ApiProperty({ description: '' })\n    authId: string;\n    @ApiProperty({ description: '' })\n    username: string;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class GetUserOAuthDto {\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n}\n\nexport class GetUserOAuthResponseDto extends GetAccountResponseDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StartAuthSessionDto.html":{"url":"classes/StartAuthSessionDto.html","title":"class - StartAuthSessionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StartAuthSessionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/req.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                evmWallet\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        evmWallet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'EVM wallet address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:209\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass ResponseDtoBase {\n    @ApiProperty({ description: 'The current network (e.g. devnet)' })\n    network: string;\n}\n\nexport class MintBeatsNftDto {\n    @ApiProperty({ description: 'Name of the NFT' })\n    name: string;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'URL of the NFT image' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintBeatmapsNftDto {\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'Username of the beatmap creator' })\n    username: string;\n    @ApiProperty({ description: 'Song title or beatmap title' })\n    title: string;\n    @ApiProperty({ description: 'Song artist' })\n    artist: string;\n    @ApiProperty({ description: 'Beatmap json' })\n    beatmapJson: string;\n    @ApiProperty({ description: 'NFT image url' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintTokenDto {\n    @ApiProperty({ description: 'The amount of the token' })\n    amount: number;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n}\n\nexport class GetTokenBalanceDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class GetBeatsNftsDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class MintNftResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n    @ApiProperty({ description: 'The list of NFT addresses minted' })\n    addresses: string[];\n}\n\nexport class RequestNFTResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class MintTokenResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class GetTokenBalanceResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The balance of the wallet' })\n    balance: number;\n}\n\nexport class BeatsNftDto {\n    name: string;\n    url: string;\n}\n\nexport class BeatmapsNftDto {\n    username: string;\n    title: string;\n    artist: string;\n    beatmapJson: string;\n}\n\nexport class GetBeatsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The unique BEATS NFTs owned' })\n    nfts: BeatsNftDto[];\n}\n\nexport class GetBeatmapsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The BEATMAPS NFTs owned' })\n    nfts: BeatmapsNftDto[];\n}\n\nexport class VerifySignatureDto {\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'The expected signature' })\n    signature: string;\n    @ApiProperty({ description: 'The original message that was signed' })\n    message: string;\n}\n\nexport class VerifySignatureResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n}\n\n/// --- LEADERBOARD --- ///\n\nexport class GetLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The max number of records to include in the response' })\n    limit: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class LeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The total score of the users' })\n    score: number;\n    @ApiProperty({ description: 'The username of the user' })\n    username: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class GetLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of each user' })\n    scores: LeaderboardDto[];\n}\n\nexport class AddLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    authId: string;\n    @ApiProperty({ description: 'The auth type of the user login' })\n    authType: string;\n    @ApiProperty({ description: 'The score to add' })\n    score: number;\n    @ApiProperty({ description: 'The present username of the user being added' })\n    username: string;\n}\n\nexport class AddLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of the user' })\n    score: number;\n}\n\nexport class GetLeaderboardSprintDto {\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n    @ApiProperty({ description: 'Optional max number of records to return' })\n    limit: number;\n}\n\nexport class GetLeaderboardSprintResponseDto {\n    @ApiProperty({ description: 'Unique id of sprint' })\n    sprintId: string;\n    @ApiProperty({ description: 'Whether or not sprint is currently active' })\n    active: boolean;\n    @ApiProperty({ description: 'Sprint start date' })\n    startDate: number;\n    @ApiProperty({ description: 'Sprint end date' })\n    endDate: number;\n}\n\n/// --- AUTH --- ///\n\nexport class CheckUsernameDto {\n    @ApiProperty({ description: 'Username to check' })\n    username: string;\n}\n\nexport class CheckUsernameResponseDto {\n    @ApiProperty({ description: 'Username exists or not' })\n    exists: boolean;\n}\n\n//TODO: need this?\nexport class GetAccountDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n}\n\nexport class GetAccountResponseDto {\n    @ApiProperty({ description: 'SUI wallet address' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Account unique username' })\n    username: string;\n    @ApiProperty({ description: 'Player level' })\n    level: number;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class StartAuthSessionDto {\n    @ApiProperty({ description: 'EVM wallet address' })\n    evmWallet: string;\n}\n\nexport class StartAuthSessionResponseDto {\n    @ApiProperty({ description: 'The unique id of the created session' })\n    sessionId: string;\n    @ApiProperty({ description: 'A message for the client to sign as a challenge' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The username of the specified account, if it exists' })\n    username: string;\n}\n\nexport class AuthVerifyDto {\n    @ApiProperty({ description: 'Wallet address' })\n    wallet: string;\n    @ApiProperty({ description: 'Wallet type can be evm or sui' })\n    walletType: 'sui' | 'evm';\n    @ApiProperty({ description: 'The action being taken; verify signature, or update account' })\n    action: 'verify' | 'update';\n    @ApiProperty({ description: 'The unique id of this session' })\n    sessionId: string;\n    @ApiProperty({ description: 'The message that was signed by the client' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The message signature as signed by caller' })\n    signature: string;\n    @ApiProperty({ description: 'A unique user-chosen username' })\n    username: string;\n}\n\nexport class AuthVerifyResponseDto {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    wallet: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n    @ApiProperty({ description: 'Sui wallet address (if any)' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Username of user' })\n    username: string;\n}\n\nexport class UpdateUserLevelDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n    @ApiProperty({ description: 'Level of player' })\n    level: number;\n}\n\nexport class UpdateUserOAuthDto {\n    @ApiProperty({ description: 'Sui wallet address' })\n    suiAddress: string;\n    @ApiProperty({ description: 'Token from OAuth login' })\n    oauthToken: string;\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n    @ApiProperty({ description: 'Normally, the email' })\n    username: string;\n}\n\nexport class UpdateUserOAuthResponseDto {\n    @ApiProperty({ description: '' })\n    authId: string;\n    @ApiProperty({ description: '' })\n    username: string;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class GetUserOAuthDto {\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n}\n\nexport class GetUserOAuthResponseDto extends GetAccountResponseDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StartAuthSessionResponseDto.html":{"url":"classes/StartAuthSessionResponseDto.html","title":"class - StartAuthSessionResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StartAuthSessionResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/req.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                messageToSign\n                            \n                            \n                                    \n                                sessionId\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        messageToSign\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'A message for the client to sign as a challenge'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:216\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sessionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The unique id of the created session'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:214\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The username of the specified account, if it exists'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:218\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass ResponseDtoBase {\n    @ApiProperty({ description: 'The current network (e.g. devnet)' })\n    network: string;\n}\n\nexport class MintBeatsNftDto {\n    @ApiProperty({ description: 'Name of the NFT' })\n    name: string;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'URL of the NFT image' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintBeatmapsNftDto {\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'Username of the beatmap creator' })\n    username: string;\n    @ApiProperty({ description: 'Song title or beatmap title' })\n    title: string;\n    @ApiProperty({ description: 'Song artist' })\n    artist: string;\n    @ApiProperty({ description: 'Beatmap json' })\n    beatmapJson: string;\n    @ApiProperty({ description: 'NFT image url' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintTokenDto {\n    @ApiProperty({ description: 'The amount of the token' })\n    amount: number;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n}\n\nexport class GetTokenBalanceDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class GetBeatsNftsDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class MintNftResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n    @ApiProperty({ description: 'The list of NFT addresses minted' })\n    addresses: string[];\n}\n\nexport class RequestNFTResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class MintTokenResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class GetTokenBalanceResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The balance of the wallet' })\n    balance: number;\n}\n\nexport class BeatsNftDto {\n    name: string;\n    url: string;\n}\n\nexport class BeatmapsNftDto {\n    username: string;\n    title: string;\n    artist: string;\n    beatmapJson: string;\n}\n\nexport class GetBeatsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The unique BEATS NFTs owned' })\n    nfts: BeatsNftDto[];\n}\n\nexport class GetBeatmapsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The BEATMAPS NFTs owned' })\n    nfts: BeatmapsNftDto[];\n}\n\nexport class VerifySignatureDto {\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'The expected signature' })\n    signature: string;\n    @ApiProperty({ description: 'The original message that was signed' })\n    message: string;\n}\n\nexport class VerifySignatureResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n}\n\n/// --- LEADERBOARD --- ///\n\nexport class GetLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The max number of records to include in the response' })\n    limit: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class LeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The total score of the users' })\n    score: number;\n    @ApiProperty({ description: 'The username of the user' })\n    username: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class GetLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of each user' })\n    scores: LeaderboardDto[];\n}\n\nexport class AddLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    authId: string;\n    @ApiProperty({ description: 'The auth type of the user login' })\n    authType: string;\n    @ApiProperty({ description: 'The score to add' })\n    score: number;\n    @ApiProperty({ description: 'The present username of the user being added' })\n    username: string;\n}\n\nexport class AddLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of the user' })\n    score: number;\n}\n\nexport class GetLeaderboardSprintDto {\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n    @ApiProperty({ description: 'Optional max number of records to return' })\n    limit: number;\n}\n\nexport class GetLeaderboardSprintResponseDto {\n    @ApiProperty({ description: 'Unique id of sprint' })\n    sprintId: string;\n    @ApiProperty({ description: 'Whether or not sprint is currently active' })\n    active: boolean;\n    @ApiProperty({ description: 'Sprint start date' })\n    startDate: number;\n    @ApiProperty({ description: 'Sprint end date' })\n    endDate: number;\n}\n\n/// --- AUTH --- ///\n\nexport class CheckUsernameDto {\n    @ApiProperty({ description: 'Username to check' })\n    username: string;\n}\n\nexport class CheckUsernameResponseDto {\n    @ApiProperty({ description: 'Username exists or not' })\n    exists: boolean;\n}\n\n//TODO: need this?\nexport class GetAccountDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n}\n\nexport class GetAccountResponseDto {\n    @ApiProperty({ description: 'SUI wallet address' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Account unique username' })\n    username: string;\n    @ApiProperty({ description: 'Player level' })\n    level: number;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class StartAuthSessionDto {\n    @ApiProperty({ description: 'EVM wallet address' })\n    evmWallet: string;\n}\n\nexport class StartAuthSessionResponseDto {\n    @ApiProperty({ description: 'The unique id of the created session' })\n    sessionId: string;\n    @ApiProperty({ description: 'A message for the client to sign as a challenge' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The username of the specified account, if it exists' })\n    username: string;\n}\n\nexport class AuthVerifyDto {\n    @ApiProperty({ description: 'Wallet address' })\n    wallet: string;\n    @ApiProperty({ description: 'Wallet type can be evm or sui' })\n    walletType: 'sui' | 'evm';\n    @ApiProperty({ description: 'The action being taken; verify signature, or update account' })\n    action: 'verify' | 'update';\n    @ApiProperty({ description: 'The unique id of this session' })\n    sessionId: string;\n    @ApiProperty({ description: 'The message that was signed by the client' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The message signature as signed by caller' })\n    signature: string;\n    @ApiProperty({ description: 'A unique user-chosen username' })\n    username: string;\n}\n\nexport class AuthVerifyResponseDto {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    wallet: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n    @ApiProperty({ description: 'Sui wallet address (if any)' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Username of user' })\n    username: string;\n}\n\nexport class UpdateUserLevelDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n    @ApiProperty({ description: 'Level of player' })\n    level: number;\n}\n\nexport class UpdateUserOAuthDto {\n    @ApiProperty({ description: 'Sui wallet address' })\n    suiAddress: string;\n    @ApiProperty({ description: 'Token from OAuth login' })\n    oauthToken: string;\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n    @ApiProperty({ description: 'Normally, the email' })\n    username: string;\n}\n\nexport class UpdateUserOAuthResponseDto {\n    @ApiProperty({ description: '' })\n    authId: string;\n    @ApiProperty({ description: '' })\n    username: string;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class GetUserOAuthDto {\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n}\n\nexport class GetUserOAuthResponseDto extends GetAccountResponseDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserLevelDto.html":{"url":"classes/UpdateUserLevelDto.html","title":"class - UpdateUserLevelDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserLevelDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/req.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authId\n                            \n                            \n                                    \n                                authType\n                            \n                            \n                                    \n                                level\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Auth ID, e.g. EVM wallet address or username'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:253\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authType\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"evm\" | \"sui\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Auth type, e.g. \"evm\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:255\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        level\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Level of player'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:257\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass ResponseDtoBase {\n    @ApiProperty({ description: 'The current network (e.g. devnet)' })\n    network: string;\n}\n\nexport class MintBeatsNftDto {\n    @ApiProperty({ description: 'Name of the NFT' })\n    name: string;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'URL of the NFT image' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintBeatmapsNftDto {\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'Username of the beatmap creator' })\n    username: string;\n    @ApiProperty({ description: 'Song title or beatmap title' })\n    title: string;\n    @ApiProperty({ description: 'Song artist' })\n    artist: string;\n    @ApiProperty({ description: 'Beatmap json' })\n    beatmapJson: string;\n    @ApiProperty({ description: 'NFT image url' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintTokenDto {\n    @ApiProperty({ description: 'The amount of the token' })\n    amount: number;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n}\n\nexport class GetTokenBalanceDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class GetBeatsNftsDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class MintNftResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n    @ApiProperty({ description: 'The list of NFT addresses minted' })\n    addresses: string[];\n}\n\nexport class RequestNFTResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class MintTokenResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class GetTokenBalanceResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The balance of the wallet' })\n    balance: number;\n}\n\nexport class BeatsNftDto {\n    name: string;\n    url: string;\n}\n\nexport class BeatmapsNftDto {\n    username: string;\n    title: string;\n    artist: string;\n    beatmapJson: string;\n}\n\nexport class GetBeatsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The unique BEATS NFTs owned' })\n    nfts: BeatsNftDto[];\n}\n\nexport class GetBeatmapsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The BEATMAPS NFTs owned' })\n    nfts: BeatmapsNftDto[];\n}\n\nexport class VerifySignatureDto {\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'The expected signature' })\n    signature: string;\n    @ApiProperty({ description: 'The original message that was signed' })\n    message: string;\n}\n\nexport class VerifySignatureResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n}\n\n/// --- LEADERBOARD --- ///\n\nexport class GetLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The max number of records to include in the response' })\n    limit: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class LeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The total score of the users' })\n    score: number;\n    @ApiProperty({ description: 'The username of the user' })\n    username: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class GetLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of each user' })\n    scores: LeaderboardDto[];\n}\n\nexport class AddLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    authId: string;\n    @ApiProperty({ description: 'The auth type of the user login' })\n    authType: string;\n    @ApiProperty({ description: 'The score to add' })\n    score: number;\n    @ApiProperty({ description: 'The present username of the user being added' })\n    username: string;\n}\n\nexport class AddLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of the user' })\n    score: number;\n}\n\nexport class GetLeaderboardSprintDto {\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n    @ApiProperty({ description: 'Optional max number of records to return' })\n    limit: number;\n}\n\nexport class GetLeaderboardSprintResponseDto {\n    @ApiProperty({ description: 'Unique id of sprint' })\n    sprintId: string;\n    @ApiProperty({ description: 'Whether or not sprint is currently active' })\n    active: boolean;\n    @ApiProperty({ description: 'Sprint start date' })\n    startDate: number;\n    @ApiProperty({ description: 'Sprint end date' })\n    endDate: number;\n}\n\n/// --- AUTH --- ///\n\nexport class CheckUsernameDto {\n    @ApiProperty({ description: 'Username to check' })\n    username: string;\n}\n\nexport class CheckUsernameResponseDto {\n    @ApiProperty({ description: 'Username exists or not' })\n    exists: boolean;\n}\n\n//TODO: need this?\nexport class GetAccountDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n}\n\nexport class GetAccountResponseDto {\n    @ApiProperty({ description: 'SUI wallet address' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Account unique username' })\n    username: string;\n    @ApiProperty({ description: 'Player level' })\n    level: number;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class StartAuthSessionDto {\n    @ApiProperty({ description: 'EVM wallet address' })\n    evmWallet: string;\n}\n\nexport class StartAuthSessionResponseDto {\n    @ApiProperty({ description: 'The unique id of the created session' })\n    sessionId: string;\n    @ApiProperty({ description: 'A message for the client to sign as a challenge' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The username of the specified account, if it exists' })\n    username: string;\n}\n\nexport class AuthVerifyDto {\n    @ApiProperty({ description: 'Wallet address' })\n    wallet: string;\n    @ApiProperty({ description: 'Wallet type can be evm or sui' })\n    walletType: 'sui' | 'evm';\n    @ApiProperty({ description: 'The action being taken; verify signature, or update account' })\n    action: 'verify' | 'update';\n    @ApiProperty({ description: 'The unique id of this session' })\n    sessionId: string;\n    @ApiProperty({ description: 'The message that was signed by the client' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The message signature as signed by caller' })\n    signature: string;\n    @ApiProperty({ description: 'A unique user-chosen username' })\n    username: string;\n}\n\nexport class AuthVerifyResponseDto {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    wallet: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n    @ApiProperty({ description: 'Sui wallet address (if any)' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Username of user' })\n    username: string;\n}\n\nexport class UpdateUserLevelDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n    @ApiProperty({ description: 'Level of player' })\n    level: number;\n}\n\nexport class UpdateUserOAuthDto {\n    @ApiProperty({ description: 'Sui wallet address' })\n    suiAddress: string;\n    @ApiProperty({ description: 'Token from OAuth login' })\n    oauthToken: string;\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n    @ApiProperty({ description: 'Normally, the email' })\n    username: string;\n}\n\nexport class UpdateUserOAuthResponseDto {\n    @ApiProperty({ description: '' })\n    authId: string;\n    @ApiProperty({ description: '' })\n    username: string;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class GetUserOAuthDto {\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n}\n\nexport class GetUserOAuthResponseDto extends GetAccountResponseDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserOAuthDto.html":{"url":"classes/UpdateUserOAuthDto.html","title":"class - UpdateUserOAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserOAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/req.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                nonceToken\n                            \n                            \n                                    \n                                oauthToken\n                            \n                            \n                                    \n                                suiAddress\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        nonceToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'A secret number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:266\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        oauthToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Token from OAuth login'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:264\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        suiAddress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Sui wallet address'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:262\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Normally, the email'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:268\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass ResponseDtoBase {\n    @ApiProperty({ description: 'The current network (e.g. devnet)' })\n    network: string;\n}\n\nexport class MintBeatsNftDto {\n    @ApiProperty({ description: 'Name of the NFT' })\n    name: string;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'URL of the NFT image' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintBeatmapsNftDto {\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'Username of the beatmap creator' })\n    username: string;\n    @ApiProperty({ description: 'Song title or beatmap title' })\n    title: string;\n    @ApiProperty({ description: 'Song artist' })\n    artist: string;\n    @ApiProperty({ description: 'Beatmap json' })\n    beatmapJson: string;\n    @ApiProperty({ description: 'NFT image url' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintTokenDto {\n    @ApiProperty({ description: 'The amount of the token' })\n    amount: number;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n}\n\nexport class GetTokenBalanceDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class GetBeatsNftsDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class MintNftResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n    @ApiProperty({ description: 'The list of NFT addresses minted' })\n    addresses: string[];\n}\n\nexport class RequestNFTResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class MintTokenResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class GetTokenBalanceResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The balance of the wallet' })\n    balance: number;\n}\n\nexport class BeatsNftDto {\n    name: string;\n    url: string;\n}\n\nexport class BeatmapsNftDto {\n    username: string;\n    title: string;\n    artist: string;\n    beatmapJson: string;\n}\n\nexport class GetBeatsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The unique BEATS NFTs owned' })\n    nfts: BeatsNftDto[];\n}\n\nexport class GetBeatmapsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The BEATMAPS NFTs owned' })\n    nfts: BeatmapsNftDto[];\n}\n\nexport class VerifySignatureDto {\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'The expected signature' })\n    signature: string;\n    @ApiProperty({ description: 'The original message that was signed' })\n    message: string;\n}\n\nexport class VerifySignatureResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n}\n\n/// --- LEADERBOARD --- ///\n\nexport class GetLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The max number of records to include in the response' })\n    limit: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class LeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The total score of the users' })\n    score: number;\n    @ApiProperty({ description: 'The username of the user' })\n    username: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class GetLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of each user' })\n    scores: LeaderboardDto[];\n}\n\nexport class AddLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    authId: string;\n    @ApiProperty({ description: 'The auth type of the user login' })\n    authType: string;\n    @ApiProperty({ description: 'The score to add' })\n    score: number;\n    @ApiProperty({ description: 'The present username of the user being added' })\n    username: string;\n}\n\nexport class AddLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of the user' })\n    score: number;\n}\n\nexport class GetLeaderboardSprintDto {\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n    @ApiProperty({ description: 'Optional max number of records to return' })\n    limit: number;\n}\n\nexport class GetLeaderboardSprintResponseDto {\n    @ApiProperty({ description: 'Unique id of sprint' })\n    sprintId: string;\n    @ApiProperty({ description: 'Whether or not sprint is currently active' })\n    active: boolean;\n    @ApiProperty({ description: 'Sprint start date' })\n    startDate: number;\n    @ApiProperty({ description: 'Sprint end date' })\n    endDate: number;\n}\n\n/// --- AUTH --- ///\n\nexport class CheckUsernameDto {\n    @ApiProperty({ description: 'Username to check' })\n    username: string;\n}\n\nexport class CheckUsernameResponseDto {\n    @ApiProperty({ description: 'Username exists or not' })\n    exists: boolean;\n}\n\n//TODO: need this?\nexport class GetAccountDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n}\n\nexport class GetAccountResponseDto {\n    @ApiProperty({ description: 'SUI wallet address' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Account unique username' })\n    username: string;\n    @ApiProperty({ description: 'Player level' })\n    level: number;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class StartAuthSessionDto {\n    @ApiProperty({ description: 'EVM wallet address' })\n    evmWallet: string;\n}\n\nexport class StartAuthSessionResponseDto {\n    @ApiProperty({ description: 'The unique id of the created session' })\n    sessionId: string;\n    @ApiProperty({ description: 'A message for the client to sign as a challenge' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The username of the specified account, if it exists' })\n    username: string;\n}\n\nexport class AuthVerifyDto {\n    @ApiProperty({ description: 'Wallet address' })\n    wallet: string;\n    @ApiProperty({ description: 'Wallet type can be evm or sui' })\n    walletType: 'sui' | 'evm';\n    @ApiProperty({ description: 'The action being taken; verify signature, or update account' })\n    action: 'verify' | 'update';\n    @ApiProperty({ description: 'The unique id of this session' })\n    sessionId: string;\n    @ApiProperty({ description: 'The message that was signed by the client' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The message signature as signed by caller' })\n    signature: string;\n    @ApiProperty({ description: 'A unique user-chosen username' })\n    username: string;\n}\n\nexport class AuthVerifyResponseDto {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    wallet: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n    @ApiProperty({ description: 'Sui wallet address (if any)' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Username of user' })\n    username: string;\n}\n\nexport class UpdateUserLevelDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n    @ApiProperty({ description: 'Level of player' })\n    level: number;\n}\n\nexport class UpdateUserOAuthDto {\n    @ApiProperty({ description: 'Sui wallet address' })\n    suiAddress: string;\n    @ApiProperty({ description: 'Token from OAuth login' })\n    oauthToken: string;\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n    @ApiProperty({ description: 'Normally, the email' })\n    username: string;\n}\n\nexport class UpdateUserOAuthResponseDto {\n    @ApiProperty({ description: '' })\n    authId: string;\n    @ApiProperty({ description: '' })\n    username: string;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class GetUserOAuthDto {\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n}\n\nexport class GetUserOAuthResponseDto extends GetAccountResponseDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserOAuthResponseDto.html":{"url":"classes/UpdateUserOAuthResponseDto.html","title":"class - UpdateUserOAuthResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserOAuthResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/req.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authId\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:273\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Success or failure of the operation'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:277\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: ''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:275\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass ResponseDtoBase {\n    @ApiProperty({ description: 'The current network (e.g. devnet)' })\n    network: string;\n}\n\nexport class MintBeatsNftDto {\n    @ApiProperty({ description: 'Name of the NFT' })\n    name: string;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'URL of the NFT image' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintBeatmapsNftDto {\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'Username of the beatmap creator' })\n    username: string;\n    @ApiProperty({ description: 'Song title or beatmap title' })\n    title: string;\n    @ApiProperty({ description: 'Song artist' })\n    artist: string;\n    @ApiProperty({ description: 'Beatmap json' })\n    beatmapJson: string;\n    @ApiProperty({ description: 'NFT image url' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintTokenDto {\n    @ApiProperty({ description: 'The amount of the token' })\n    amount: number;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n}\n\nexport class GetTokenBalanceDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class GetBeatsNftsDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class MintNftResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n    @ApiProperty({ description: 'The list of NFT addresses minted' })\n    addresses: string[];\n}\n\nexport class RequestNFTResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class MintTokenResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class GetTokenBalanceResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The balance of the wallet' })\n    balance: number;\n}\n\nexport class BeatsNftDto {\n    name: string;\n    url: string;\n}\n\nexport class BeatmapsNftDto {\n    username: string;\n    title: string;\n    artist: string;\n    beatmapJson: string;\n}\n\nexport class GetBeatsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The unique BEATS NFTs owned' })\n    nfts: BeatsNftDto[];\n}\n\nexport class GetBeatmapsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The BEATMAPS NFTs owned' })\n    nfts: BeatmapsNftDto[];\n}\n\nexport class VerifySignatureDto {\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'The expected signature' })\n    signature: string;\n    @ApiProperty({ description: 'The original message that was signed' })\n    message: string;\n}\n\nexport class VerifySignatureResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n}\n\n/// --- LEADERBOARD --- ///\n\nexport class GetLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The max number of records to include in the response' })\n    limit: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class LeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The total score of the users' })\n    score: number;\n    @ApiProperty({ description: 'The username of the user' })\n    username: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class GetLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of each user' })\n    scores: LeaderboardDto[];\n}\n\nexport class AddLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    authId: string;\n    @ApiProperty({ description: 'The auth type of the user login' })\n    authType: string;\n    @ApiProperty({ description: 'The score to add' })\n    score: number;\n    @ApiProperty({ description: 'The present username of the user being added' })\n    username: string;\n}\n\nexport class AddLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of the user' })\n    score: number;\n}\n\nexport class GetLeaderboardSprintDto {\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n    @ApiProperty({ description: 'Optional max number of records to return' })\n    limit: number;\n}\n\nexport class GetLeaderboardSprintResponseDto {\n    @ApiProperty({ description: 'Unique id of sprint' })\n    sprintId: string;\n    @ApiProperty({ description: 'Whether or not sprint is currently active' })\n    active: boolean;\n    @ApiProperty({ description: 'Sprint start date' })\n    startDate: number;\n    @ApiProperty({ description: 'Sprint end date' })\n    endDate: number;\n}\n\n/// --- AUTH --- ///\n\nexport class CheckUsernameDto {\n    @ApiProperty({ description: 'Username to check' })\n    username: string;\n}\n\nexport class CheckUsernameResponseDto {\n    @ApiProperty({ description: 'Username exists or not' })\n    exists: boolean;\n}\n\n//TODO: need this?\nexport class GetAccountDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n}\n\nexport class GetAccountResponseDto {\n    @ApiProperty({ description: 'SUI wallet address' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Account unique username' })\n    username: string;\n    @ApiProperty({ description: 'Player level' })\n    level: number;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class StartAuthSessionDto {\n    @ApiProperty({ description: 'EVM wallet address' })\n    evmWallet: string;\n}\n\nexport class StartAuthSessionResponseDto {\n    @ApiProperty({ description: 'The unique id of the created session' })\n    sessionId: string;\n    @ApiProperty({ description: 'A message for the client to sign as a challenge' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The username of the specified account, if it exists' })\n    username: string;\n}\n\nexport class AuthVerifyDto {\n    @ApiProperty({ description: 'Wallet address' })\n    wallet: string;\n    @ApiProperty({ description: 'Wallet type can be evm or sui' })\n    walletType: 'sui' | 'evm';\n    @ApiProperty({ description: 'The action being taken; verify signature, or update account' })\n    action: 'verify' | 'update';\n    @ApiProperty({ description: 'The unique id of this session' })\n    sessionId: string;\n    @ApiProperty({ description: 'The message that was signed by the client' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The message signature as signed by caller' })\n    signature: string;\n    @ApiProperty({ description: 'A unique user-chosen username' })\n    username: string;\n}\n\nexport class AuthVerifyResponseDto {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    wallet: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n    @ApiProperty({ description: 'Sui wallet address (if any)' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Username of user' })\n    username: string;\n}\n\nexport class UpdateUserLevelDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n    @ApiProperty({ description: 'Level of player' })\n    level: number;\n}\n\nexport class UpdateUserOAuthDto {\n    @ApiProperty({ description: 'Sui wallet address' })\n    suiAddress: string;\n    @ApiProperty({ description: 'Token from OAuth login' })\n    oauthToken: string;\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n    @ApiProperty({ description: 'Normally, the email' })\n    username: string;\n}\n\nexport class UpdateUserOAuthResponseDto {\n    @ApiProperty({ description: '' })\n    authId: string;\n    @ApiProperty({ description: '' })\n    username: string;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class GetUserOAuthDto {\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n}\n\nexport class GetUserOAuthResponseDto extends GetAccountResponseDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerifySignatureDto.html":{"url":"classes/VerifySignatureDto.html","title":"class - VerifySignatureDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VerifySignatureDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/req.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                message\n                            \n                            \n                                    \n                                signature\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The address of the wallet that signed the transaction'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The original message that was signed'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:103\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        signature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The expected signature'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:101\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass ResponseDtoBase {\n    @ApiProperty({ description: 'The current network (e.g. devnet)' })\n    network: string;\n}\n\nexport class MintBeatsNftDto {\n    @ApiProperty({ description: 'Name of the NFT' })\n    name: string;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'URL of the NFT image' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintBeatmapsNftDto {\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'Username of the beatmap creator' })\n    username: string;\n    @ApiProperty({ description: 'Song title or beatmap title' })\n    title: string;\n    @ApiProperty({ description: 'Song artist' })\n    artist: string;\n    @ApiProperty({ description: 'Beatmap json' })\n    beatmapJson: string;\n    @ApiProperty({ description: 'NFT image url' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintTokenDto {\n    @ApiProperty({ description: 'The amount of the token' })\n    amount: number;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n}\n\nexport class GetTokenBalanceDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class GetBeatsNftsDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class MintNftResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n    @ApiProperty({ description: 'The list of NFT addresses minted' })\n    addresses: string[];\n}\n\nexport class RequestNFTResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class MintTokenResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class GetTokenBalanceResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The balance of the wallet' })\n    balance: number;\n}\n\nexport class BeatsNftDto {\n    name: string;\n    url: string;\n}\n\nexport class BeatmapsNftDto {\n    username: string;\n    title: string;\n    artist: string;\n    beatmapJson: string;\n}\n\nexport class GetBeatsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The unique BEATS NFTs owned' })\n    nfts: BeatsNftDto[];\n}\n\nexport class GetBeatmapsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The BEATMAPS NFTs owned' })\n    nfts: BeatmapsNftDto[];\n}\n\nexport class VerifySignatureDto {\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'The expected signature' })\n    signature: string;\n    @ApiProperty({ description: 'The original message that was signed' })\n    message: string;\n}\n\nexport class VerifySignatureResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n}\n\n/// --- LEADERBOARD --- ///\n\nexport class GetLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The max number of records to include in the response' })\n    limit: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class LeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The total score of the users' })\n    score: number;\n    @ApiProperty({ description: 'The username of the user' })\n    username: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class GetLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of each user' })\n    scores: LeaderboardDto[];\n}\n\nexport class AddLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    authId: string;\n    @ApiProperty({ description: 'The auth type of the user login' })\n    authType: string;\n    @ApiProperty({ description: 'The score to add' })\n    score: number;\n    @ApiProperty({ description: 'The present username of the user being added' })\n    username: string;\n}\n\nexport class AddLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of the user' })\n    score: number;\n}\n\nexport class GetLeaderboardSprintDto {\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n    @ApiProperty({ description: 'Optional max number of records to return' })\n    limit: number;\n}\n\nexport class GetLeaderboardSprintResponseDto {\n    @ApiProperty({ description: 'Unique id of sprint' })\n    sprintId: string;\n    @ApiProperty({ description: 'Whether or not sprint is currently active' })\n    active: boolean;\n    @ApiProperty({ description: 'Sprint start date' })\n    startDate: number;\n    @ApiProperty({ description: 'Sprint end date' })\n    endDate: number;\n}\n\n/// --- AUTH --- ///\n\nexport class CheckUsernameDto {\n    @ApiProperty({ description: 'Username to check' })\n    username: string;\n}\n\nexport class CheckUsernameResponseDto {\n    @ApiProperty({ description: 'Username exists or not' })\n    exists: boolean;\n}\n\n//TODO: need this?\nexport class GetAccountDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n}\n\nexport class GetAccountResponseDto {\n    @ApiProperty({ description: 'SUI wallet address' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Account unique username' })\n    username: string;\n    @ApiProperty({ description: 'Player level' })\n    level: number;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class StartAuthSessionDto {\n    @ApiProperty({ description: 'EVM wallet address' })\n    evmWallet: string;\n}\n\nexport class StartAuthSessionResponseDto {\n    @ApiProperty({ description: 'The unique id of the created session' })\n    sessionId: string;\n    @ApiProperty({ description: 'A message for the client to sign as a challenge' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The username of the specified account, if it exists' })\n    username: string;\n}\n\nexport class AuthVerifyDto {\n    @ApiProperty({ description: 'Wallet address' })\n    wallet: string;\n    @ApiProperty({ description: 'Wallet type can be evm or sui' })\n    walletType: 'sui' | 'evm';\n    @ApiProperty({ description: 'The action being taken; verify signature, or update account' })\n    action: 'verify' | 'update';\n    @ApiProperty({ description: 'The unique id of this session' })\n    sessionId: string;\n    @ApiProperty({ description: 'The message that was signed by the client' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The message signature as signed by caller' })\n    signature: string;\n    @ApiProperty({ description: 'A unique user-chosen username' })\n    username: string;\n}\n\nexport class AuthVerifyResponseDto {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    wallet: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n    @ApiProperty({ description: 'Sui wallet address (if any)' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Username of user' })\n    username: string;\n}\n\nexport class UpdateUserLevelDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n    @ApiProperty({ description: 'Level of player' })\n    level: number;\n}\n\nexport class UpdateUserOAuthDto {\n    @ApiProperty({ description: 'Sui wallet address' })\n    suiAddress: string;\n    @ApiProperty({ description: 'Token from OAuth login' })\n    oauthToken: string;\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n    @ApiProperty({ description: 'Normally, the email' })\n    username: string;\n}\n\nexport class UpdateUserOAuthResponseDto {\n    @ApiProperty({ description: '' })\n    authId: string;\n    @ApiProperty({ description: '' })\n    username: string;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class GetUserOAuthDto {\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n}\n\nexport class GetUserOAuthResponseDto extends GetAccountResponseDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerifySignatureResponseDto.html":{"url":"classes/VerifySignatureResponseDto.html","title":"class - VerifySignatureResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VerifySignatureResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entity/req.entity.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ResponseDtoBase\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                address\n                            \n                            \n                                    \n                                failureReason\n                            \n                            \n                                    \n                                verified\n                            \n                            \n                                    \n                                network\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The address of the wallet that signed the transaction'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:110\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        failureReason\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'General reason for failure to verify (if not verified)'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:112\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        verified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Whether or not the signature was verified'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entity/req.entity.ts:108\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        network\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The current network (e.g. devnet)'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ResponseDtoBase\n\n                            \n                        \n                    \n                        \n                                Defined in         ResponseDtoBase:5\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nclass ResponseDtoBase {\n    @ApiProperty({ description: 'The current network (e.g. devnet)' })\n    network: string;\n}\n\nexport class MintBeatsNftDto {\n    @ApiProperty({ description: 'Name of the NFT' })\n    name: string;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'URL of the NFT image' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintBeatmapsNftDto {\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n    @ApiProperty({ description: 'Username of the beatmap creator' })\n    username: string;\n    @ApiProperty({ description: 'Song title or beatmap title' })\n    title: string;\n    @ApiProperty({ description: 'Song artist' })\n    artist: string;\n    @ApiProperty({ description: 'Beatmap json' })\n    beatmapJson: string;\n    @ApiProperty({ description: 'NFT image url' })\n    imageUrl: string;\n    @ApiProperty({ description: 'Number of NFT to be minted' })\n    quantity?: number = 1;\n}\n\nexport class MintTokenDto {\n    @ApiProperty({ description: 'The amount of the token' })\n    amount: number;\n    @ApiProperty({ description: 'The address of the recipient' })\n    recipient: string;\n}\n\nexport class GetTokenBalanceDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class GetBeatsNftsDto {\n    @ApiProperty({ description: 'The address of the wallet' })\n    wallet: string;\n}\n\nexport class MintNftResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n    @ApiProperty({ description: 'The list of NFT addresses minted' })\n    addresses: string[];\n}\n\nexport class RequestNFTResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class MintTokenResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The signature of the transaction' })\n    signature: string;\n}\n\nexport class GetTokenBalanceResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The balance of the wallet' })\n    balance: number;\n}\n\nexport class BeatsNftDto {\n    name: string;\n    url: string;\n}\n\nexport class BeatmapsNftDto {\n    username: string;\n    title: string;\n    artist: string;\n    beatmapJson: string;\n}\n\nexport class GetBeatsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The unique BEATS NFTs owned' })\n    nfts: BeatsNftDto[];\n}\n\nexport class GetBeatmapsNftsResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The BEATMAPS NFTs owned' })\n    nfts: BeatmapsNftDto[];\n}\n\nexport class VerifySignatureDto {\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'The expected signature' })\n    signature: string;\n    @ApiProperty({ description: 'The original message that was signed' })\n    message: string;\n}\n\nexport class VerifySignatureResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    address: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n}\n\n/// --- LEADERBOARD --- ///\n\nexport class GetLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The max number of records to include in the response' })\n    limit: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class LeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    wallet: string;\n    @ApiProperty({ description: 'The total score of the users' })\n    score: number;\n    @ApiProperty({ description: 'The username of the user' })\n    username: number;\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n}\n\nexport class GetLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of each user' })\n    scores: LeaderboardDto[];\n}\n\nexport class AddLeaderboardDto {\n    @ApiProperty({ description: 'The address of the wallet of the user' })\n    authId: string;\n    @ApiProperty({ description: 'The auth type of the user login' })\n    authType: string;\n    @ApiProperty({ description: 'The score to add' })\n    score: number;\n    @ApiProperty({ description: 'The present username of the user being added' })\n    username: string;\n}\n\nexport class AddLeaderboardResponseDto extends ResponseDtoBase {\n    @ApiProperty({ description: 'The total score of the user' })\n    score: number;\n}\n\nexport class GetLeaderboardSprintDto {\n    @ApiProperty({ description: 'Optional unique id of sprint' })\n    sprint: string;\n    @ApiProperty({ description: 'Optional max number of records to return' })\n    limit: number;\n}\n\nexport class GetLeaderboardSprintResponseDto {\n    @ApiProperty({ description: 'Unique id of sprint' })\n    sprintId: string;\n    @ApiProperty({ description: 'Whether or not sprint is currently active' })\n    active: boolean;\n    @ApiProperty({ description: 'Sprint start date' })\n    startDate: number;\n    @ApiProperty({ description: 'Sprint end date' })\n    endDate: number;\n}\n\n/// --- AUTH --- ///\n\nexport class CheckUsernameDto {\n    @ApiProperty({ description: 'Username to check' })\n    username: string;\n}\n\nexport class CheckUsernameResponseDto {\n    @ApiProperty({ description: 'Username exists or not' })\n    exists: boolean;\n}\n\n//TODO: need this?\nexport class GetAccountDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n}\n\nexport class GetAccountResponseDto {\n    @ApiProperty({ description: 'SUI wallet address' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Account unique username' })\n    username: string;\n    @ApiProperty({ description: 'Player level' })\n    level: number;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class StartAuthSessionDto {\n    @ApiProperty({ description: 'EVM wallet address' })\n    evmWallet: string;\n}\n\nexport class StartAuthSessionResponseDto {\n    @ApiProperty({ description: 'The unique id of the created session' })\n    sessionId: string;\n    @ApiProperty({ description: 'A message for the client to sign as a challenge' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The username of the specified account, if it exists' })\n    username: string;\n}\n\nexport class AuthVerifyDto {\n    @ApiProperty({ description: 'Wallet address' })\n    wallet: string;\n    @ApiProperty({ description: 'Wallet type can be evm or sui' })\n    walletType: 'sui' | 'evm';\n    @ApiProperty({ description: 'The action being taken; verify signature, or update account' })\n    action: 'verify' | 'update';\n    @ApiProperty({ description: 'The unique id of this session' })\n    sessionId: string;\n    @ApiProperty({ description: 'The message that was signed by the client' })\n    messageToSign: string;\n    @ApiProperty({ description: 'The message signature as signed by caller' })\n    signature: string;\n    @ApiProperty({ description: 'A unique user-chosen username' })\n    username: string;\n}\n\nexport class AuthVerifyResponseDto {\n    @ApiProperty({ description: 'Whether or not the signature was verified' })\n    verified: boolean;\n    @ApiProperty({ description: 'The address of the wallet that signed the transaction' })\n    wallet: string;\n    @ApiProperty({ description: 'General reason for failure to verify (if not verified)' })\n    failureReason: string;\n    @ApiProperty({ description: 'Sui wallet address (if any)' })\n    suiWallet: string;\n    @ApiProperty({ description: 'Username of user' })\n    username: string;\n}\n\nexport class UpdateUserLevelDto {\n    @ApiProperty({ description: 'Auth ID, e.g. EVM wallet address or username' })\n    authId: string;\n    @ApiProperty({ description: 'Auth type, e.g. \"evm\"' })\n    authType: 'evm' | 'sui';\n    @ApiProperty({ description: 'Level of player' })\n    level: number;\n}\n\nexport class UpdateUserOAuthDto {\n    @ApiProperty({ description: 'Sui wallet address' })\n    suiAddress: string;\n    @ApiProperty({ description: 'Token from OAuth login' })\n    oauthToken: string;\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n    @ApiProperty({ description: 'Normally, the email' })\n    username: string;\n}\n\nexport class UpdateUserOAuthResponseDto {\n    @ApiProperty({ description: '' })\n    authId: string;\n    @ApiProperty({ description: '' })\n    username: string;\n    @ApiProperty({ description: 'Success or failure of the operation' })\n    status: string;\n}\n\nexport class GetUserOAuthDto {\n    @ApiProperty({ description: 'A secret number' })\n    nonceToken: string;\n}\n\nexport class GetUserOAuthResponseDto extends GetAccountResponseDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/20)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            variable\n            LEADERBOARD_DEFAULT_LIMIT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            variable\n            MAX_JSON_LENGTH\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            variable\n            MAX_NFT_NAME_LENGTH\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            variable\n            MAX_SIGNATURE_LENGTH\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            variable\n            MAX_STRING_LENGTH\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            variable\n            MAX_URL_LENGTH\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            variable\n            MAX_USERNAME_LENGTH\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            variable\n            MAX_WALLET_LENGTH\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.logger.ts\n            \n            injectable\n            AppLogger\n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/AuthManagerDynamoDb.ts\n            \n            class\n            AuthManagerDynamoDb\n            \n                0 %\n                (0/21)\n            \n        \n        \n            \n                \n                src/auth/AuthManagerDynamoDb.ts\n            \n            function\n            unixTimestamp\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/AuthManagerDynamoDb.ts\n            \n            variable\n            GSI_USERNAME_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/IAuthManager.ts\n            \n            interface\n            IAuthManager\n            \n                63 %\n                (7/11)\n            \n        \n        \n            \n                \n                src/auth/IAuthManager.ts\n            \n            interface\n            IAuthRecord\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/IAuthManager.ts\n            \n            interface\n            IAuthSession\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/auth.ts\n            \n            function\n            getAuthManagerInstance\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/config.ts\n            \n            class\n            Config\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/dataAccess/DynamoDbAccess.ts\n            \n            class\n            DynamoDbAccess\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/dataAccess/DynamoDbAccess.ts\n            \n            variable\n            AWS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/dataAccess/IDynamoResult.ts\n            \n            interface\n            IDynamoResult\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/entity/req.entity.ts\n            \n            class\n            AddLeaderboardDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/entity/req.entity.ts\n            \n            class\n            AddLeaderboardResponseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/entity/req.entity.ts\n            \n            class\n            AuthVerifyDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/entity/req.entity.ts\n            \n            class\n            AuthVerifyResponseDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/entity/req.entity.ts\n            \n            class\n            BeatmapsNftDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/entity/req.entity.ts\n            \n            class\n            BeatsNftDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/entity/req.entity.ts\n            \n            class\n            CheckUsernameDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/entity/req.entity.ts\n            \n            class\n            CheckUsernameResponseDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/entity/req.entity.ts\n            \n            class\n            GetAccountDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/entity/req.entity.ts\n            \n            class\n            GetAccountResponseDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/entity/req.entity.ts\n            \n            class\n            GetBeatmapsNftsResponseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/entity/req.entity.ts\n            \n            class\n            GetBeatsNftsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/entity/req.entity.ts\n            \n            class\n            GetBeatsNftsResponseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/entity/req.entity.ts\n            \n            class\n            GetLeaderboardDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/entity/req.entity.ts\n            \n            class\n            GetLeaderboardResponseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/entity/req.entity.ts\n            \n            class\n            GetLeaderboardSprintDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/entity/req.entity.ts\n            \n            class\n            GetLeaderboardSprintResponseDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/entity/req.entity.ts\n            \n            class\n            GetTokenBalanceDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/entity/req.entity.ts\n            \n            class\n            GetTokenBalanceResponseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/entity/req.entity.ts\n            \n            class\n            GetUserOAuthDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/entity/req.entity.ts\n            \n            class\n            GetUserOAuthResponseDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/entity/req.entity.ts\n            \n            class\n            LeaderboardDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/entity/req.entity.ts\n            \n            class\n            MintBeatmapsNftDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/entity/req.entity.ts\n            \n            class\n            MintBeatsNftDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/entity/req.entity.ts\n            \n            class\n            MintNftResponseDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/entity/req.entity.ts\n            \n            class\n            MintTokenDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/entity/req.entity.ts\n            \n            class\n            MintTokenResponseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/entity/req.entity.ts\n            \n            class\n            RequestNFTResponseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/entity/req.entity.ts\n            \n            class\n            ResponseDtoBase\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/entity/req.entity.ts\n            \n            class\n            StartAuthSessionDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/entity/req.entity.ts\n            \n            class\n            StartAuthSessionResponseDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/entity/req.entity.ts\n            \n            class\n            UpdateUserLevelDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/entity/req.entity.ts\n            \n            class\n            UpdateUserOAuthDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/entity/req.entity.ts\n            \n            class\n            UpdateUserOAuthResponseDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/entity/req.entity.ts\n            \n            class\n            VerifySignatureDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/entity/req.entity.ts\n            \n            class\n            VerifySignatureResponseDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/leaderboard/ILeaderboard.ts\n            \n            interface\n            ILeaderboard\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                src/leaderboard/ILeaderboard.ts\n            \n            interface\n            ISprint\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/leaderboard/LeaderboardDynamoDb.ts\n            \n            class\n            LeaderboardDynamoDb\n            \n                0 %\n                (0/26)\n            \n        \n        \n            \n                \n                src/leaderboard/LeaderboardDynamoDb.ts\n            \n            class\n            LocalScoreCache\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/leaderboard/LeaderboardDynamoDb.ts\n            \n            interface\n            IScore\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/leaderboard/LeaderboardDynamoDb.ts\n            \n            function\n            unixDate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/leaderboard/LeaderboardDynamoDb.ts\n            \n            variable\n            DEFAULT_SPRINT_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/leaderboard/LeaderboardDynamoDb.ts\n            \n            variable\n            DEFAULT_SPRINT_LENGTH\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/leaderboard/LeaderboardDynamoDb.ts\n            \n            variable\n            GSI_ACTIVE_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/leaderboard/LeaderboardDynamoDb.ts\n            \n            variable\n            GSI_SPRINT_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/leaderboard/LeaderboardDynamoDb.ts\n            \n            variable\n            localScoreCache_default\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/leaderboard/LeaderboardDynamoDb.ts\n            \n            variable\n            localScoreCache_sprint\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/leaderboard/LeaderboardJsonFile.ts\n            \n            class\n            LeaderboardJsonFile\n            \n                7 %\n                (1/13)\n            \n        \n        \n            \n                \n                src/leaderboard/LeaderboardMemory.ts\n            \n            class\n            LeaderboardMemory\n            \n                9 %\n                (1/11)\n            \n        \n        \n            \n                \n                src/leaderboard/leaderboard.ts\n            \n            function\n            getLeaderboardInstance\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/sui.service.ts\n            \n            injectable\n            SuiService\n            \n                48 %\n                (16/33)\n            \n        \n        \n            \n                \n                src/sui.service.ts\n            \n            variable\n            strToByteArray\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/sui.service.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/sign.ts\n            \n            function\n            sign\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/sign.ts\n            \n            function\n            verify\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/sign.ts\n            \n            variable\n            msg\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/sign.ts\n            \n            variable\n            strToByteArray\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/sign.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-auth.ts\n            \n            class\n            MockService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                test/test-auth.ts\n            \n            function\n            assert\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-auth.ts\n            \n            function\n            createAuthSessionTable\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-auth.ts\n            \n            function\n            createAuthTable\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-auth.ts\n            \n            function\n            createAuthUsernameGSI\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-auth.ts\n            \n            function\n            createRandomAddress\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-auth.ts\n            \n            function\n            deleteAuthTable\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-auth.ts\n            \n            function\n            deleteTable\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-auth.ts\n            \n            function\n            getRandomKeypair\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-auth.ts\n            \n            function\n            main\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-auth.ts\n            \n            function\n            readData\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-auth.ts\n            \n            function\n            unixDate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-auth.ts\n            \n            function\n            verifySignature\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-auth.ts\n            \n            variable\n            AUTH_SESSION_TABLE_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-auth.ts\n            \n            variable\n            AUTH_TABLE_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-auth.ts\n            \n            variable\n            dynamoDb\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-auth.ts\n            \n            variable\n            GSI_USERNAME_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-dynamo.ts\n            \n            function\n            main\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-leaderboard.ts\n            \n            function\n            assert\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-leaderboard.ts\n            \n            function\n            createActiveGSI\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-leaderboard.ts\n            \n            function\n            createActiveSprint\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-leaderboard.ts\n            \n            function\n            createInactiveSprint\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-leaderboard.ts\n            \n            function\n            createLeaderboardScores\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-leaderboard.ts\n            \n            function\n            createLeaderboardSprints\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-leaderboard.ts\n            \n            function\n            createRandomAddress\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-leaderboard.ts\n            \n            function\n            createScoreGSI\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-leaderboard.ts\n            \n            function\n            createSprintGSI\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-leaderboard.ts\n            \n            function\n            deleteLeaderboardScores\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-leaderboard.ts\n            \n            function\n            deleteLeaderboardSprints\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-leaderboard.ts\n            \n            function\n            deleteTable\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-leaderboard.ts\n            \n            function\n            main\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-leaderboard.ts\n            \n            function\n            readData\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-leaderboard.ts\n            \n            function\n            unixDate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-leaderboard.ts\n            \n            variable\n            dynamoDb\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-leaderboard.ts\n            \n            variable\n            GSI_ACTIVE_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-leaderboard.ts\n            \n            variable\n            GSI_SCORE_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-leaderboard.ts\n            \n            variable\n            GSI_SPRINT_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-leaderboard.ts\n            \n            variable\n            SCORES_TABLE_NAME\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                test/test-leaderboard.ts\n            \n            variable\n            SPRINTS_TABLE_NAME\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @mysten/sui.js : ^0.41.0\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.1.2\n        \n            @originbyte/js-sdk : ^0.3.6\n        \n            aws-sdk : ^2.1498.0\n        \n            ethers : ^6.11.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            tweetnacl : ^1.0.3\n        \n            winston : ^3.10.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            assert   (test/.../test-auth.ts)\n                        \n                        \n                            assert   (test/.../test-leaderboard.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            createActiveGSI   (test/.../test-leaderboard.ts)\n                        \n                        \n                            createActiveSprint   (test/.../test-leaderboard.ts)\n                        \n                        \n                            createAuthSessionTable   (test/.../test-auth.ts)\n                        \n                        \n                            createAuthTable   (test/.../test-auth.ts)\n                        \n                        \n                            createAuthUsernameGSI   (test/.../test-auth.ts)\n                        \n                        \n                            createInactiveSprint   (test/.../test-leaderboard.ts)\n                        \n                        \n                            createLeaderboardScores   (test/.../test-leaderboard.ts)\n                        \n                        \n                            createLeaderboardSprints   (test/.../test-leaderboard.ts)\n                        \n                        \n                            createRandomAddress   (test/.../test-auth.ts)\n                        \n                        \n                            createRandomAddress   (test/.../test-leaderboard.ts)\n                        \n                        \n                            createScoreGSI   (test/.../test-leaderboard.ts)\n                        \n                        \n                            createSprintGSI   (test/.../test-leaderboard.ts)\n                        \n                        \n                            deleteAuthTable   (test/.../test-auth.ts)\n                        \n                        \n                            deleteLeaderboardScores   (test/.../test-leaderboard.ts)\n                        \n                        \n                            deleteLeaderboardSprints   (test/.../test-leaderboard.ts)\n                        \n                        \n                            deleteTable   (test/.../test-auth.ts)\n                        \n                        \n                            deleteTable   (test/.../test-leaderboard.ts)\n                        \n                        \n                            getAuthManagerInstance   (src/.../auth.ts)\n                        \n                        \n                            getLeaderboardInstance   (src/.../leaderboard.ts)\n                        \n                        \n                            getRandomKeypair   (test/.../test-auth.ts)\n                        \n                        \n                            main   (test/.../test-auth.ts)\n                        \n                        \n                            main   (test/.../test-dynamo.ts)\n                        \n                        \n                            main   (test/.../test-leaderboard.ts)\n                        \n                        \n                            readData   (test/.../test-auth.ts)\n                        \n                        \n                            readData   (test/.../test-leaderboard.ts)\n                        \n                        \n                            sign   (test/.../sign.ts)\n                        \n                        \n                            unixDate   (test/.../test-auth.ts)\n                        \n                        \n                            unixDate   (test/.../test-leaderboard.ts)\n                        \n                        \n                            unixDate   (src/.../LeaderboardDynamoDb.ts)\n                        \n                        \n                            unixTimestamp   (src/.../AuthManagerDynamoDb.ts)\n                        \n                        \n                            verify   (test/.../sign.ts)\n                        \n                        \n                            verifySignature   (test/.../test-auth.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    test/test-auth.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        assert\n                        \n                    \n                \n            \n            \n                \nassert(pred, msg: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                pred\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                msg\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    ''\n                                            \n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createAuthSessionTable\n                        \n                    \n                \n            \n            \n                \ncreateAuthSessionTable()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createAuthTable\n                        \n                    \n                \n            \n            \n                \ncreateAuthTable()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createAuthUsernameGSI\n                        \n                    \n                \n            \n            \n                \ncreateAuthUsernameGSI()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createRandomAddress\n                        \n                    \n                \n            \n            \n                \ncreateRandomAddress(len: number)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                len\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    20\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteAuthTable\n                        \n                    \n                \n            \n            \n                \ndeleteAuthTable()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteTable\n                        \n                    \n                \n            \n            \n                \ndeleteTable(tableName: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tableName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRandomKeypair\n                        \n                    \n                \n            \n            \n                \ngetRandomKeypair()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        main\n                        \n                    \n                \n            \n            \n                \nmain()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        readData\n                        \n                    \n                \n            \n            \n                \nreadData()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unixDate\n                        \n                    \n                \n            \n            \n                \nunixDate()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifySignature\n                        \n                    \n                \n            \n            \n                \nverifySignature(message, signature, expectedAddress)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                signature\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                expectedAddress\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    test/test-leaderboard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        assert\n                        \n                    \n                \n            \n            \n                \nassert(pred)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                pred\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createActiveGSI\n                        \n                    \n                \n            \n            \n                \ncreateActiveGSI()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createActiveSprint\n                        \n                    \n                \n            \n            \n                \ncreateActiveSprint(lb: LeaderboardDynamoDb, sprintId: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                lb\n                                            \n                                                            LeaderboardDynamoDb\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                sprintId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createInactiveSprint\n                        \n                    \n                \n            \n            \n                \ncreateInactiveSprint(lb: LeaderboardDynamoDb, sprintId: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                lb\n                                            \n                                                            LeaderboardDynamoDb\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                sprintId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createLeaderboardScores\n                        \n                    \n                \n            \n            \n                \ncreateLeaderboardScores()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createLeaderboardSprints\n                        \n                    \n                \n            \n            \n                \ncreateLeaderboardSprints()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createRandomAddress\n                        \n                    \n                \n            \n            \n                \ncreateRandomAddress(len: number)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                len\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    20\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createScoreGSI\n                        \n                    \n                \n            \n            \n                \ncreateScoreGSI()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createSprintGSI\n                        \n                    \n                \n            \n            \n                \ncreateSprintGSI()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteLeaderboardScores\n                        \n                    \n                \n            \n            \n                \ndeleteLeaderboardScores()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteLeaderboardSprints\n                        \n                    \n                \n            \n            \n                \ndeleteLeaderboardSprints()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteTable\n                        \n                    \n                \n            \n            \n                \ndeleteTable(tableName: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tableName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        main\n                        \n                    \n                \n            \n            \n                \nmain()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        readData\n                        \n                    \n                \n            \n            \n                \nreadData()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unixDate\n                        \n                    \n                \n            \n            \n                \nunixDate()\n                \n            \n\n\n\n\n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/auth/auth.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getAuthManagerInstance\n                        \n                    \n                \n            \n            \n                \ngetAuthManagerInstance()\n                \n            \n\n\n\n\n            \n                \n                        Returns an instance of IAuthManager that will be used for accessing the auth database.\n\n\n                        \n                            Returns :         IAuthManager\n\n                        \n                            \n                                IAuthManager instance\n\n                            \n                \n            \n        \n    \n    src/leaderboard/leaderboard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getLeaderboardInstance\n                        \n                    \n                \n            \n            \n                \ngetLeaderboardInstance(network: string)\n                \n            \n\n\n\n\n            \n                \n                        Returns an instance of ILeaderboard that will be used for accessing the leaderboard database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                network\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ILeaderboard\n\n                        \n                            \n                                ILeaderboard instance\n\n                            \n                \n            \n        \n    \n    test/test-dynamo.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        main\n                        \n                    \n                \n            \n            \n                \nmain()\n                \n            \n\n\n\n\n        \n    \n    test/sign.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        sign\n                        \n                    \n                \n            \n            \n                \nsign(message: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verify\n                        \n                    \n                \n            \n            \n                \nverify(address: string, message: string, signature: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                address\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                signature\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/leaderboard/LeaderboardDynamoDb.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        unixDate\n                        \n                    \n                \n            \n            \n                \nunixDate()\n                \n            \n\n\n\n\n        \n    \n    src/auth/AuthManagerDynamoDb.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        unixTimestamp\n                        \n                    \n                \n            \n            \n                \nunixTimestamp()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         number\n\n                        \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nSoundbeats-Sui API\nPOST /api/v1/nfts (MintBeatsNftDto)\nSame as calling POST /api/v1/nfts/beats\nReturns: MintNftResponseDto\nPOST /api/v1/nfts/beats (MintBeatsNftDto)\nMints a quantity of BEATS NFTs to a given recipient. \nReturns: MintNftResponseDto\nPOST /api/v1/nfts/beatmaps (MintBeatmapsNftDto)\nMints a quantity of BEATMAPS NFTs to a given recipient. \nReturns: MintNftResponseDto\nGET /api/v1/nfts (GetBeatsNftsDto)\nSame as GET /api/v1/nfts/beats\nReturns: GetBeatsNftsResponseDto\nGET /api/v1/nfts/beats (GetBeatsNftsDto)\nGets the BEATS NFTs currently owned by a given address.\nReturns: GetBeatsNftsResponseDto\nGET /api/v1/nfts/beatmaps (GetBeatmapsNftsDto)\nGets the BEATMAPS NFTs currently owned by a given address.\nReturns: GetBeatmapsNftsResponseDto\nPOST /api/v1/token (MintTokenDto)\nMint a quantity of BEATS token to a given recipient. \nReturns: MintTokenResponseDto\nGET /api/v1/token (GetTokenBalanceDto)\nGets the amount of BEATS token owned by a given address.\nReturns: GetTokenBalanceResponseDto\nGET /api/v1/verify (VerifySignatureDto)\nVerify a SUI signature (deprecated)\nReturns: VerifySignatureResponseDto\nGET /api/v1/username (CheckUsernameDto)\nCheck whether or not a username exists.\nReturns: CheckUsernameResponseDto\nGet /api/v1/leaderboard (GetLeaderboardDto)\nGets leaderboard score data. \nReturns: GetLeaderboardResponseDto\nPOST /api/v1/leaderboard (AddLeaderboardDto)\nAdds leaderboard score data. \nReturns: AddLeaderboardResponseDto\nGET /api/v1/sprint (GetLeaderboardSprintDto)\nGet leaderboard sprints data. \nReturns: GetLeaderboardSprintResponseDto\nPOST /api/v1/auth (StartAuthSessionDto)\nStart a private authentication session. \nReturns: StartAuthSessionResponseDto\nPOST /api/v1/verify (AuthVerifyDto)\nNew SUI/EVM signature verification function. \nCalling with action:'verify' verifies only. \nCalling with action:'update' can update a username oreate a new account if one doesn't exist yet.\nReturns: AuthVerifyResponseDto\nGET /api/v1/accounts (GetAccountDto)\nGets account data. \nReturns: GetAccountResponseDto\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAppService\n\nAppService\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nSuiService\n\nSuiService\n\nAppModule -->\n\nSuiService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    44 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AUTH_SESSION_TABLE_NAME   (test/.../test-auth.ts)\n                        \n                        \n                            AUTH_TABLE_NAME   (test/.../test-auth.ts)\n                        \n                        \n                            AWS   (src/.../DynamoDbAccess.ts)\n                        \n                        \n                            DEFAULT_SPRINT_KEY   (src/.../LeaderboardDynamoDb.ts)\n                        \n                        \n                            DEFAULT_SPRINT_LENGTH   (src/.../LeaderboardDynamoDb.ts)\n                        \n                        \n                            dynamoDb   (test/.../test-auth.ts)\n                        \n                        \n                            dynamoDb   (test/.../test-leaderboard.ts)\n                        \n                        \n                            GSI_ACTIVE_NAME   (test/.../test-leaderboard.ts)\n                        \n                        \n                            GSI_ACTIVE_NAME   (src/.../LeaderboardDynamoDb.ts)\n                        \n                        \n                            GSI_SCORE_NAME   (test/.../test-leaderboard.ts)\n                        \n                        \n                            GSI_SPRINT_NAME   (test/.../test-leaderboard.ts)\n                        \n                        \n                            GSI_SPRINT_NAME   (src/.../LeaderboardDynamoDb.ts)\n                        \n                        \n                            GSI_USERNAME_NAME   (test/.../test-auth.ts)\n                        \n                        \n                            GSI_USERNAME_NAME   (src/.../AuthManagerDynamoDb.ts)\n                        \n                        \n                            LEADERBOARD_DEFAULT_LIMIT   (src/.../app.controller.ts)\n                        \n                        \n                            localScoreCache_default   (src/.../LeaderboardDynamoDb.ts)\n                        \n                        \n                            localScoreCache_sprint   (src/.../LeaderboardDynamoDb.ts)\n                        \n                        \n                            MAX_JSON_LENGTH   (src/.../app.controller.ts)\n                        \n                        \n                            MAX_NFT_NAME_LENGTH   (src/.../app.controller.ts)\n                        \n                        \n                            MAX_SIGNATURE_LENGTH   (src/.../app.controller.ts)\n                        \n                        \n                            MAX_STRING_LENGTH   (src/.../app.controller.ts)\n                        \n                        \n                            MAX_URL_LENGTH   (src/.../app.controller.ts)\n                        \n                        \n                            MAX_USERNAME_LENGTH   (src/.../app.controller.ts)\n                        \n                        \n                            MAX_WALLET_LENGTH   (src/.../app.controller.ts)\n                        \n                        \n                            msg   (test/.../sign.ts)\n                        \n                        \n                            SCORES_TABLE_NAME   (test/.../test-leaderboard.ts)\n                        \n                        \n                            SPRINTS_TABLE_NAME   (test/.../test-leaderboard.ts)\n                        \n                        \n                            strToByteArray   (src/.../sui.service.ts)\n                        \n                        \n                            strToByteArray   (test/.../sign.ts)\n                        \n                        \n                               (src/.../sui.service.ts)\n                        \n                        \n                               (test/.../sign.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    test/test-auth.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_SESSION_TABLE_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"auth-session-test\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AUTH_TABLE_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"auth-test\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dynamoDb\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new DynamoDB()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GSI_USERNAME_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"GSI_USERNAME\"\n                    \n                \n\n\n        \n    \n\n    src/dataAccess/DynamoDbAccess.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AWS\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require(\"aws-sdk\")\n                    \n                \n\n\n        \n    \n\n    src/leaderboard/LeaderboardDynamoDb.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DEFAULT_SPRINT_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"default\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DEFAULT_SPRINT_LENGTH\n                        \n                    \n                \n            \n                \n                    \n                        Default value : 86400 * 14\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GSI_ACTIVE_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"GSI_ACTIVE\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GSI_SPRINT_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"GSI_SPRINT\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        localScoreCache_default\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new LocalScoreCache(300)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        localScoreCache_sprint\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new LocalScoreCache(300)\n                    \n                \n\n\n        \n    \n\n    test/test-leaderboard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        dynamoDb\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new DynamoDB()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GSI_ACTIVE_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"GSI_ACTIVE\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GSI_SCORE_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"GSI_SCORE\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GSI_SPRINT_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"GSI_SPRINT\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SCORES_TABLE_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.DBTABLE_NAME_SCORES\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SPRINTS_TABLE_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.DBTABLE_NAME_SPRINTS\n                    \n                \n\n\n        \n    \n\n    src/auth/AuthManagerDynamoDb.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GSI_USERNAME_NAME\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"GSI_USERNAME\"\n                    \n                \n\n\n        \n    \n\n    src/app.controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LEADERBOARD_DEFAULT_LIMIT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 100\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MAX_JSON_LENGTH\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1000\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MAX_NFT_NAME_LENGTH\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 100\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MAX_SIGNATURE_LENGTH\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 500\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MAX_STRING_LENGTH\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1000\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MAX_URL_LENGTH\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 400\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MAX_USERNAME_LENGTH\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 100\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MAX_WALLET_LENGTH\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 100\n                    \n                \n\n\n        \n    \n\n    test/sign.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        msg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"0dT6ABMnswWTbEtxvE0emuo0og9CtJ9bOpPnPUPeHJ0=\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        strToByteArray\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (str: string): number[] => {\n    const utf8Encode = new TextEncoder()\n    return Array.from(utf8Encode.encode(str).values())\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('ethers')\n                    \n                \n\n\n        \n    \n\n    src/sui.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        strToByteArray\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (str: string): number[] => {\n    const utf8Encode = new TextEncoder();\n    return Array.from(utf8Encode.encode(str).values());\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('ethers')\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
